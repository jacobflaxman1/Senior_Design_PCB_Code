
Testing_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111cc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  08011310  08011310  00021310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b3c  08011b3c  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08011b3c  08011b3c  00021b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b44  08011b44  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b44  08011b44  00021b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b48  08011b48  00021b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08011b4c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000254  08011da0  00030254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08011da0  0003062c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003027e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022f0d  00000000  00000000  000302c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f66  00000000  00000000  000531ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002200  00000000  00000000  00058138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a3b  00000000  00000000  0005a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023951  00000000  00000000  0005bd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028793  00000000  00000000  0007f6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd1f  00000000  00000000  000a7e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a810  00000000  00000000  00173b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000254 	.word	0x20000254
 800015c:	00000000 	.word	0x00000000
 8000160:	080112f4 	.word	0x080112f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000258 	.word	0x20000258
 800017c:	080112f4 	.word	0x080112f4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	; 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	3a01      	subs	r2, #1
 8000c26:	bf28      	it	cs
 8000c28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c2c:	d2ed      	bcs.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dda:	2afd      	cmp	r2, #253	; 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	; 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	; 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	; 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__aeabi_f2iz>:
 8001028:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800102c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001030:	d30f      	bcc.n	8001052 <__aeabi_f2iz+0x2a>
 8001032:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001036:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800103a:	d90d      	bls.n	8001058 <__aeabi_f2iz+0x30>
 800103c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001044:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001048:	fa23 f002 	lsr.w	r0, r3, r2
 800104c:	bf18      	it	ne
 800104e:	4240      	negne	r0, r0
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2iz+0x3a>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d105      	bne.n	800106e <__aeabi_f2iz+0x46>
 8001062:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001066:	bf08      	it	eq
 8001068:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr

08001074 <__aeabi_ldivmod>:
 8001074:	b97b      	cbnz	r3, 8001096 <__aeabi_ldivmod+0x22>
 8001076:	b972      	cbnz	r2, 8001096 <__aeabi_ldivmod+0x22>
 8001078:	2900      	cmp	r1, #0
 800107a:	bfbe      	ittt	lt
 800107c:	2000      	movlt	r0, #0
 800107e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001082:	e006      	blt.n	8001092 <__aeabi_ldivmod+0x1e>
 8001084:	bf08      	it	eq
 8001086:	2800      	cmpeq	r0, #0
 8001088:	bf1c      	itt	ne
 800108a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800108e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001092:	f000 b9bb 	b.w	800140c <__aeabi_idiv0>
 8001096:	f1ad 0c08 	sub.w	ip, sp, #8
 800109a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800109e:	2900      	cmp	r1, #0
 80010a0:	db09      	blt.n	80010b6 <__aeabi_ldivmod+0x42>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db1a      	blt.n	80010dc <__aeabi_ldivmod+0x68>
 80010a6:	f000 f84d 	bl	8001144 <__udivmoddi4>
 80010aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b2:	b004      	add	sp, #16
 80010b4:	4770      	bx	lr
 80010b6:	4240      	negs	r0, r0
 80010b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db1b      	blt.n	80010f8 <__aeabi_ldivmod+0x84>
 80010c0:	f000 f840 	bl	8001144 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4240      	negs	r0, r0
 80010d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d4:	4252      	negs	r2, r2
 80010d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010da:	4770      	bx	lr
 80010dc:	4252      	negs	r2, r2
 80010de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010e2:	f000 f82f 	bl	8001144 <__udivmoddi4>
 80010e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ee:	b004      	add	sp, #16
 80010f0:	4240      	negs	r0, r0
 80010f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f6:	4770      	bx	lr
 80010f8:	4252      	negs	r2, r2
 80010fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fe:	f000 f821 	bl	8001144 <__udivmoddi4>
 8001102:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800110a:	b004      	add	sp, #16
 800110c:	4252      	negs	r2, r2
 800110e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001112:	4770      	bx	lr

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001124:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001128:	f000 b970 	b.w	800140c <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f806 	bl	8001144 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__udivmoddi4>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	9e08      	ldr	r6, [sp, #32]
 800114a:	460d      	mov	r5, r1
 800114c:	4604      	mov	r4, r0
 800114e:	460f      	mov	r7, r1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14a      	bne.n	80011ea <__udivmoddi4+0xa6>
 8001154:	428a      	cmp	r2, r1
 8001156:	4694      	mov	ip, r2
 8001158:	d965      	bls.n	8001226 <__udivmoddi4+0xe2>
 800115a:	fab2 f382 	clz	r3, r2
 800115e:	b143      	cbz	r3, 8001172 <__udivmoddi4+0x2e>
 8001160:	fa02 fc03 	lsl.w	ip, r2, r3
 8001164:	f1c3 0220 	rsb	r2, r3, #32
 8001168:	409f      	lsls	r7, r3
 800116a:	fa20 f202 	lsr.w	r2, r0, r2
 800116e:	4317      	orrs	r7, r2
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001176:	fa1f f58c 	uxth.w	r5, ip
 800117a:	fbb7 f1fe 	udiv	r1, r7, lr
 800117e:	0c22      	lsrs	r2, r4, #16
 8001180:	fb0e 7711 	mls	r7, lr, r1, r7
 8001184:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001188:	fb01 f005 	mul.w	r0, r1, r5
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x62>
 8001190:	eb1c 0202 	adds.w	r2, ip, r2
 8001194:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001198:	f080 811b 	bcs.w	80013d2 <__udivmoddi4+0x28e>
 800119c:	4290      	cmp	r0, r2
 800119e:	f240 8118 	bls.w	80013d2 <__udivmoddi4+0x28e>
 80011a2:	3902      	subs	r1, #2
 80011a4:	4462      	add	r2, ip
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80011ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80011b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011b6:	fb00 f505 	mul.w	r5, r0, r5
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d90a      	bls.n	80011d4 <__udivmoddi4+0x90>
 80011be:	eb1c 0404 	adds.w	r4, ip, r4
 80011c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011c6:	f080 8106 	bcs.w	80013d6 <__udivmoddi4+0x292>
 80011ca:	42a5      	cmp	r5, r4
 80011cc:	f240 8103 	bls.w	80013d6 <__udivmoddi4+0x292>
 80011d0:	4464      	add	r4, ip
 80011d2:	3802      	subs	r0, #2
 80011d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011d8:	1b64      	subs	r4, r4, r5
 80011da:	2100      	movs	r1, #0
 80011dc:	b11e      	cbz	r6, 80011e6 <__udivmoddi4+0xa2>
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	2300      	movs	r3, #0
 80011e2:	e9c6 4300 	strd	r4, r3, [r6]
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d908      	bls.n	8001200 <__udivmoddi4+0xbc>
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	f000 80ec 	beq.w	80013cc <__udivmoddi4+0x288>
 80011f4:	2100      	movs	r1, #0
 80011f6:	e9c6 0500 	strd	r0, r5, [r6]
 80011fa:	4608      	mov	r0, r1
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	fab3 f183 	clz	r1, r3
 8001204:	2900      	cmp	r1, #0
 8001206:	d149      	bne.n	800129c <__udivmoddi4+0x158>
 8001208:	42ab      	cmp	r3, r5
 800120a:	d302      	bcc.n	8001212 <__udivmoddi4+0xce>
 800120c:	4282      	cmp	r2, r0
 800120e:	f200 80f7 	bhi.w	8001400 <__udivmoddi4+0x2bc>
 8001212:	1a84      	subs	r4, r0, r2
 8001214:	eb65 0203 	sbc.w	r2, r5, r3
 8001218:	2001      	movs	r0, #1
 800121a:	4617      	mov	r7, r2
 800121c:	2e00      	cmp	r6, #0
 800121e:	d0e2      	beq.n	80011e6 <__udivmoddi4+0xa2>
 8001220:	e9c6 4700 	strd	r4, r7, [r6]
 8001224:	e7df      	b.n	80011e6 <__udivmoddi4+0xa2>
 8001226:	b902      	cbnz	r2, 800122a <__udivmoddi4+0xe6>
 8001228:	deff      	udf	#255	; 0xff
 800122a:	fab2 f382 	clz	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 808f 	bne.w	8001352 <__udivmoddi4+0x20e>
 8001234:	1a8a      	subs	r2, r1, r2
 8001236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123a:	fa1f fe8c 	uxth.w	lr, ip
 800123e:	2101      	movs	r1, #1
 8001240:	fbb2 f5f7 	udiv	r5, r2, r7
 8001244:	fb07 2015 	mls	r0, r7, r5, r2
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800124e:	fb0e f005 	mul.w	r0, lr, r5
 8001252:	4290      	cmp	r0, r2
 8001254:	d908      	bls.n	8001268 <__udivmoddi4+0x124>
 8001256:	eb1c 0202 	adds.w	r2, ip, r2
 800125a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800125e:	d202      	bcs.n	8001266 <__udivmoddi4+0x122>
 8001260:	4290      	cmp	r0, r2
 8001262:	f200 80ca 	bhi.w	80013fa <__udivmoddi4+0x2b6>
 8001266:	4645      	mov	r5, r8
 8001268:	1a12      	subs	r2, r2, r0
 800126a:	b2a4      	uxth	r4, r4
 800126c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001270:	fb07 2210 	mls	r2, r7, r0, r2
 8001274:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001278:	fb0e fe00 	mul.w	lr, lr, r0
 800127c:	45a6      	cmp	lr, r4
 800127e:	d908      	bls.n	8001292 <__udivmoddi4+0x14e>
 8001280:	eb1c 0404 	adds.w	r4, ip, r4
 8001284:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001288:	d202      	bcs.n	8001290 <__udivmoddi4+0x14c>
 800128a:	45a6      	cmp	lr, r4
 800128c:	f200 80ba 	bhi.w	8001404 <__udivmoddi4+0x2c0>
 8001290:	4610      	mov	r0, r2
 8001292:	eba4 040e 	sub.w	r4, r4, lr
 8001296:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800129a:	e79f      	b.n	80011dc <__udivmoddi4+0x98>
 800129c:	f1c1 0720 	rsb	r7, r1, #32
 80012a0:	408b      	lsls	r3, r1
 80012a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012aa:	fa05 f401 	lsl.w	r4, r5, r1
 80012ae:	fa20 f307 	lsr.w	r3, r0, r7
 80012b2:	40fd      	lsrs	r5, r7
 80012b4:	4323      	orrs	r3, r4
 80012b6:	fa00 f901 	lsl.w	r9, r0, r1
 80012ba:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80012be:	fa1f fe8c 	uxth.w	lr, ip
 80012c2:	fbb5 f8f0 	udiv	r8, r5, r0
 80012c6:	0c1c      	lsrs	r4, r3, #16
 80012c8:	fb00 5518 	mls	r5, r0, r8, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb08 f50e 	mul.w	r5, r8, lr
 80012d4:	42a5      	cmp	r5, r4
 80012d6:	fa02 f201 	lsl.w	r2, r2, r1
 80012da:	d90b      	bls.n	80012f4 <__udivmoddi4+0x1b0>
 80012dc:	eb1c 0404 	adds.w	r4, ip, r4
 80012e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80012e4:	f080 8087 	bcs.w	80013f6 <__udivmoddi4+0x2b2>
 80012e8:	42a5      	cmp	r5, r4
 80012ea:	f240 8084 	bls.w	80013f6 <__udivmoddi4+0x2b2>
 80012ee:	f1a8 0802 	sub.w	r8, r8, #2
 80012f2:	4464      	add	r4, ip
 80012f4:	1b64      	subs	r4, r4, r5
 80012f6:	b29d      	uxth	r5, r3
 80012f8:	fbb4 f3f0 	udiv	r3, r4, r0
 80012fc:	fb00 4413 	mls	r4, r0, r3, r4
 8001300:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001304:	fb03 fe0e 	mul.w	lr, r3, lr
 8001308:	45a6      	cmp	lr, r4
 800130a:	d908      	bls.n	800131e <__udivmoddi4+0x1da>
 800130c:	eb1c 0404 	adds.w	r4, ip, r4
 8001310:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8001314:	d26b      	bcs.n	80013ee <__udivmoddi4+0x2aa>
 8001316:	45a6      	cmp	lr, r4
 8001318:	d969      	bls.n	80013ee <__udivmoddi4+0x2aa>
 800131a:	3b02      	subs	r3, #2
 800131c:	4464      	add	r4, ip
 800131e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001322:	fba0 8302 	umull	r8, r3, r0, r2
 8001326:	eba4 040e 	sub.w	r4, r4, lr
 800132a:	429c      	cmp	r4, r3
 800132c:	46c6      	mov	lr, r8
 800132e:	461d      	mov	r5, r3
 8001330:	d355      	bcc.n	80013de <__udivmoddi4+0x29a>
 8001332:	d052      	beq.n	80013da <__udivmoddi4+0x296>
 8001334:	b156      	cbz	r6, 800134c <__udivmoddi4+0x208>
 8001336:	ebb9 030e 	subs.w	r3, r9, lr
 800133a:	eb64 0405 	sbc.w	r4, r4, r5
 800133e:	fa04 f707 	lsl.w	r7, r4, r7
 8001342:	40cb      	lsrs	r3, r1
 8001344:	40cc      	lsrs	r4, r1
 8001346:	431f      	orrs	r7, r3
 8001348:	e9c6 7400 	strd	r7, r4, [r6]
 800134c:	2100      	movs	r1, #0
 800134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001352:	f1c3 0120 	rsb	r1, r3, #32
 8001356:	fa02 fc03 	lsl.w	ip, r2, r3
 800135a:	fa20 f201 	lsr.w	r2, r0, r1
 800135e:	fa25 f101 	lsr.w	r1, r5, r1
 8001362:	409d      	lsls	r5, r3
 8001364:	432a      	orrs	r2, r5
 8001366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136a:	fa1f fe8c 	uxth.w	lr, ip
 800136e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001372:	fb07 1510 	mls	r5, r7, r0, r1
 8001376:	0c11      	lsrs	r1, r2, #16
 8001378:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800137c:	fb00 f50e 	mul.w	r5, r0, lr
 8001380:	428d      	cmp	r5, r1
 8001382:	fa04 f403 	lsl.w	r4, r4, r3
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x256>
 8001388:	eb1c 0101 	adds.w	r1, ip, r1
 800138c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001390:	d22f      	bcs.n	80013f2 <__udivmoddi4+0x2ae>
 8001392:	428d      	cmp	r5, r1
 8001394:	d92d      	bls.n	80013f2 <__udivmoddi4+0x2ae>
 8001396:	3802      	subs	r0, #2
 8001398:	4461      	add	r1, ip
 800139a:	1b49      	subs	r1, r1, r5
 800139c:	b292      	uxth	r2, r2
 800139e:	fbb1 f5f7 	udiv	r5, r1, r7
 80013a2:	fb07 1115 	mls	r1, r7, r5, r1
 80013a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013aa:	fb05 f10e 	mul.w	r1, r5, lr
 80013ae:	4291      	cmp	r1, r2
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x280>
 80013b2:	eb1c 0202 	adds.w	r2, ip, r2
 80013b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80013ba:	d216      	bcs.n	80013ea <__udivmoddi4+0x2a6>
 80013bc:	4291      	cmp	r1, r2
 80013be:	d914      	bls.n	80013ea <__udivmoddi4+0x2a6>
 80013c0:	3d02      	subs	r5, #2
 80013c2:	4462      	add	r2, ip
 80013c4:	1a52      	subs	r2, r2, r1
 80013c6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80013ca:	e739      	b.n	8001240 <__udivmoddi4+0xfc>
 80013cc:	4631      	mov	r1, r6
 80013ce:	4630      	mov	r0, r6
 80013d0:	e709      	b.n	80011e6 <__udivmoddi4+0xa2>
 80013d2:	4639      	mov	r1, r7
 80013d4:	e6e7      	b.n	80011a6 <__udivmoddi4+0x62>
 80013d6:	4610      	mov	r0, r2
 80013d8:	e6fc      	b.n	80011d4 <__udivmoddi4+0x90>
 80013da:	45c1      	cmp	r9, r8
 80013dc:	d2aa      	bcs.n	8001334 <__udivmoddi4+0x1f0>
 80013de:	ebb8 0e02 	subs.w	lr, r8, r2
 80013e2:	eb63 050c 	sbc.w	r5, r3, ip
 80013e6:	3801      	subs	r0, #1
 80013e8:	e7a4      	b.n	8001334 <__udivmoddi4+0x1f0>
 80013ea:	4645      	mov	r5, r8
 80013ec:	e7ea      	b.n	80013c4 <__udivmoddi4+0x280>
 80013ee:	4603      	mov	r3, r0
 80013f0:	e795      	b.n	800131e <__udivmoddi4+0x1da>
 80013f2:	4640      	mov	r0, r8
 80013f4:	e7d1      	b.n	800139a <__udivmoddi4+0x256>
 80013f6:	46d0      	mov	r8, sl
 80013f8:	e77c      	b.n	80012f4 <__udivmoddi4+0x1b0>
 80013fa:	3d02      	subs	r5, #2
 80013fc:	4462      	add	r2, ip
 80013fe:	e733      	b.n	8001268 <__udivmoddi4+0x124>
 8001400:	4608      	mov	r0, r1
 8001402:	e70b      	b.n	800121c <__udivmoddi4+0xd8>
 8001404:	4464      	add	r4, ip
 8001406:	3802      	subs	r0, #2
 8001408:	e743      	b.n	8001292 <__udivmoddi4+0x14e>
 800140a:	bf00      	nop

0800140c <__aeabi_idiv0>:
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001454:	2002      	movs	r0, #2
 8001456:	f7ff ffdb 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff ffd8 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	2004      	movs	r0, #4
 8001462:	f7ff ffd5 	bl	8001410 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|SD_DAT_1_Pin|SD_CS_Pin|SD_DAT_2_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	21b1      	movs	r1, #177	; 0xb1
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f002 f979 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_GPIO_Init+0x9c>)
 800147a:	f002 f973 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800147e:	2301      	movs	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001482:	2311      	movs	r3, #17
 8001484:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f002 f805 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SD_DAT_1_Pin|SD_CS_Pin|SD_DAT_2_Pin;
 800149a:	23b0      	movs	r3, #176	; 0xb0
 800149c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f001 fff7 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_GPIO_Init+0x9c>)
 80014ce:	f001 ffe9 	bl	80034a4 <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	48000400 	.word	0x48000400

080014e0 <LL_AHB2_GRP1_EnableClock>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001504:	68fb      	ldr	r3, [r7, #12]
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800151e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <MX_I2C1_Init+0x78>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_I2C1_Init+0x74>)
 800154c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001550:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_I2C1_Init+0x74>)
 800155a:	2201      	movs	r2, #1
 800155c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_I2C1_Init+0x74>)
 800157e:	f002 f921 	bl	80037c4 <HAL_I2C_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001588:	f001 f8c6 	bl	8002718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158c:	2100      	movs	r1, #0
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001590:	f003 f87c 	bl	800468c <HAL_I2CEx_ConfigAnalogFilter>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800159a:	f001 f8bd 	bl	8002718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_I2C1_Init+0x74>)
 80015a2:	f003 f8bd 	bl	8004720 <HAL_I2CEx_ConfigDigitalFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015ac:	f001 f8b4 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000270 	.word	0x20000270
 80015b8:	40005400 	.word	0x40005400

080015bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	; 0x58
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2238      	movs	r2, #56	; 0x38
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00c f99b 	bl	800d918 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_I2C_MspInit+0xb0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d13b      	bne.n	8001664 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015f4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 faf0 	bl	8005be0 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001606:	f001 f887 	bl	8002718 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ff68 	bl	80014e0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff ff65 	bl	80014e0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001628:	2304      	movs	r3, #4
 800162a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001630:	4619      	mov	r1, r3
 8001632:	480f      	ldr	r0, [pc, #60]	; (8001670 <HAL_I2C_MspInit+0xb4>)
 8001634:	f001 ff36 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163e:	2312      	movs	r3, #18
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800164a:	2304      	movs	r3, #4
 800164c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f001 ff24 	bl	80034a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001660:	f7ff ff56 	bl	8001510 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001664:	bf00      	nop
 8001666:	3758      	adds	r7, #88	; 0x58
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40005400 	.word	0x40005400
 8001670:	48000400 	.word	0x48000400

08001674 <icm20948_init>:

}

/* Main Functions */
void icm20948_init()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
		icm20948_device_reset();
 8001678:	f000 f92c 	bl	80018d4 <icm20948_device_reset>
		icm20948_i2c_master_reset();
 800167c:	f000 f95c 	bl	8001938 <icm20948_i2c_master_reset>
	while(!icm20948_who_am_i());
 8001680:	bf00      	nop
 8001682:	f000 f8e9 	bl	8001858 <icm20948_who_am_i>
 8001686:	4603      	mov	r3, r0
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f7      	bne.n	8001682 <icm20948_init+0xe>

	icm20948_wakeup();
 8001692:	f000 f931 	bl	80018f8 <icm20948_wakeup>
	printf("RESET AND AWOKEN\n\n");
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <icm20948_init+0x80>)
 8001698:	f00c f936 	bl	800d908 <puts>
	icm20948_clock_source(1);
 800169c:	2001      	movs	r0, #1
 800169e:	f000 f962 	bl	8001966 <icm20948_clock_source>
	icm20948_odr_align_enable();
 80016a2:	f000 f979 	bl	8001998 <icm20948_odr_align_enable>
	printf("CLOCK SOURCE SELECTED\n\n");
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <icm20948_init+0x84>)
 80016a8:	f00c f92e 	bl	800d908 <puts>
	icm20948_gyro_low_pass_filter(0);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 f97c 	bl	80019aa <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f996 	bl	80019e4 <icm20948_accel_low_pass_filter>
	printf("FILTERS ENABLED\n\n");
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <icm20948_init+0x88>)
 80016ba:	f00c f925 	bl	800d908 <puts>
	icm20948_gyro_sample_rate_divider(0);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f9ad 	bl	8001a1e <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 f9b9 	bl	8001a3c <icm20948_accel_sample_rate_divider>
	printf("SAMPLE RATE DIVIDERS SELECTED\n\n");
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <icm20948_init+0x8c>)
 80016cc:	f00c f91c 	bl	800d908 <puts>
	icm20948_gyro_calibration();
 80016d0:	f000 f9d2 	bl	8001a78 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 80016d4:	f000 fa72 	bl	8001bbc <icm20948_accel_calibration>
	printf("CALIBRATED\n\n");
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <icm20948_init+0x90>)
 80016da:	f00c f915 	bl	800d908 <puts>
	icm20948_gyro_full_scale_select(_2000dps);
 80016de:	2003      	movs	r0, #3
 80016e0:	f000 fb80 	bl	8001de4 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_4g);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f000 fbc7 	bl	8001e78 <icm20948_accel_full_scale_select>
	printf("INIT COMPLETE\n\n");
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <icm20948_init+0x94>)
 80016ec:	f00c f90c 	bl	800d908 <puts>


}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0801132c 	.word	0x0801132c
 80016f8:	08011340 	.word	0x08011340
 80016fc:	08011358 	.word	0x08011358
 8001700:	0801136c 	.word	0x0801136c
 8001704:	0801138c 	.word	0x0801138c
 8001708:	08011398 	.word	0x08011398

0800170c <icm20948_gyro_read>:


}

void icm20948_gyro_read(axises* data)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8001714:	2206      	movs	r2, #6
 8001716:	2133      	movs	r1, #51	; 0x33
 8001718:	2000      	movs	r0, #0
 800171a:	f000 fc71 	bl	8002000 <read_multiple_icm20948_reg>
 800171e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fad3 	bl	8000ce0 <__aeabi_i2f>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3302      	adds	r3, #2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21a      	sxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3303      	adds	r3, #3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b21b      	sxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fac2 	bl	8000ce0 <__aeabi_i2f>
 800175c:	4602      	mov	r2, r0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3304      	adds	r3, #4
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21a      	sxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3305      	adds	r3, #5
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21b      	sxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fab1 	bl	8000ce0 <__aeabi_i2f>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8001794:	2206      	movs	r2, #6
 8001796:	212d      	movs	r1, #45	; 0x2d
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fc31 	bl	8002000 <read_multiple_icm20948_reg>
 800179e:	60f8      	str	r0, [r7, #12]

    data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa93 	bl	8000ce0 <__aeabi_i2f>
 80017ba:	4602      	mov	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	601a      	str	r2, [r3, #0]
    data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3302      	adds	r3, #2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3303      	adds	r3, #3
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa82 	bl	8000ce0 <__aeabi_i2f>
 80017dc:	4602      	mov	r2, r0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
    data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3304      	adds	r3, #4
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3305      	adds	r3, #5
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa71 	bl	8000ce0 <__aeabi_i2f>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]

    data->x /= accel_scale_factor;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <icm20948_accel_read+0xc8>)
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb6e 	bl	8000ef0 <__aeabi_fdiv>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
    data->y /= accel_scale_factor;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <icm20948_accel_read+0xc8>)
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb62 	bl	8000ef0 <__aeabi_fdiv>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]
    data->z /= accel_scale_factor;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <icm20948_accel_read+0xc8>)
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fb56 	bl	8000ef0 <__aeabi_fdiv>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200002c8 	.word	0x200002c8

08001858 <icm20948_who_am_i>:
}


///* Sub Functions */
bool icm20948_who_am_i()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(ICM20948_I2C, (ICM20948_ID << 1), 10, 100);
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	220a      	movs	r2, #10
 8001862:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001866:	4815      	ldr	r0, [pc, #84]	; (80018bc <icm20948_who_am_i+0x64>)
 8001868:	f002 fb40 	bl	8003eec <HAL_I2C_IsDeviceReady>
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d103      	bne.n	800187e <icm20948_who_am_i+0x26>
	   printf("Device is ready\n\n");
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <icm20948_who_am_i+0x68>)
 8001878:	f00c f846 	bl	800d908 <puts>
 800187c:	e002      	b.n	8001884 <icm20948_who_am_i+0x2c>
	} else {
		printf("Device is NOT ready\n\n");
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <icm20948_who_am_i+0x6c>)
 8001880:	f00c f842 	bl	800d908 <puts>
	}
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f000 fb56 	bl	8001f38 <read_single_icm20948_reg>
 800188c:	4603      	mov	r3, r0
 800188e:	71bb      	strb	r3, [r7, #6]
	printf("ICM ID: %d\n",icm20948_id );
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <icm20948_who_am_i+0x70>)
 8001896:	f00b ffd1 	bl	800d83c <iprintf>
	if(icm20948_id == ICM20948_ID) {
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	2bea      	cmp	r3, #234	; 0xea
 800189e:	d104      	bne.n	80018aa <icm20948_who_am_i+0x52>
		printf("TRUE\n\n");
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <icm20948_who_am_i+0x74>)
 80018a2:	f00c f831 	bl	800d908 <puts>
		return true;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e003      	b.n	80018b2 <icm20948_who_am_i+0x5a>
	}
	else {
		printf("FALSE\n\n");
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <icm20948_who_am_i+0x78>)
 80018ac:	f00c f82c 	bl	800d908 <puts>
		return false;
 80018b0:	2300      	movs	r3, #0
	}
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000270 	.word	0x20000270
 80018c0:	080113a8 	.word	0x080113a8
 80018c4:	080113bc 	.word	0x080113bc
 80018c8:	080113d4 	.word	0x080113d4
 80018cc:	080113e0 	.word	0x080113e0
 80018d0:	080113e8 	.word	0x080113e8

080018d4 <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	printf("RESETTING \n\n");
 80018d8:	4806      	ldr	r0, [pc, #24]	; (80018f4 <icm20948_device_reset+0x20>)
 80018da:	f00c f815 	bl	800d908 <puts>
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80018de:	22c1      	movs	r2, #193	; 0xc1
 80018e0:	2106      	movs	r1, #6
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 fb60 	bl	8001fa8 <write_single_icm20948_reg>
	HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f001 fbe1 	bl	80030b0 <HAL_Delay>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	080113f0 	.word	0x080113f0

080018f8 <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	printf("WAKING UP \n\n");
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <icm20948_wakeup+0x3c>)
 8001900:	f00c f802 	bl	800d908 <puts>
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8001904:	2106      	movs	r1, #6
 8001906:	2000      	movs	r0, #0
 8001908:	f000 fb16 	bl	8001f38 <read_single_icm20948_reg>
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001916:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	461a      	mov	r2, r3
 800191c:	2106      	movs	r1, #6
 800191e:	2000      	movs	r0, #0
 8001920:	f000 fb42 	bl	8001fa8 <write_single_icm20948_reg>
	HAL_Delay(100);
 8001924:	2064      	movs	r0, #100	; 0x64
 8001926:	f001 fbc3 	bl	80030b0 <HAL_Delay>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	080113fc 	.word	0x080113fc

08001938 <icm20948_i2c_master_reset>:
}



void icm20948_i2c_master_reset()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800193e:	2103      	movs	r1, #3
 8001940:	2000      	movs	r0, #0
 8001942:	f000 faf9 	bl	8001f38 <read_single_icm20948_reg>
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	461a      	mov	r2, r3
 8001956:	2103      	movs	r1, #3
 8001958:	2000      	movs	r0, #0
 800195a:	f000 fb25 	bl	8001fa8 <write_single_icm20948_reg>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
}

void icm20948_clock_source(uint8_t source)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8001970:	2106      	movs	r1, #6
 8001972:	2000      	movs	r0, #0
 8001974:	f000 fae0 	bl	8001f38 <read_single_icm20948_reg>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4313      	orrs	r3, r2
 8001982:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	461a      	mov	r2, r3
 8001988:	2106      	movs	r1, #6
 800198a:	2000      	movs	r0, #0
 800198c:	f000 fb0c 	bl	8001fa8 <write_single_icm20948_reg>
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 800199c:	2201      	movs	r2, #1
 800199e:	2109      	movs	r1, #9
 80019a0:	2020      	movs	r0, #32
 80019a2:	f000 fb01 	bl	8001fa8 <write_single_icm20948_reg>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80019b4:	2101      	movs	r1, #1
 80019b6:	2020      	movs	r0, #32
 80019b8:	f000 fabe 	bl	8001f38 <read_single_icm20948_reg>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	b25a      	sxtb	r2, r3
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	461a      	mov	r2, r3
 80019d4:	2101      	movs	r1, #1
 80019d6:	2020      	movs	r0, #32
 80019d8:	f000 fae6 	bl	8001fa8 <write_single_icm20948_reg>
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80019ee:	2114      	movs	r1, #20
 80019f0:	2020      	movs	r0, #32
 80019f2:	f000 faa1 	bl	8001f38 <read_single_icm20948_reg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2020      	movs	r0, #32
 8001a12:	f000 fac9 	bl	8001fa8 <write_single_icm20948_reg>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2020      	movs	r0, #32
 8001a30:	f000 faba 	bl	8001fa8 <write_single_icm20948_reg>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	2020      	movs	r0, #32
 8001a60:	f000 faa2 	bl	8001fa8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	461a      	mov	r2, r3
 8001a68:	2111      	movs	r1, #17
 8001a6a:	2020      	movs	r0, #32
 8001a6c:	f000 fa9c 	bl	8001fa8 <write_single_icm20948_reg>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <icm20948_gyro_calibration>:
	write_single_ak09916_reg(MAG_CNTL2, mode);
	HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	e037      	b.n	8001b08 <icm20948_gyro_calibration+0x90>
	{
		icm20948_gyro_read(&temp);
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fe35 	bl	800170c <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f91b 	bl	8000ce0 <__aeabi_i2f>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7ff f861 	bl	8000b78 <__addsf3>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fab5 	bl	8001028 <__aeabi_f2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f90b 	bl	8000ce0 <__aeabi_i2f>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f7ff f851 	bl	8000b78 <__addsf3>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff faa5 	bl	8001028 <__aeabi_f2iz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f8fb 	bl	8000ce0 <__aeabi_i2f>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff f841 	bl	8000b78 <__addsf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fa95 	bl	8001028 <__aeabi_f2iz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	3301      	adds	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	2b63      	cmp	r3, #99	; 0x63
 8001b0c:	ddc4      	ble.n	8001a98 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <icm20948_gyro_calibration+0x140>)
 8001b12:	fb82 1203 	smull	r1, r2, r2, r3
 8001b16:	1152      	asrs	r2, r2, #5
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <icm20948_gyro_calibration+0x140>)
 8001b22:	fb82 1203 	smull	r1, r2, r2, r3
 8001b26:	1152      	asrs	r2, r2, #5
 8001b28:	17db      	asrs	r3, r3, #31
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <icm20948_gyro_calibration+0x140>)
 8001b32:	fb82 1203 	smull	r1, r2, r2, r3
 8001b36:	1152      	asrs	r2, r2, #5
 8001b38:	17db      	asrs	r3, r3, #31
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	425b      	negs	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da00      	bge.n	8001b48 <icm20948_gyro_calibration+0xd0>
 8001b46:	3303      	adds	r3, #3
 8001b48:	109b      	asrs	r3, r3, #2
 8001b4a:	121b      	asrs	r3, r3, #8
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	425b      	negs	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da00      	bge.n	8001b5a <icm20948_gyro_calibration+0xe2>
 8001b58:	3303      	adds	r3, #3
 8001b5a:	109b      	asrs	r3, r3, #2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	425b      	negs	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	da00      	bge.n	8001b6a <icm20948_gyro_calibration+0xf2>
 8001b68:	3303      	adds	r3, #3
 8001b6a:	109b      	asrs	r3, r3, #2
 8001b6c:	121b      	asrs	r3, r3, #8
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	425b      	negs	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da00      	bge.n	8001b7c <icm20948_gyro_calibration+0x104>
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	109b      	asrs	r3, r3, #2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	425b      	negs	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da00      	bge.n	8001b8c <icm20948_gyro_calibration+0x114>
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	109b      	asrs	r3, r3, #2
 8001b8e:	121b      	asrs	r3, r3, #8
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	425b      	negs	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da00      	bge.n	8001b9e <icm20948_gyro_calibration+0x126>
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	109b      	asrs	r3, r3, #2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001ba4:	1d3a      	adds	r2, r7, #4
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	2103      	movs	r1, #3
 8001baa:	2020      	movs	r0, #32
 8001bac:	f000 fa5a 	bl	8002064 <write_multiple_icm20948_reg>
}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	51eb851f 	.word	0x51eb851f

08001bbc <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b090      	sub	sp, #64	; 0x40
 8001bc0:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	2300      	movs	r3, #0
 8001be0:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be6:	e037      	b.n	8001c58 <icm20948_accel_calibration+0x9c>
	{
		icm20948_accel_read(&temp);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fdcd 	bl	800178c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f873 	bl	8000ce0 <__aeabi_i2f>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f7fe ffb9 	bl	8000b78 <__addsf3>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fa0d 	bl	8001028 <__aeabi_f2iz>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f863 	bl	8000ce0 <__aeabi_i2f>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7fe ffa9 	bl	8000b78 <__addsf3>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f9fd 	bl	8001028 <__aeabi_f2iz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f853 	bl	8000ce0 <__aeabi_i2f>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7fe ff99 	bl	8000b78 <__addsf3>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f9ed 	bl	8001028 <__aeabi_f2iz>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8001c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c54:	3301      	adds	r3, #1
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5a:	2b63      	cmp	r3, #99	; 0x63
 8001c5c:	ddc4      	ble.n	8001be8 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4a5e      	ldr	r2, [pc, #376]	; (8001ddc <icm20948_accel_calibration+0x220>)
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	1152      	asrs	r2, r2, #5
 8001c68:	17db      	asrs	r3, r3, #31
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <icm20948_accel_calibration+0x220>)
 8001c72:	fb82 1203 	smull	r1, r2, r2, r3
 8001c76:	1152      	asrs	r2, r2, #5
 8001c78:	17db      	asrs	r3, r3, #31
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <icm20948_accel_calibration+0x220>)
 8001c82:	fb82 1203 	smull	r1, r2, r2, r3
 8001c86:	1152      	asrs	r2, r2, #5
 8001c88:	17db      	asrs	r3, r3, #31
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 8001c8e:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <icm20948_accel_calibration+0x224>)
 8001c90:	463b      	mov	r3, r7
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4611      	mov	r1, r2
 8001c96:	8019      	strh	r1, [r3, #0]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	0c12      	lsrs	r2, r2, #16
 8001c9c:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	2114      	movs	r1, #20
 8001ca2:	2010      	movs	r0, #16
 8001ca4:	f000 f9ac 	bl	8002000 <read_multiple_icm20948_reg>
 8001ca8:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cb2:	3201      	adds	r2, #1
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 8001cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001cc8:	2202      	movs	r2, #2
 8001cca:	2117      	movs	r1, #23
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f000 f997 	bl	8002000 <read_multiple_icm20948_reg>
 8001cd2:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cdc:	3201      	adds	r2, #1
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	211a      	movs	r1, #26
 8001cf6:	2010      	movs	r0, #16
 8001cf8:	f000 f982 	bl	8002000 <read_multiple_icm20948_reg>
 8001cfc:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d06:	3201      	adds	r2, #1
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	3301      	adds	r3, #1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da00      	bge.n	8001d26 <icm20948_accel_calibration+0x16a>
 8001d24:	3307      	adds	r3, #7
 8001d26:	10db      	asrs	r3, r3, #3
 8001d28:	425b      	negs	r3, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <icm20948_accel_calibration+0x17c>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	da00      	bge.n	8001d4a <icm20948_accel_calibration+0x18e>
 8001d48:	3307      	adds	r3, #7
 8001d4a:	10db      	asrs	r3, r3, #3
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	121b      	asrs	r3, r3, #8
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001d66:	797a      	ldrb	r2, [r7, #5]
 8001d68:	783b      	ldrb	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	121b      	asrs	r3, r3, #8
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	787b      	ldrb	r3, [r7, #1]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	121b      	asrs	r3, r3, #8
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001da2:	7a7a      	ldrb	r2, [r7, #9]
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001dac:	1d3a      	adds	r2, r7, #4
 8001dae:	2302      	movs	r3, #2
 8001db0:	2114      	movs	r1, #20
 8001db2:	2010      	movs	r0, #16
 8001db4:	f000 f956 	bl	8002064 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	1c9a      	adds	r2, r3, #2
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	2117      	movs	r1, #23
 8001dc0:	2010      	movs	r0, #16
 8001dc2:	f000 f94f 	bl	8002064 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	2302      	movs	r3, #2
 8001dcc:	211a      	movs	r1, #26
 8001dce:	2010      	movs	r0, #16
 8001dd0:	f000 f948 	bl	8002064 <write_multiple_icm20948_reg>
}
 8001dd4:	bf00      	nop
 8001dd6:	3740      	adds	r7, #64	; 0x40
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	51eb851f 	.word	0x51eb851f
 8001de0:	08011408 	.word	0x08011408

08001de4 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001dee:	2101      	movs	r1, #1
 8001df0:	2020      	movs	r0, #32
 8001df2:	f000 f8a1 	bl	8001f38 <read_single_icm20948_reg>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d827      	bhi.n	8001e50 <icm20948_gyro_full_scale_select+0x6c>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <icm20948_gyro_full_scale_select+0x24>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e31 	.word	0x08001e31
 8001e14:	08001e41 	.word	0x08001e41
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <icm20948_gyro_full_scale_select+0x80>)
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <icm20948_gyro_full_scale_select+0x84>)
 8001e1c:	601a      	str	r2, [r3, #0]
			break;
 8001e1e:	e017      	b.n	8001e50 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <icm20948_gyro_full_scale_select+0x80>)
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <icm20948_gyro_full_scale_select+0x88>)
 8001e2c:	601a      	str	r2, [r3, #0]
			break;
 8001e2e:	e00f      	b.n	8001e50 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <icm20948_gyro_full_scale_select+0x80>)
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <icm20948_gyro_full_scale_select+0x8c>)
 8001e3c:	601a      	str	r2, [r3, #0]
			break;
 8001e3e:	e007      	b.n	8001e50 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	f043 0306 	orr.w	r3, r3, #6
 8001e46:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <icm20948_gyro_full_scale_select+0x80>)
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <icm20948_gyro_full_scale_select+0x90>)
 8001e4c:	601a      	str	r2, [r3, #0]
			break;
 8001e4e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	461a      	mov	r2, r3
 8001e54:	2101      	movs	r1, #1
 8001e56:	2020      	movs	r0, #32
 8001e58:	f000 f8a6 	bl	8001fa8 <write_single_icm20948_reg>
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200002c4 	.word	0x200002c4
 8001e68:	43030000 	.word	0x43030000
 8001e6c:	42830000 	.word	0x42830000
 8001e70:	42033333 	.word	0x42033333
 8001e74:	41833333 	.word	0x41833333

08001e78 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001e82:	2114      	movs	r1, #20
 8001e84:	2020      	movs	r0, #32
 8001e86:	f000 f857 	bl	8001f38 <read_single_icm20948_reg>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d82b      	bhi.n	8001eec <icm20948_accel_full_scale_select+0x74>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <icm20948_accel_full_scale_select+0x24>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001eb7 	.word	0x08001eb7
 8001ea4:	08001ec9 	.word	0x08001ec9
 8001ea8:	08001edb 	.word	0x08001edb
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <icm20948_accel_full_scale_select+0x88>)
 8001eae:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001eb2:	601a      	str	r2, [r3, #0]
			break;
 8001eb4:	e01a      	b.n	8001eec <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <icm20948_accel_full_scale_select+0x88>)
 8001ec0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001ec4:	601a      	str	r2, [r3, #0]
			break;
 8001ec6:	e011      	b.n	8001eec <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <icm20948_accel_full_scale_select+0x88>)
 8001ed2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001ed6:	601a      	str	r2, [r3, #0]
			break;
 8001ed8:	e008      	b.n	8001eec <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	f043 0306 	orr.w	r3, r3, #6
 8001ee0:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <icm20948_accel_full_scale_select+0x88>)
 8001ee4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001ee8:	601a      	str	r2, [r3, #0]
			break;
 8001eea:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2114      	movs	r1, #20
 8001ef2:	2020      	movs	r0, #32
 8001ef4:	f000 f858 	bl	8001fa8 <write_single_icm20948_reg>
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200002c8 	.word	0x200002c8

08001f04 <select_user_bank>:


static void select_user_bank(userbank ub)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001f0e:	237f      	movs	r3, #127	; 0x7f
 8001f10:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	737b      	strb	r3, [r7, #13]
	uint16_t devaddress = ICM_I2C_ADDRESS << 1;
 8001f16:	23d2      	movs	r3, #210	; 0xd2
 8001f18:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, write_reg, 2, 10);
 8001f1a:	f107 020c 	add.w	r2, r7, #12
 8001f1e:	89f9      	ldrh	r1, [r7, #14]
 8001f20:	230a      	movs	r3, #10
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2302      	movs	r3, #2
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <select_user_bank+0x30>)
 8001f28:	f001 fcdc 	bl	80038e4 <HAL_I2C_Master_Transmit>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000270 	.word	0x20000270

08001f38 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	4603      	mov	r3, r0
 8001f40:	460a      	mov	r2, r1
 8001f42:	71fb      	strb	r3, [r7, #7]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001f48:	79bb      	ldrb	r3, [r7, #6]
 8001f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f4e:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	uint16_t devaddress = ICM_I2C_ADDRESS << 1;
 8001f50:	23d2      	movs	r3, #210	; 0xd2
 8001f52:	81bb      	strh	r3, [r7, #12]
	select_user_bank(ub);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ffd4 	bl	8001f04 <select_user_bank>
	 //h12c, devaddress, pointer to data buffer, amount of data to be sent, timeout duration
//	HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, &read_reg, 1, 1000);
//	HAL_I2C_Master_Receive(ICM20948_I2C, devaddress, &reg_val, 1, 1000);
//	printf("REG VAL: %d\n\n", reg_val );

	 HAL_StatusTypeDef status = HAL_I2C_Mem_Read(ICM20948_I2C, devaddress, reg, I2C_MEMADD_SIZE_8BIT, &reg_val, 1, 1000);
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	89b9      	ldrh	r1, [r7, #12]
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	f107 030a 	add.w	r3, r7, #10
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	480a      	ldr	r0, [pc, #40]	; (8001fa0 <read_single_icm20948_reg+0x68>)
 8001f76:	f001 fe9f 	bl	8003cb8 <HAL_I2C_Mem_Read>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	72fb      	strb	r3, [r7, #11]

	    if (status != HAL_OK) {
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <read_single_icm20948_reg+0x5c>
	        // Handle error, for example, by printing an error message or setting an error flag
	        printf("I2C Error: %ld\n", HAL_I2C_GetError(ICM20948_I2C));
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <read_single_icm20948_reg+0x68>)
 8001f86:	f002 f8b8 	bl	80040fa <HAL_I2C_GetError>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <read_single_icm20948_reg+0x6c>)
 8001f90:	f00b fc54 	bl	800d83c <iprintf>

	    }

//	printf("RIGHT HERE IN READ SINGLE");
	return reg_val;
 8001f94:	7abb      	ldrb	r3, [r7, #10]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000270 	.word	0x20000270
 8001fa4:	0801140c 	.word	0x0801140c

08001fa8 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	71bb      	strb	r3, [r7, #6]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	uint16_t devaddress = ICM_I2C_ADDRESS << 1;
 8001fba:	23d2      	movs	r3, #210	; 0xd2
 8001fbc:	81fb      	strh	r3, [r7, #14]
//	write_reg[0] = WRITE | reg;
//	write_reg[1] = val;

	select_user_bank(ub);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff9f 	bl	8001f04 <select_user_bank>

	write_reg[0] = reg;
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8001fca:	797b      	ldrb	r3, [r7, #5]
 8001fcc:	737b      	strb	r3, [r7, #13]


	if (HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, write_reg, 2, 1000) != HAL_OK)
 8001fce:	f107 020c 	add.w	r2, r7, #12
 8001fd2:	89f9      	ldrh	r1, [r7, #14]
 8001fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2302      	movs	r3, #2
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <write_single_icm20948_reg+0x50>)
 8001fde:	f001 fc81 	bl	80038e4 <HAL_I2C_Master_Transmit>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <write_single_icm20948_reg+0x46>
	{
		printf("NOT K\n\n");
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <write_single_icm20948_reg+0x54>)
 8001fea:	f00b fc8d 	bl	800d908 <puts>

	}

}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000270 	.word	0x20000270
 8001ffc:	0801141c 	.word	0x0801141c

08002000 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	460b      	mov	r3, r1
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	4613      	mov	r3, r2
 8002010:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002018:	b2db      	uxtb	r3, r3
 800201a:	737b      	strb	r3, [r7, #13]
	static uint8_t reg_val[6];
	uint16_t devaddress = ICM_I2C_ADDRESS << 1;
 800201c:	23d2      	movs	r3, #210	; 0xd2
 800201e:	81fb      	strh	r3, [r7, #14]

	select_user_bank(ub);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff6e 	bl	8001f04 <select_user_bank>

	HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, &read_reg, 1, 1000);
 8002028:	f107 020d 	add.w	r2, r7, #13
 800202c:	89f9      	ldrh	r1, [r7, #14]
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <read_multiple_icm20948_reg+0x5c>)
 8002038:	f001 fc54 	bl	80038e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ICM20948_I2C, devaddress, reg_val, len, 1000);
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	b29b      	uxth	r3, r3
 8002040:	89f9      	ldrh	r1, [r7, #14]
 8002042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <read_multiple_icm20948_reg+0x60>)
 800204a:	4804      	ldr	r0, [pc, #16]	; (800205c <read_multiple_icm20948_reg+0x5c>)
 800204c:	f001 fd3e 	bl	8003acc <HAL_I2C_Master_Receive>

	return reg_val;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <read_multiple_icm20948_reg+0x60>)
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000270 	.word	0x20000270
 8002060:	200002cc 	.word	0x200002cc

08002064 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af02      	add	r7, sp, #8
 800206a:	603a      	str	r2, [r7, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	460b      	mov	r3, r1
 8002074:	71bb      	strb	r3, [r7, #6]
 8002076:	4613      	mov	r3, r2
 8002078:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	737b      	strb	r3, [r7, #13]
	uint16_t devaddress = ICM_I2C_ADDRESS << 1;
 800207e:	23d2      	movs	r3, #210	; 0xd2
 8002080:	81fb      	strh	r3, [r7, #14]

	select_user_bank(ub);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff3d 	bl	8001f04 <select_user_bank>

	HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, &write_reg, 1, 1000);
 800208a:	f107 020d 	add.w	r2, r7, #13
 800208e:	89f9      	ldrh	r1, [r7, #14]
 8002090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	4808      	ldr	r0, [pc, #32]	; (80020bc <write_multiple_icm20948_reg+0x58>)
 800209a:	f001 fc23 	bl	80038e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, val, len, 1000);
 800209e:	797b      	ldrb	r3, [r7, #5]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	89f9      	ldrh	r1, [r7, #14]
 80020a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020a8:	9200      	str	r2, [sp, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <write_multiple_icm20948_reg+0x58>)
 80020ae:	f001 fc19 	bl	80038e4 <HAL_I2C_Master_Transmit>
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000270 	.word	0x20000270

080020c0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f023 0218 	bic.w	r2, r3, #24
 80020d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <adjustTimeToPST>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void adjustTimeToPST(struct tm *time_tm, bool isDST) {
 80020ea:	b5b0      	push	{r4, r5, r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
    int offset = isDST ? -7 : -8;  // PDT during DST, PST otherwise
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <adjustTimeToPST+0x18>
 80020fc:	f06f 0306 	mvn.w	r3, #6
 8002100:	e001      	b.n	8002106 <adjustTimeToPST+0x1c>
 8002102:	f06f 0307 	mvn.w	r3, #7
 8002106:	617b      	str	r3, [r7, #20]
    time_tm->tm_hour += offset;  // Adjust hours based on whether DST is in effect
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	441a      	add	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]

    // Normalize the tm structure
    time_t temp = mktime(time_tm);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f00b fdef 	bl	800dcf8 <mktime>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    *time_tm = *localtime(&temp);
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	4618      	mov	r0, r3
 8002128:	f00b fbfe 	bl	800d928 <localtime>
 800212c:	4602      	mov	r2, r0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	461c      	mov	r4, r3
 8002132:	4615      	mov	r5, r2
 8002134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	6023      	str	r3, [r4, #0]
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bdb0      	pop	{r4, r5, r7, pc}

08002148 <updateDataAndWriteToSD>:

void updateDataAndWriteToSD(void) {
 8002148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800214c:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 8002150:	af0c      	add	r7, sp, #48	; 0x30
    char readBuf[62];  // Increased buffer size to accommodate date-time and sensor data

    // Fetch current time from RTC
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	2201      	movs	r2, #1
 8002158:	4619      	mov	r1, r3
 800215a:	488b      	ldr	r0, [pc, #556]	; (8002388 <updateDataAndWriteToSD+0x240>)
 800215c:	f003 ff78 	bl	8006050 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);  // This line must be after GetTime
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	2201      	movs	r2, #1
 8002166:	4619      	mov	r1, r3
 8002168:	4887      	ldr	r0, [pc, #540]	; (8002388 <updateDataAndWriteToSD+0x240>)
 800216a:	f004 f859 	bl	8006220 <HAL_RTC_GetDate>

    // Open or create the file for writing
    fres = f_open(&fil, "data.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_OPEN_APPEND);
 800216e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002172:	2232      	movs	r2, #50	; 0x32
 8002174:	4985      	ldr	r1, [pc, #532]	; (800238c <updateDataAndWriteToSD+0x244>)
 8002176:	4618      	mov	r0, r3
 8002178:	f00a f95c 	bl	800c434 <f_open>
 800217c:	4603      	mov	r3, r0
 800217e:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
    if (fres == FR_OK) {
 8002182:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 80cb 	bne.w	8002322 <updateDataAndWriteToSD+0x1da>

        // Read accelerometer data
        icm20948_accel_read(&data);
 800218c:	4880      	ldr	r0, [pc, #512]	; (8002390 <updateDataAndWriteToSD+0x248>)
 800218e:	f7ff fafd 	bl	800178c <icm20948_accel_read>

        // Convert BCD to binary
        uint8_t hour = (sTime.Hours & 0xF) + ((sTime.Hours >> 4) * 10);
 8002192:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002196:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80021a6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	0089      	lsls	r1, r1, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
        uint8_t min = (sTime.Minutes & 0xF) + ((sTime.Minutes >> 4) * 10);
 80021c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80021c4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80021d4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	0089      	lsls	r1, r1, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
        uint8_t sec = (sTime.Seconds & 0xF) + ((sTime.Seconds >> 4) * 10);
 80021ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80021f2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002202:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002206:	789b      	ldrb	r3, [r3, #2]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	0089      	lsls	r1, r1, #2
 8002210:	440b      	add	r3, r1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
        uint8_t year = (sDate.Year & 0xF) + ((sDate.Year >> 4) * 10);
 800221c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002220:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002224:	78db      	ldrb	r3, [r3, #3]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	b2da      	uxtb	r2, r3
 800222c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002230:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	0089      	lsls	r1, r1, #2
 800223e:	440b      	add	r3, r1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4413      	add	r3, r2
 8002246:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
        uint8_t month = (sDate.Month & 0xF) + ((sDate.Month >> 4) * 10);
 800224a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800224e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	b2da      	uxtb	r2, r3
 800225a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800225e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	0089      	lsls	r1, r1, #2
 800226c:	440b      	add	r3, r1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4413      	add	r3, r2
 8002274:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
        uint8_t date = (sDate.Date & 0xF) + ((sDate.Date >> 4) * 10);
 8002278:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800227c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	b2da      	uxtb	r2, r3
 8002288:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800228c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002290:	789b      	ldrb	r3, [r3, #2]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	0089      	lsls	r1, r1, #2
 800229a:	440b      	add	r3, r1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	f887 32a1 	strb.w	r3, [r7, #673]	; 0x2a1

        // Format date, time, and accelerometer data into a string
        snprintf(readBuf, sizeof(readBuf), "%04d-%02d-%02d %02d:%02d:%02d - X: %f, Y: %f, Z: %f\r\n",
 80022a6:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80022aa:	f503 6afa 	add.w	sl, r3, #2000	; 0x7d0
 80022ae:	f897 62a2 	ldrb.w	r6, [r7, #674]	; 0x2a2
 80022b2:	f897 32a1 	ldrb.w	r3, [r7, #673]	; 0x2a1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	f897 22a6 	ldrb.w	r2, [r7, #678]	; 0x2a6
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	f897 12a5 	ldrb.w	r1, [r7, #677]	; 0x2a5
 80022c2:	6079      	str	r1, [r7, #4]
 80022c4:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
 80022c8:	6038      	str	r0, [r7, #0]
                 year + 2000, month, date,
                 hour, min, sec,
                 data.x, data.y, data.z);
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <updateDataAndWriteToSD+0x248>)
 80022cc:	681b      	ldr	r3, [r3, #0]
        snprintf(readBuf, sizeof(readBuf), "%04d-%02d-%02d %02d:%02d:%02d - X: %f, Y: %f, Z: %f\r\n",
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f91c 	bl	800050c <__aeabi_f2d>
 80022d4:	4604      	mov	r4, r0
 80022d6:	460d      	mov	r5, r1
                 data.x, data.y, data.z);
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <updateDataAndWriteToSD+0x248>)
 80022da:	685b      	ldr	r3, [r3, #4]
        snprintf(readBuf, sizeof(readBuf), "%04d-%02d-%02d %02d:%02d:%02d - X: %f, Y: %f, Z: %f\r\n",
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f915 	bl	800050c <__aeabi_f2d>
 80022e2:	4680      	mov	r8, r0
 80022e4:	4689      	mov	r9, r1
                 data.x, data.y, data.z);
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <updateDataAndWriteToSD+0x248>)
 80022e8:	689b      	ldr	r3, [r3, #8]
        snprintf(readBuf, sizeof(readBuf), "%04d-%02d-%02d %02d:%02d:%02d - X: %f, Y: %f, Z: %f\r\n",
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f90e 	bl	800050c <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80022f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80022fc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002300:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002304:	683c      	ldr	r4, [r7, #0]
 8002306:	9404      	str	r4, [sp, #16]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	9103      	str	r1, [sp, #12]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	9202      	str	r2, [sp, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	9600      	str	r6, [sp, #0]
 8002316:	4653      	mov	r3, sl
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <updateDataAndWriteToSD+0x24c>)
 800231a:	213e      	movs	r1, #62	; 0x3e
 800231c:	f00b f91a 	bl	800d554 <sniprintf>
 8002320:	e003      	b.n	800232a <updateDataAndWriteToSD+0x1e2>
    }
    else
    {
    	status = -1;
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <updateDataAndWriteToSD+0x250>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002328:	601a      	str	r2, [r3, #0]
    }

        // Write the formatted string to the file
        UINT bytesWrote;
        fres = f_write(&fil, readBuf, strlen(readBuf), &bytesWrote);
 800232a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800232e:	4618      	mov	r0, r3
 8002330:	f7fd ff76 	bl	8000220 <strlen>
 8002334:	4602      	mov	r2, r0
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800233e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002342:	f00a fa35 	bl	800c7b0 <f_write>
 8002346:	4603      	mov	r3, r0
 8002348:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
        if (fres == FR_OK) {
 800234c:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <updateDataAndWriteToSD+0x220>

            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002358:	4810      	ldr	r0, [pc, #64]	; (800239c <updateDataAndWriteToSD+0x254>)
 800235a:	f001 fa1a 	bl	8003792 <HAL_GPIO_TogglePin>
            HAL_Delay(500);
 800235e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002362:	f000 fea5 	bl	80030b0 <HAL_Delay>
 8002366:	e003      	b.n	8002370 <updateDataAndWriteToSD+0x228>
        }
        else
        {
        	status = -1;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <updateDataAndWriteToSD+0x250>)
 800236a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800236e:	601a      	str	r2, [r3, #0]
        }

        // Close the file
        f_close(&fil);
 8002370:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002374:	4618      	mov	r0, r3
 8002376:	f00a fc0e 	bl	800cb96 <f_close>
}
 800237a:	bf00      	nop
 800237c:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002386:	bf00      	nop
 8002388:	200002f0 	.word	0x200002f0
 800238c:	08011424 	.word	0x08011424
 8002390:	200002e4 	.word	0x200002e4
 8002394:	08011430 	.word	0x08011430
 8002398:	200002e0 	.word	0x200002e0
 800239c:	48000400 	.word	0x48000400

080023a0 <BinToBCD>:

// Definition of the binary to BCD conversion function
uint8_t BinToBCD(uint8_t bin) {
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
    return ((bin / 10) << 4) | (bin % 10);
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <BinToBCD+0x44>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	b258      	sxtb	r0, r3
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <BinToBCD+0x44>)
 80023be:	fba3 1302 	umull	r1, r3, r3, r2
 80023c2:	08d9      	lsrs	r1, r3, #3
 80023c4:	460b      	mov	r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	4303      	orrs	r3, r0
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	cccccccd 	.word	0xcccccccd

080023e8 <updateRTCFromBuffer>:


void updateRTCFromBuffer(uint8_t *rx_buff) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b090      	sub	sp, #64	; 0x40
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    char strTimestamp[13];
    memcpy(strTimestamp, rx_buff, 12);  // Assume rx_buff has at least 12 bytes
 80023f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f4:	220c      	movs	r2, #12
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f00c f92c 	bl	800e656 <memcpy>
    strTimestamp[12] = '\0';
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    uint32_t epochTime = strtoul(strTimestamp, NULL, 10);
 8002404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002408:	220a      	movs	r2, #10
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f00b f9ed 	bl	800d7ec <strtoul>
 8002412:	63f8      	str	r0, [r7, #60]	; 0x3c
    time_t now = epochTime;
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	2200      	movs	r2, #0
 8002418:	461c      	mov	r4, r3
 800241a:	4615      	mov	r5, r2
 800241c:	e9c7 4508 	strd	r4, r5, [r7, #32]
    struct tm *time_tm = localtime(&now);
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4618      	mov	r0, r3
 8002426:	f00b fa7f 	bl	800d928 <localtime>
 800242a:	63b8      	str	r0, [r7, #56]	; 0x38
    bool dst_active = time_tm->tm_isdst > 0;  // Check if DST is currently active
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	2b00      	cmp	r3, #0
 8002432:	bfcc      	ite	gt
 8002434:	2301      	movgt	r3, #1
 8002436:	2300      	movle	r3, #0
 8002438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    adjustTimeToPST(time_tm, dst_active);
 800243c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002440:	4619      	mov	r1, r3
 8002442:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002444:	f7ff fe51 	bl	80020ea <adjustTimeToPST>

    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    // Disable write protection
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <updateRTCFromBuffer+0x144>)
 800244a:	22ca      	movs	r2, #202	; 0xca
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <updateRTCFromBuffer+0x144>)
 8002450:	2253      	movs	r2, #83	; 0x53
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

    // Clear RSF flag
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_RSF);
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <updateRTCFromBuffer+0x144>)
 8002456:	f240 1205 	movw	r2, #261	; 0x105
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c

    // Set time
    sTime.Hours = BinToBCD(time_tm->tm_hour);
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff9c 	bl	80023a0 <BinToBCD>
 8002468:	4603      	mov	r3, r0
 800246a:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = BinToBCD(time_tm->tm_min);
 800246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff94 	bl	80023a0 <BinToBCD>
 8002478:	4603      	mov	r3, r0
 800247a:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = BinToBCD(time_tm->tm_sec);
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff8c 	bl	80023a0 <BinToBCD>
 8002488:	4603      	mov	r3, r0
 800248a:	73bb      	strb	r3, [r7, #14]
    sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	2201      	movs	r2, #1
 8002496:	4619      	mov	r1, r3
 8002498:	4825      	ldr	r0, [pc, #148]	; (8002530 <updateRTCFromBuffer+0x148>)
 800249a:	f003 fd3d 	bl	8005f18 <HAL_RTC_SetTime>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <updateRTCFromBuffer+0xc4>
    	status = -1;
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <updateRTCFromBuffer+0x14c>)
 80024a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024aa:	601a      	str	r2, [r3, #0]
        // Error handling
    }

    // Set date
    sDate.WeekDay = BinToBCD(time_tm->tm_wday ? time_tm->tm_wday : 7);
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <updateRTCFromBuffer+0xd4>
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e000      	b.n	80024be <updateRTCFromBuffer+0xd6>
 80024bc:	2307      	movs	r3, #7
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff6e 	bl	80023a0 <BinToBCD>
 80024c4:	4603      	mov	r3, r0
 80024c6:	723b      	strb	r3, [r7, #8]
    sDate.Month = BinToBCD(time_tm->tm_mon + 1);
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff64 	bl	80023a0 <BinToBCD>
 80024d8:	4603      	mov	r3, r0
 80024da:	727b      	strb	r3, [r7, #9]
    sDate.Date = BinToBCD(time_tm->tm_mday);
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff5c 	bl	80023a0 <BinToBCD>
 80024e8:	4603      	mov	r3, r0
 80024ea:	72bb      	strb	r3, [r7, #10]
    sDate.Year = BinToBCD((time_tm->tm_year + 1900) - 2000);
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3b64      	subs	r3, #100	; 0x64
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff52 	bl	80023a0 <BinToBCD>
 80024fc:	4603      	mov	r3, r0
 80024fe:	72fb      	strb	r3, [r7, #11]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	4809      	ldr	r0, [pc, #36]	; (8002530 <updateRTCFromBuffer+0x148>)
 800250a:	f003 fe03 	bl	8006114 <HAL_RTC_SetDate>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <updateRTCFromBuffer+0x134>
        // Error handling
    	status = -1;
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <updateRTCFromBuffer+0x14c>)
 8002516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800251a:	601a      	str	r2, [r3, #0]
//    while(__HAL_RTC_GET_FLAG(&hrtc, RTC_FLAG_RSF) == RESET) {
//        // This loop will wait until the RSF flag is set
//    }

    // Enable write protection
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <updateRTCFromBuffer+0x144>)
 800251e:	22ff      	movs	r2, #255	; 0xff
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

    // Synchronize RTC
//    HAL_RTC_WaitForSynchro(&hrtc);
}
 8002522:	bf00      	nop
 8002524:	3740      	adds	r7, #64	; 0x40
 8002526:	46bd      	mov	sp, r7
 8002528:	bdb0      	pop	{r4, r5, r7, pc}
 800252a:	bf00      	nop
 800252c:	40002800 	.word	0x40002800
 8002530:	200002f0 	.word	0x200002f0
 8002534:	200002e0 	.word	0x200002e0

08002538 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_UART_RxCpltCallback+0x28>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d105      	bne.n	8002556 <HAL_UART_RxCpltCallback+0x1e>
	        // Assuming that a complete timestamp is always exactly 16 bytes
//	        HAL_UART_Receive_IT(&huart1, rx_buff, 12); // Re-enable UART receive interrupt
	        status = 1;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_UART_RxCpltCallback+0x2c>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]
	        // Now process the buffer to update RTC
	        updateRTCFromBuffer(rx_buff);
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_UART_RxCpltCallback+0x30>)
 8002552:	f7ff ff49 	bl	80023e8 <updateRTCFromBuffer>
	    }
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40013800 	.word	0x40013800
 8002564:	200002e0 	.word	0x200002e0
 8002568:	200002d4 	.word	0x200002d4

0800256c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002574:	f000 fd26 	bl	8002fc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002578:	f000 f876 	bl	8002668 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_ResumeTick();
 800257c:	f000 fdbc 	bl	80030f8 <HAL_ResumeTick>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002580:	f7fe ff5e 	bl	8001440 <MX_GPIO_Init>
  MX_FATFS_Init();
 8002584:	f007 fc8e 	bl	8009ea4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8002588:	f000 f980 	bl	800288c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800258c:	f000 fc56 	bl	8002e3c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002590:	f000 f8f0 	bl	8002774 <MX_RTC_Init>
  MX_TIM1_Init();
 8002594:	f000 fb30 	bl	8002bf8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002598:	f7fe ffd2 	bl	8001540 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(SD_DAT_2_GPIO_Port, SD_DAT_2_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f001 f8de 	bl	8003764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_DAT_1_GPIO_Port, SD_DAT_1_Pin, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2110      	movs	r1, #16
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b0:	f001 f8d8 	bl	8003764 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2101      	movs	r1, #1
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025bc:	f001 f8d2 	bl	8003764 <HAL_GPIO_WritePin>

  icm20948_init();
 80025c0:	f7ff f858 	bl	8001674 <icm20948_init>
	HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);  // toggle LED
 80025c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c8:	4822      	ldr	r0, [pc, #136]	; (8002654 <main+0xe8>)
 80025ca:	f001 f8e2 	bl	8003792 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80025ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d2:	f000 fd6d 	bl	80030b0 <HAL_Delay>
	//some variables for FatFs
	FATFS FatFs; 	//Fatfs handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80025d6:	463b      	mov	r3, r7
 80025d8:	2201      	movs	r2, #1
 80025da:	491f      	ldr	r1, [pc, #124]	; (8002658 <main+0xec>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f009 fee3 	bl	800c3a8 <f_mount>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (fres != FR_OK) {
 80025e8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <main+0x96>
//	printf("f_mount error (%i)\r\n", fres);
	}

	else
	{
    	HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);  // toggle LED
 80025f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f4:	4817      	ldr	r0, [pc, #92]	; (8002654 <main+0xe8>)
 80025f6:	f001 f8cc 	bl	8003792 <HAL_GPIO_TogglePin>
    	HAL_Delay(1000);
 80025fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025fe:	f000 fd57 	bl	80030b0 <HAL_Delay>
//    	printf("Success MOuint\n");
	}
	HAL_UART_Receive_IT(&huart1, rx_buff, RX_BUFFER_SIZE);
 8002602:	220a      	movs	r2, #10
 8002604:	4915      	ldr	r1, [pc, #84]	; (800265c <main+0xf0>)
 8002606:	4816      	ldr	r0, [pc, #88]	; (8002660 <main+0xf4>)
 8002608:	f005 fc94 	bl	8007f34 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 while (1)
 {
	 int isToggledOn = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

	 if (status == 1)
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <main+0xf8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d109      	bne.n	800262e <main+0xc2>
	 {
		 if (isToggledOn == 1)
 800261a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <main+0xbc>
		 {
			 isToggledOn = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		 }
		 updateDataAndWriteToSD();
 8002628:	f7ff fd8e 	bl	8002148 <updateDataAndWriteToSD>
 800262c:	e7ee      	b.n	800260c <main+0xa0>

	 }
	 else if(!isToggledOn && status == -1)
 800262e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ea      	bne.n	800260c <main+0xa0>
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <main+0xf8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263e:	d1e5      	bne.n	800260c <main+0xa0>
	 {
	    	HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);  // toggle LED
 8002640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <main+0xe8>)
 8002646:	f001 f8a4 	bl	8003792 <HAL_GPIO_TogglePin>
	    	isToggledOn = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 {
 8002650:	e7dc      	b.n	800260c <main+0xa0>
 8002652:	bf00      	nop
 8002654:	48000400 	.word	0x48000400
 8002658:	08011468 	.word	0x08011468
 800265c:	200002d4 	.word	0x200002d4
 8002660:	200003e0 	.word	0x200003e0
 8002664:	200002e0 	.word	0x200002e0

08002668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b09a      	sub	sp, #104	; 0x68
 800266c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	2248      	movs	r2, #72	; 0x48
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f00b f94e 	bl	800d918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	615a      	str	r2, [r3, #20]
 800268c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800268e:	f002 f893 	bl	80047b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff fd14 	bl	80020c0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <SystemClock_Config+0xac>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a0:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <SystemClock_Config+0xac>)
 80026a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <SystemClock_Config+0xac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80026b4:	2324      	movs	r3, #36	; 0x24
 80026b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026b8:	2381      	movs	r3, #129	; 0x81
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026bc:	2301      	movs	r3, #1
 80026be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026c4:	2360      	movs	r3, #96	; 0x60
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026cc:	f107 0320 	add.w	r3, r7, #32
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 fb43 	bl	8004d5c <HAL_RCC_OscConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80026dc:	f000 f81c 	bl	8002718 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80026e0:	234f      	movs	r3, #79	; 0x4f
 80026e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 feaf 	bl	8005460 <HAL_RCC_ClockConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002708:	f000 f806 	bl	8002718 <Error_Handler>
  }
}
 800270c:	bf00      	nop
 800270e:	3768      	adds	r7, #104	; 0x68
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	58000400 	.word	0x58000400

08002718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800271c:	b672      	cpsid	i
}
 800271e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002720:	e7fe      	b.n	8002720 <Error_Handler+0x8>

08002722 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <LL_APB1_GRP1_EnableClock>:
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4313      	orrs	r3, r2
 8002758:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <MX_RTC_Init+0x58>)
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <MX_RTC_Init+0x5c>)
 800277c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <MX_RTC_Init+0x58>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_RTC_Init+0x58>)
 8002786:	227f      	movs	r2, #127	; 0x7f
 8002788:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <MX_RTC_Init+0x58>)
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_RTC_Init+0x58>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <MX_RTC_Init+0x58>)
 8002798:	2200      	movs	r2, #0
 800279a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <MX_RTC_Init+0x58>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <MX_RTC_Init+0x58>)
 80027a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <MX_RTC_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <MX_RTC_Init+0x58>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <MX_RTC_Init+0x58>)
 80027b8:	f003 fb2c 	bl	8005e14 <HAL_RTC_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80027c2:	f7ff ffa9 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200002f0 	.word	0x200002f0
 80027d0:	40002800 	.word	0x40002800

080027d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b090      	sub	sp, #64	; 0x40
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	2238      	movs	r2, #56	; 0x38
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00b f897 	bl	800d918 <memset>
  if(rtcHandle->Instance==RTC)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_RTC_MspInit+0x54>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d115      	bne.n	8002820 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4618      	mov	r0, r3
 8002806:	f003 f9eb 	bl	8005be0 <HAL_RCCEx_PeriphCLKConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002810:	f7ff ff82 	bl	8002718 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002814:	f7ff ff85 	bl	8002722 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002818:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800281c:	f7ff ff91 	bl	8002742 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	3740      	adds	r7, #64	; 0x40
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40002800 	.word	0x40002800

0800282c <LL_AHB2_GRP1_EnableClock>:
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800283a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4313      	orrs	r3, r2
 8002872:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MX_SPI1_Init+0x74>)
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <MX_SPI1_Init+0x78>)
 8002894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <MX_SPI1_Init+0x74>)
 8002898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800289c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_SPI1_Init+0x74>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <MX_SPI1_Init+0x74>)
 80028a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_SPI1_Init+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <MX_SPI1_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_SPI1_Init+0x74>)
 80028ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_SPI1_Init+0x74>)
 80028c2:	2230      	movs	r2, #48	; 0x30
 80028c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_SPI1_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_SPI1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_SPI1_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_SPI1_Init+0x74>)
 80028da:	2207      	movs	r2, #7
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <MX_SPI1_Init+0x74>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_SPI1_Init+0x74>)
 80028e6:	2208      	movs	r2, #8
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_SPI1_Init+0x74>)
 80028ec:	f003 fdb8 	bl	8006460 <HAL_SPI_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028f6:	f7ff ff0f 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000328 	.word	0x20000328
 8002904:	40013000 	.word	0x40013000

08002908 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_SPI_MspInit+0x80>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12a      	bne.n	8002980 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800292a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800292e:	f7ff ff95 	bl	800285c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	2002      	movs	r0, #2
 8002934:	f7ff ff7a 	bl	800282c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002938:	2001      	movs	r0, #1
 800293a:	f7ff ff77 	bl	800282c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA1     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800293e:	2330      	movs	r3, #48	; 0x30
 8002940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002946:	2301      	movs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800294e:	2305      	movs	r3, #5
 8002950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	4619      	mov	r1, r3
 8002958:	480c      	ldr	r0, [pc, #48]	; (800298c <HAL_SPI_MspInit+0x84>)
 800295a:	f000 fda3 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800295e:	2302      	movs	r3, #2
 8002960:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002966:	2301      	movs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800296e:	2305      	movs	r3, #5
 8002970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	4619      	mov	r1, r3
 8002978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297c:	f000 fd92 	bl	80034a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002980:	bf00      	nop
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40013000 	.word	0x40013000
 800298c:	48000400 	.word	0x48000400

08002990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <NMI_Handler+0x4>

080029a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <HardFault_Handler+0x4>

080029a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <MemManage_Handler+0x4>

080029ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <UsageFault_Handler+0x4>

080029ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e2:	f000 fb49 	bl	8003078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <USART1_IRQHandler+0x10>)
 80029f2:	f005 faeb 	bl	8007fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200003e0 	.word	0x200003e0

08002a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return 1;
 8002a04:	2301      	movs	r3, #1
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <_kill>:

int _kill(int pid, int sig)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a18:	f00b fdee 	bl	800e5f8 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2216      	movs	r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
  return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_exit>:

void _exit (int status)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffe7 	bl	8002a0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a40:	e7fe      	b.n	8002a40 <_exit+0x12>

08002a42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e00a      	b.n	8002a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a54:	f3af 8000 	nop.w
 8002a58:	4601      	mov	r1, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	60ba      	str	r2, [r7, #8]
 8002a60:	b2ca      	uxtb	r2, r1
 8002a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dbf0      	blt.n	8002a54 <_read+0x12>
  }

  return len;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e009      	b.n	8002aa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	60ba      	str	r2, [r7, #8]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	dbf1      	blt.n	8002a8e <_write+0x12>
  }
  return len;
 8002aaa:	687b      	ldr	r3, [r7, #4]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_close>:

int _close(int file)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ada:	605a      	str	r2, [r3, #4]
  return 0;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <_isatty>:

int _isatty(int file)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <_sbrk+0x5c>)
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <_sbrk+0x60>)
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <_sbrk+0x64>)
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <_sbrk+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d207      	bcs.n	8002b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b44:	f00b fd58 	bl	800e5f8 <__errno>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b52:	e009      	b.n	8002b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <_sbrk+0x64>)
 8002b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20010000 	.word	0x20010000
 8002b74:	00000400 	.word	0x00000400
 8002b78:	20000390 	.word	0x20000390
 8002b7c:	20000630 	.word	0x20000630

08002b80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <SystemInit+0x14>)
 8002b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8a:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <LL_AHB2_GRP1_EnableClock>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <LL_APB2_GRP1_EnableClock>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b09c      	sub	sp, #112	; 0x70
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002bfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
 8002c28:	611a      	str	r2, [r3, #16]
 8002c2a:	615a      	str	r2, [r3, #20]
 8002c2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c2e:	463b      	mov	r3, r7
 8002c30:	2234      	movs	r2, #52	; 0x34
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00a fe6f 	bl	800d918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c3c:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <MX_TIM1_Init+0x160>)
 8002c3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c40:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c46:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c4c:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b3c      	ldr	r3, [pc, #240]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c66:	483b      	ldr	r0, [pc, #236]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c68:	f004 faa6 	bl	80071b8 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002c72:	f7ff fd51 	bl	8002718 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002c76:	4837      	ldr	r0, [pc, #220]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c78:	f004 faf5 	bl	8007266 <HAL_TIM_OC_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002c82:	f7ff fd49 	bl	8002718 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002c8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c92:	4619      	mov	r1, r3
 8002c94:	482f      	ldr	r0, [pc, #188]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002c96:	f004 fbc1 	bl	800741c <HAL_TIM_SlaveConfigSynchro>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002ca0:	f7ff fd3a 	bl	8002718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4827      	ldr	r0, [pc, #156]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002cb8:	f004 ffde 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002cc2:	f7ff fd29 	bl	8002718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481a      	ldr	r0, [pc, #104]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002cec:	f004 fb1c 	bl	8007328 <HAL_TIM_OC_ConfigChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8002cf6:	f7ff fd0f 	bl	8002718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d32:	463b      	mov	r3, r7
 8002d34:	4619      	mov	r1, r3
 8002d36:	4807      	ldr	r0, [pc, #28]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002d38:	f004 fffc 	bl	8007d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002d42:	f7ff fce9 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d46:	4803      	ldr	r0, [pc, #12]	; (8002d54 <MX_TIM1_Init+0x15c>)
 8002d48:	f000 f81c 	bl	8002d84 <HAL_TIM_MspPostInit>

}
 8002d4c:	bf00      	nop
 8002d4e:	3770      	adds	r7, #112	; 0x70
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000394 	.word	0x20000394
 8002d58:	40012c00 	.word	0x40012c00

08002d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_TIM_Base_MspInit+0x24>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d103      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d72:	f7ff ff29 	bl	8002bc8 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00

08002d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_TIM_MspPostInit+0x54>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d114      	bne.n	8002dd0 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7ff fef6 	bl	8002b98 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dcc:	f000 fb6a 	bl	80034a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40012c00 	.word	0x40012c00

08002ddc <LL_AHB2_GRP1_EnableClock>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e00:	68fb      	ldr	r3, [r7, #12]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <LL_APB2_GRP1_EnableClock>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e42:	4a23      	ldr	r2, [pc, #140]	; (8002ed0 <MX_USART1_UART_Init+0x94>)
 8002e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e46:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e60:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e62:	220c      	movs	r2, #12
 8002e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e84:	4811      	ldr	r0, [pc, #68]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e86:	f005 f804 	bl	8007e92 <HAL_UART_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e90:	f7ff fc42 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e94:	2100      	movs	r1, #0
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002e98:	f006 ff3b 	bl	8009d12 <HAL_UARTEx_SetTxFifoThreshold>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ea2:	f7ff fc39 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4808      	ldr	r0, [pc, #32]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002eaa:	f006 ff70 	bl	8009d8e <HAL_UARTEx_SetRxFifoThreshold>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002eb4:	f7ff fc30 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002eb8:	4804      	ldr	r0, [pc, #16]	; (8002ecc <MX_USART1_UART_Init+0x90>)
 8002eba:	f006 fef2 	bl	8009ca2 <HAL_UARTEx_DisableFifoMode>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ec4:	f7ff fc28 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200003e0 	.word	0x200003e0
 8002ed0:	40013800 	.word	0x40013800

08002ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b096      	sub	sp, #88	; 0x58
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2238      	movs	r2, #56	; 0x38
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00a fd0f 	bl	800d918 <memset>
  if(uartHandle->Instance==USART1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_UART_MspInit+0x94>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d12d      	bne.n	8002f60 <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f08:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002f0c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fe64 	bl	8005be0 <HAL_RCCEx_PeriphCLKConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f1e:	f7ff fbfb 	bl	8002718 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f26:	f7ff ff71 	bl	8002e0c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f7ff ff56 	bl	8002ddc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f30:	23c0      	movs	r3, #192	; 0xc0
 8002f32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f40:	2307      	movs	r3, #7
 8002f42:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4808      	ldr	r0, [pc, #32]	; (8002f6c <HAL_UART_MspInit+0x98>)
 8002f4c:	f000 faaa 	bl	80034a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2024      	movs	r0, #36	; 0x24
 8002f56:	f000 f9b4 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f5a:	2024      	movs	r0, #36	; 0x24
 8002f5c:	f000 f9cb 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f60:	bf00      	nop
 8002f62:	3758      	adds	r7, #88	; 0x58
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	48000400 	.word	0x48000400

08002f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f70:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f74:	f7ff fe04 	bl	8002b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <LoopForever+0x6>)
  ldr r1, =_edata
 8002f7a:	490d      	ldr	r1, [pc, #52]	; (8002fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <LoopForever+0xe>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <LoopForever+0x16>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f9e:	f00b fb31 	bl	800e604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fa2:	f7ff fae3 	bl	800256c <main>

08002fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fa6:	e7fe      	b.n	8002fa6 <LoopForever>
  ldr   r0, =_estack
 8002fa8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002fb4:	08011b4c 	.word	0x08011b4c
  ldr r2, =_sbss
 8002fb8:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8002fbc:	2000062c 	.word	0x2000062c

08002fc0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fce:	2003      	movs	r0, #3
 8002fd0:	f000 f96c 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fd4:	f002 fc26 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_Init+0x3c>)
 8002fdc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f000 f810 	bl	8003004 <HAL_InitTick>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	e001      	b.n	8002ff4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ff0:	f7ff fcce 	bl	8002990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_InitTick+0x6c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d024      	beq.n	8003062 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003018:	f002 fc04 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_InitTick+0x6c>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	4619      	mov	r1, r3
 8003024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003028:	fbb3 f3f1 	udiv	r3, r3, r1
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f96e 	bl	8003312 <HAL_SYSTICK_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d809      	bhi.n	8003056 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003042:	2200      	movs	r2, #0
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800304a:	f000 f93a 	bl	80032c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_InitTick+0x70>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e007      	b.n	8003066 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	e004      	b.n	8003066 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e001      	b.n	8003066 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000000c 	.word	0x2000000c
 8003074:	20000008 	.word	0x20000008

08003078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_IncTick+0x1c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_IncTick+0x20>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4413      	add	r3, r2
 8003088:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_IncTick+0x20>)
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	2000000c 	.word	0x2000000c
 8003098:	20000474 	.word	0x20000474

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <HAL_GetTick+0x10>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000474 	.word	0x20000474

080030b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b8:	f7ff fff0 	bl	800309c <HAL_GetTick>
 80030bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c8:	d005      	beq.n	80030d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_Delay+0x44>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030d6:	bf00      	nop
 80030d8:	f7ff ffe0 	bl	800309c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d8f7      	bhi.n	80030d8 <HAL_Delay+0x28>
  {
  }
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_ResumeTick+0x18>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a03      	ldr	r2, [pc, #12]	; (8003110 <HAL_ResumeTick+0x18>)
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	e000e010 	.word	0xe000e010

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4906      	ldr	r1, [pc, #24]	; (80031ac <__NVIC_EnableIRQ+0x34>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	; (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
         );
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800328c:	f7ff ff90 	bl	80031b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff2d 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff44 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff92 	bl	8003204 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff61 	bl	80031b0 <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff37 	bl	8003178 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa4 	bl	8003268 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e04f      	b.n	80033dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d008      	beq.n	800335a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2204      	movs	r2, #4
 800334c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e040      	b.n	80033dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 020e 	bic.w	r2, r2, #14
 8003368:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003378:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f003 021c 	and.w	r2, r3, #28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00c      	beq.n	80033ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d005      	beq.n	800340a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e047      	b.n	800349a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 020e 	bic.w	r2, r2, #14
 8003418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f003 021c 	and.w	r2, r3, #28
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003456:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
    }
  }
  return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b2:	e140      	b.n	8003736 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8132 	beq.w	8003730 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d005      	beq.n	80034e4 <HAL_GPIO_Init+0x40>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d130      	bne.n	8003546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800351a:	2201      	movs	r2, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f003 0201 	and.w	r2, r3, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b03      	cmp	r3, #3
 8003550:	d017      	beq.n	8003582 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d123      	bne.n	80035d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	08da      	lsrs	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3208      	adds	r2, #8
 8003596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	08da      	lsrs	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3208      	adds	r2, #8
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 808c 	beq.w	8003730 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003618:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_GPIO_Init+0x2b0>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	2207      	movs	r2, #7
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003642:	d00d      	beq.n	8003660 <HAL_GPIO_Init+0x1bc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a44      	ldr	r2, [pc, #272]	; (8003758 <HAL_GPIO_Init+0x2b4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <HAL_GPIO_Init+0x1b8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a43      	ldr	r2, [pc, #268]	; (800375c <HAL_GPIO_Init+0x2b8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_GPIO_Init+0x1b4>
 8003654:	2302      	movs	r3, #2
 8003656:	e004      	b.n	8003662 <HAL_GPIO_Init+0x1be>
 8003658:	2307      	movs	r3, #7
 800365a:	e002      	b.n	8003662 <HAL_GPIO_Init+0x1be>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_GPIO_Init+0x1be>
 8003660:	2300      	movs	r3, #0
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	f002 0203 	and.w	r2, r2, #3
 8003668:	0092      	lsls	r2, r2, #2
 800366a:	4093      	lsls	r3, r2
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003672:	4938      	ldr	r1, [pc, #224]	; (8003754 <HAL_GPIO_Init+0x2b0>)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003680:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036a4:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ce:	4a24      	ldr	r2, [pc, #144]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036da:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003708:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3301      	adds	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f aeb7 	bne.w	80034b4 <HAL_GPIO_Init+0x10>
  }
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	48000400 	.word	0x48000400
 800375c:	48000800 	.word	0x48000800
 8003760:	58000800 	.word	0x58000800

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003780:	e002      	b.n	8003788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037a4:	887a      	ldrh	r2, [r7, #2]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4013      	ands	r3, r2
 80037aa:	041a      	lsls	r2, r3, #16
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	400b      	ands	r3, r1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e081      	b.n	80038da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fee6 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003814:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003824:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	e006      	b.n	800384c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800384a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d104      	bne.n	800385e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800385c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	461a      	mov	r2, r3
 80038f0:	460b      	mov	r3, r1
 80038f2:	817b      	strh	r3, [r7, #10]
 80038f4:	4613      	mov	r3, r2
 80038f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	f040 80da 	bne.w	8003aba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_I2C_Master_Transmit+0x30>
 8003910:	2302      	movs	r3, #2
 8003912:	e0d3      	b.n	8003abc <HAL_I2C_Master_Transmit+0x1d8>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800391c:	f7ff fbbe 	bl	800309c <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2319      	movs	r3, #25
 8003928:	2201      	movs	r2, #1
 800392a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fc65 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0be      	b.n	8003abc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2221      	movs	r2, #33	; 0x21
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2210      	movs	r2, #16
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	893a      	ldrh	r2, [r7, #8]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	2bff      	cmp	r3, #255	; 0xff
 800396e:	d90e      	bls.n	800398e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	b2da      	uxtb	r2, r3
 800397c:	8979      	ldrh	r1, [r7, #10]
 800397e:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fe50 	bl	800462c <I2C_TransferConfig>
 800398c:	e06c      	b.n	8003a68 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <HAL_I2C_Master_Transmit+0x1e0>)
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fe3f 	bl	800462c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039ae:	e05b      	b.n	8003a68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	6a39      	ldr	r1, [r7, #32]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fc62 	bl	800427e <I2C_WaitOnTXISFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e07b      	b.n	8003abc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d034      	beq.n	8003a68 <HAL_I2C_Master_Transmit+0x184>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d130      	bne.n	8003a68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fbf4 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e04d      	b.n	8003abc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2bff      	cmp	r3, #255	; 0xff
 8003a28:	d90e      	bls.n	8003a48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	22ff      	movs	r2, #255	; 0xff
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	8979      	ldrh	r1, [r7, #10]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fdf3 	bl	800462c <I2C_TransferConfig>
 8003a46:	e00f      	b.n	8003a68 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	8979      	ldrh	r1, [r7, #10]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fde2 	bl	800462c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d19e      	bne.n	80039b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	6a39      	ldr	r1, [r7, #32]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fc41 	bl	80042fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e01a      	b.n	8003abc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_I2C_Master_Transmit+0x1e4>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	80002000 	.word	0x80002000
 8003ac8:	fe00e800 	.word	0xfe00e800

08003acc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	f040 80db 	bne.w	8003ca4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_I2C_Master_Receive+0x30>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0d4      	b.n	8003ca6 <HAL_I2C_Master_Receive+0x1da>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b04:	f7ff faca 	bl	800309c <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2319      	movs	r3, #25
 8003b10:	2201      	movs	r2, #1
 8003b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fb71 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0bf      	b.n	8003ca6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2222      	movs	r2, #34	; 0x22
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2210      	movs	r2, #16
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2bff      	cmp	r3, #255	; 0xff
 8003b56:	d90e      	bls.n	8003b76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	22ff      	movs	r2, #255	; 0xff
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	8979      	ldrh	r1, [r7, #10]
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <HAL_I2C_Master_Receive+0x1e4>)
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fd5c 	bl	800462c <I2C_TransferConfig>
 8003b74:	e06d      	b.n	8003c52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_I2C_Master_Receive+0x1e4>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fd4b 	bl	800462c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b96:	e05c      	b.n	8003c52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	6a39      	ldr	r1, [r7, #32]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fbeb 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e07c      	b.n	8003ca6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d034      	beq.n	8003c52 <HAL_I2C_Master_Receive+0x186>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d130      	bne.n	8003c52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 faff 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e04d      	b.n	8003ca6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2bff      	cmp	r3, #255	; 0xff
 8003c12:	d90e      	bls.n	8003c32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	22ff      	movs	r2, #255	; 0xff
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	8979      	ldrh	r1, [r7, #10]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fcfe 	bl	800462c <I2C_TransferConfig>
 8003c30:	e00f      	b.n	8003c52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	8979      	ldrh	r1, [r7, #10]
 8003c44:	2300      	movs	r3, #0
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fced 	bl	800462c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d19d      	bne.n	8003b98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6a39      	ldr	r1, [r7, #32]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fb4c 	bl	80042fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e01a      	b.n	8003ca6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2220      	movs	r2, #32
 8003c76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_I2C_Master_Receive+0x1e8>)
 8003c84:	400b      	ands	r3, r1
 8003c86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	80002400 	.word	0x80002400
 8003cb4:	fe00e800 	.word	0xfe00e800

08003cb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	817b      	strh	r3, [r7, #10]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	813b      	strh	r3, [r7, #8]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	f040 80fd 	bne.w	8003eda <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_I2C_Mem_Read+0x34>
 8003ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0f1      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x4e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0ea      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d0e:	f7ff f9c5 	bl	800309c <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2319      	movs	r3, #25
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fa6c 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0d5      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d58:	88f8      	ldrh	r0, [r7, #6]
 8003d5a:	893a      	ldrh	r2, [r7, #8]
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4603      	mov	r3, r0
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9d1 	bl	8004110 <I2C_RequestMemoryRead>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0ad      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2bff      	cmp	r3, #255	; 0xff
 8003d88:	d90e      	bls.n	8003da8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	22ff      	movs	r2, #255	; 0xff
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	8979      	ldrh	r1, [r7, #10]
 8003d98:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_I2C_Mem_Read+0x22c>)
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fc43 	bl	800462c <I2C_TransferConfig>
 8003da6:	e00f      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	8979      	ldrh	r1, [r7, #10]
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_I2C_Mem_Read+0x22c>)
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fc32 	bl	800462c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2104      	movs	r1, #4
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa13 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07c      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d034      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x1d0>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d130      	bne.n	8003e88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f9e4 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e04d      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2bff      	cmp	r3, #255	; 0xff
 8003e48:	d90e      	bls.n	8003e68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	8979      	ldrh	r1, [r7, #10]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fbe3 	bl	800462c <I2C_TransferConfig>
 8003e66:	e00f      	b.n	8003e88 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	8979      	ldrh	r1, [r7, #10]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fbd2 	bl	800462c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d19a      	bne.n	8003dc8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa31 	bl	80042fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e01a      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_I2C_Mem_Read+0x230>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	80002400 	.word	0x80002400
 8003ee8:	fe00e800 	.word	0xfe00e800

08003eec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	f040 80f1 	bne.w	80040f0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0e7      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2C_IsDeviceReady+0x44>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0e0      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_IsDeviceReady+0x72>
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f5c:	e004      	b.n	8003f68 <HAL_I2C_IsDeviceReady+0x7c>
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f64:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003f6e:	f7ff f895 	bl	800309c <HAL_GetTick>
 8003f72:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003fa0:	e034      	b.n	800400c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa8:	d01a      	beq.n	8003fe0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7ff f877 	bl	800309c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <HAL_I2C_IsDeviceReady+0xd4>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e088      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800400c:	7ffb      	ldrb	r3, [r7, #31]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0x12c>
 8004012:	7fbb      	ldrb	r3, [r7, #30]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0c4      	beq.n	8003fa2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b10      	cmp	r3, #16
 8004024:	d01a      	beq.n	800405c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	2120      	movs	r1, #32
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f8e4 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e058      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2220      	movs	r2, #32
 8004046:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e04a      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	2120      	movs	r1, #32
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f8c9 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e03d      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2220      	movs	r2, #32
 8004084:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d118      	bne.n	80040c0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2120      	movs	r1, #32
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8a8 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e01c      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2220      	movs	r2, #32
 80040be:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3301      	adds	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	f63f af3b 	bhi.w	8003f46 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	8979      	ldrh	r1, [r7, #10]
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <I2C_RequestMemoryRead+0xa4>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa78 	bl	800462c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	69b9      	ldr	r1, [r7, #24]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f89c 	bl	800427e <I2C_WaitOnTXISFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e02c      	b.n	80041aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004156:	893b      	ldrh	r3, [r7, #8]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
 8004160:	e015      	b.n	800418e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004162:	893b      	ldrh	r3, [r7, #8]
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	b29b      	uxth	r3, r3
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	69b9      	ldr	r1, [r7, #24]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f882 	bl	800427e <I2C_WaitOnTXISFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e012      	b.n	80041aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2200      	movs	r2, #0
 8004196:	2140      	movs	r1, #64	; 0x40
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f830 	bl	80041fe <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	80002000 	.word	0x80002000

080041b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d103      	bne.n	80041d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d007      	beq.n	80041f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	619a      	str	r2, [r3, #24]
  }
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800420e:	e022      	b.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004216:	d01e      	beq.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004218:	f7fe ff40 	bl	800309c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d113      	bne.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e00f      	b.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	429a      	cmp	r2, r3
 8004272:	d0cd      	beq.n	8004210 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800428a:	e02c      	b.n	80042e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8eb 	bl	800446c <I2C_IsErrorOccurred>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e02a      	b.n	80042f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a6:	d01e      	beq.n	80042e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a8:	f7fe fef8 	bl	800309c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e007      	b.n	80042f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d1cb      	bne.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800430a:	e028      	b.n	800435e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f8ab 	bl	800446c <I2C_IsErrorOccurred>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e026      	b.n	800436e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004320:	f7fe febc 	bl	800309c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	d302      	bcc.n	8004336 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d113      	bne.n	800435e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e007      	b.n	800436e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b20      	cmp	r3, #32
 800436a:	d1cf      	bne.n	800430c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004384:	e064      	b.n	8004450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f86e 	bl	800446c <I2C_IsErrorOccurred>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e062      	b.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d138      	bne.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d105      	bne.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e04e      	b.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d107      	bne.n	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2210      	movs	r2, #16
 80043d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2204      	movs	r2, #4
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
 80043de:	e002      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2220      	movs	r2, #32
 80043ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e022      	b.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7fe fe3f 	bl	800309c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e007      	b.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d193      	bne.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	fe00e800 	.word	0xfe00e800

0800446c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d068      	beq.n	800456a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2210      	movs	r2, #16
 800449e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044a0:	e049      	b.n	8004536 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a8:	d045      	beq.n	8004536 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fe fdf7 	bl	800309c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_IsErrorOccurred+0x54>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d13a      	bne.n	8004536 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d121      	bne.n	8004528 <I2C_IsErrorOccurred+0xbc>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ea:	d01d      	beq.n	8004528 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d01a      	beq.n	8004528 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004502:	f7fe fdcb 	bl	800309c <HAL_GetTick>
 8004506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004508:	e00e      	b.n	8004528 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800450a:	f7fe fdc7 	bl	800309c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b19      	cmp	r3, #25
 8004516:	d907      	bls.n	8004528 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004526:	e006      	b.n	8004536 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b20      	cmp	r3, #32
 8004534:	d1e9      	bne.n	800450a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b20      	cmp	r3, #32
 8004542:	d003      	beq.n	800454c <I2C_IsErrorOccurred+0xe0>
 8004544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0aa      	beq.n	80044a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800454c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2220      	movs	r2, #32
 800455a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f043 0304 	orr.w	r3, r3, #4
 8004562:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01c      	beq.n	800461a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fde9 	bl	80041b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <I2C_IsErrorOccurred+0x1bc>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800461a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	fe00e800 	.word	0xfe00e800

0800462c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	4613      	mov	r3, r2
 800463c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004644:	7a7b      	ldrb	r3, [r7, #9]
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800464c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	4313      	orrs	r3, r2
 8004656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800465a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	0d5b      	lsrs	r3, r3, #21
 8004666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <I2C_TransferConfig+0x5c>)
 800466c:	430b      	orrs	r3, r1
 800466e:	43db      	mvns	r3, r3
 8004670:	ea02 0103 	and.w	r1, r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	03ff63ff 	.word	0x03ff63ff

0800468c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d138      	bne.n	8004714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e032      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	d139      	bne.n	80047aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004740:	2302      	movs	r3, #2
 8004742:	e033      	b.n	80047ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004772:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a03      	ldr	r2, [pc, #12]	; (80047d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80047c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c6:	6013      	str	r3, [r2, #0]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	58000400 	.word	0x58000400

080047d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	58000400 	.word	0x58000400

080047ec <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fc:	d101      	bne.n	8004802 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	58000400 	.word	0x58000400

08004810 <LL_RCC_HSE_EnableTcxo>:
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <LL_RCC_HSE_DisableTcxo>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485a:	d101      	bne.n	8004860 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <LL_RCC_HSE_Enable>:
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <LL_RCC_HSE_Disable>:
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <LL_RCC_HSE_IsReady>:
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b4:	d101      	bne.n	80048ba <LL_RCC_HSE_IsReady+0x18>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <LL_RCC_HSE_IsReady+0x1a>
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <LL_RCC_HSI_Enable>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <LL_RCC_HSI_Disable>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80048e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <LL_RCC_HSI_IsReady>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d101      	bne.n	8004914 <LL_RCC_HSI_IsReady+0x18>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <LL_RCC_HSI_IsReady+0x1a>
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <LL_RCC_HSI_SetCalibTrimming>:
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <LL_RCC_LSE_IsReady>:
{
 8004946:	b480      	push	{r7}
 8004948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d101      	bne.n	800495e <LL_RCC_LSE_IsReady+0x18>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <LL_RCC_LSE_IsReady+0x1a>
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <LL_RCC_LSI_Enable>:
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <LL_RCC_LSI_Disable>:
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <LL_RCC_LSI_IsReady>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d101      	bne.n	80049c0 <LL_RCC_LSI_IsReady+0x18>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <LL_RCC_LSI_IsReady+0x1a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_MSI_Enable>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
}
 80049de:	bf00      	nop
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <LL_RCC_MSI_Disable>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6013      	str	r3, [r2, #0]
}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <LL_RCC_MSI_IsReady>:
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d101      	bne.n	8004a18 <LL_RCC_MSI_IsReady+0x16>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <LL_RCC_MSI_IsReady+0x18>
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d101      	bne.n	8004a38 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_MSI_GetRange>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <LL_RCC_SetSysClkSource>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_GetSysClkSource>:
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <LL_RCC_SetAHBPrescaler>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <LL_C2_RCC_SetAHBPrescaler>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <LL_RCC_SetAHB3Prescaler>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b34:	f023 020f 	bic.w	r2, r3, #15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_SetAPB1Prescaler>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <LL_RCC_SetAPB2Prescaler>:
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <LL_RCC_GetAHBPrescaler>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <LL_RCC_GetAHB3Prescaler>:
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <LL_RCC_GetAPB1Prescaler>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <LL_RCC_GetAPB2Prescaler>:
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c26:	6013      	str	r3, [r2, #0]
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c42:	d101      	bne.n	8004c48 <LL_RCC_PLL_IsReady+0x18>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <LL_RCC_PLL_IsReady+0x1a>
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c96:	b480      	push	{r7}
 8004c98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbe:	d101      	bne.n	8004cc4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce2:	d101      	bne.n	8004ce8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d06:	d101      	bne.n	8004d0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004d16:	b480      	push	{r7}
 8004d18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d28:	d101      	bne.n	8004d2e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d4a:	d101      	bne.n	8004d50 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e36f      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6e:	f7ff fea6 	bl	8004abe <LL_RCC_GetSysClkSource>
 8004d72:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d74:	f7ff ff8f 	bl	8004c96 <LL_RCC_PLL_GetMainSource>
 8004d78:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80c4 	beq.w	8004f10 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x3e>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d176      	bne.n	8004e82 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d173      	bne.n	8004e82 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e353      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x68>
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc2:	e006      	b.n	8004dd2 <HAL_RCC_OscConfig+0x76>
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d222      	bcs.n	8004e1c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fd5a 	bl	8005894 <RCC_SetFlashLatencyFromMSIRange>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e331      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fe2b 	bl	8004a70 <LL_RCC_MSI_SetCalibTrimming>
 8004e1a:	e021      	b.n	8004e60 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e26:	f043 0308 	orr.w	r3, r3, #8
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fe12 	bl	8004a70 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fd1f 	bl	8005894 <RCC_SetFlashLatencyFromMSIRange>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e2f6      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e60:	f000 fce0 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4aa7      	ldr	r2, [pc, #668]	; (8005104 <HAL_RCC_OscConfig+0x3a8>)
 8004e68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004e6a:	4ba7      	ldr	r3, [pc, #668]	; (8005108 <HAL_RCC_OscConfig+0x3ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe f8c8 	bl	8003004 <HAL_InitTick>
 8004e74:	4603      	mov	r3, r0
 8004e76:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d047      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	e2e5      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02c      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e8a:	f7ff fd9e 	bl	80049ca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e8e:	f7fe f905 	bl	800309c <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e96:	f7fe f901 	bl	800309c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e2d2      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ea8:	f7ff fdab 	bl	8004a02 <LL_RCC_MSI_IsReady>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f1      	beq.n	8004e96 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ebc:	f043 0308 	orr.w	r3, r3, #8
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fdc7 	bl	8004a70 <LL_RCC_MSI_SetCalibTrimming>
 8004ee2:	e015      	b.n	8004f10 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ee4:	f7ff fd7f 	bl	80049e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f8d8 	bl	800309c <HAL_GetTick>
 8004eec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ef0:	f7fe f8d4 	bl	800309c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e2a5      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f02:	f7ff fd7e 	bl	8004a02 <LL_RCC_MSI_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f1      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x194>
 8004f0c:	e000      	b.n	8004f10 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f0e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d058      	beq.n	8004fce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d005      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d108      	bne.n	8004f3a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d14b      	bne.n	8004fce <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e289      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d102      	bne.n	8004f60 <HAL_RCC_OscConfig+0x204>
 8004f5a:	f7ff fc86 	bl	800486a <LL_RCC_HSE_Enable>
 8004f5e:	e00d      	b.n	8004f7c <HAL_RCC_OscConfig+0x220>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004f68:	d104      	bne.n	8004f74 <HAL_RCC_OscConfig+0x218>
 8004f6a:	f7ff fc51 	bl	8004810 <LL_RCC_HSE_EnableTcxo>
 8004f6e:	f7ff fc7c 	bl	800486a <LL_RCC_HSE_Enable>
 8004f72:	e003      	b.n	8004f7c <HAL_RCC_OscConfig+0x220>
 8004f74:	f7ff fc87 	bl	8004886 <LL_RCC_HSE_Disable>
 8004f78:	f7ff fc58 	bl	800482c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d012      	beq.n	8004faa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7fe f88a 	bl	800309c <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f8c:	f7fe f886 	bl	800309c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	; 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e257      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004f9e:	f7ff fc80 	bl	80048a2 <LL_RCC_HSE_IsReady>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f1      	beq.n	8004f8c <HAL_RCC_OscConfig+0x230>
 8004fa8:	e011      	b.n	8004fce <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fe f877 	bl	800309c <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb2:	f7fe f873 	bl	800309c <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b64      	cmp	r3, #100	; 0x64
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e244      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004fc4:	f7ff fc6d 	bl	80048a2 <LL_RCC_HSE_IsReady>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f1      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d046      	beq.n	8005068 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_OscConfig+0x290>
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d10e      	bne.n	8005004 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d10b      	bne.n	8005004 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e22a      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fc8e 	bl	800491e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005002:	e031      	b.n	8005068 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d019      	beq.n	8005040 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800500c:	f7ff fc5a 	bl	80048c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fe f844 	bl	800309c <HAL_GetTick>
 8005014:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005018:	f7fe f840 	bl	800309c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e211      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800502a:	f7ff fc67 	bl	80048fc <LL_RCC_HSI_IsReady>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f1      	beq.n	8005018 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fc70 	bl	800491e <LL_RCC_HSI_SetCalibTrimming>
 800503e:	e013      	b.n	8005068 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005040:	f7ff fc4e 	bl	80048e0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fe f82a 	bl	800309c <HAL_GetTick>
 8005048:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7fe f826 	bl	800309c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1f7      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800505e:	f7ff fc4d 	bl	80048fc <LL_RCC_HSI_IsReady>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f1      	bne.n	800504c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d06e      	beq.n	8005152 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d056      	beq.n	800512a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005084:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	429a      	cmp	r2, r3
 8005092:	d031      	beq.n	80050f8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e1d0      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80050b6:	f7ff fc67 	bl	8004988 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050ba:	f7fd ffef 	bl	800309c <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fd ffeb 	bl	800309c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b11      	cmp	r3, #17
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e1bc      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80050d4:	f7ff fc68 	bl	80049a8 <LL_RCC_LSI_IsReady>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f1      	bne.n	80050c2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e6:	f023 0210 	bic.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f8:	f7ff fc36 	bl	8004968 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fc:	f7fd ffce 	bl	800309c <HAL_GetTick>
 8005100:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005102:	e00c      	b.n	800511e <HAL_RCC_OscConfig+0x3c2>
 8005104:	20000004 	.word	0x20000004
 8005108:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510c:	f7fd ffc6 	bl	800309c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b11      	cmp	r3, #17
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e197      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800511e:	f7ff fc43 	bl	80049a8 <LL_RCC_LSI_IsReady>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f1      	beq.n	800510c <HAL_RCC_OscConfig+0x3b0>
 8005128:	e013      	b.n	8005152 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512a:	f7ff fc2d 	bl	8004988 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512e:	f7fd ffb5 	bl	800309c <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005136:	f7fd ffb1 	bl	800309c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b11      	cmp	r3, #17
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e182      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005148:	f7ff fc2e 	bl	80049a8 <LL_RCC_LSI_IsReady>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f1      	bne.n	8005136 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80d8 	beq.w	8005310 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005160:	f7ff fb44 	bl	80047ec <LL_PWR_IsEnabledBkUpAccess>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d113      	bne.n	8005192 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800516a:	f7ff fb25 	bl	80047b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800516e:	f7fd ff95 	bl	800309c <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005176:	f7fd ff91 	bl	800309c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e162      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005188:	f7ff fb30 	bl	80047ec <LL_PWR_IsEnabledBkUpAccess>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f1      	beq.n	8005176 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d07b      	beq.n	8005292 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b85      	cmp	r3, #133	; 0x85
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d109      	bne.n	80051be <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fd ff6d 	bl	800309c <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fd ff5f 	bl	800309c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e12e      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80051f0:	f7ff fba9 	bl	8004946 <LL_RCC_LSE_IsReady>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0ef      	beq.n	80051da <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b81      	cmp	r3, #129	; 0x81
 8005200:	d003      	beq.n	800520a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b85      	cmp	r3, #133	; 0x85
 8005208:	d121      	bne.n	800524e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fd ff47 	bl	800309c <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005224:	e00a      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005226:	f7fd ff39 	bl	800309c <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f241 3288 	movw	r2, #5000	; 0x1388
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e108      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ec      	beq.n	8005226 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800524c:	e060      	b.n	8005310 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524e:	f7fd ff25 	bl	800309c <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005268:	e00a      	b.n	8005280 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd ff17 	bl	800309c <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	; 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e0e6      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ec      	bne.n	800526a <HAL_RCC_OscConfig+0x50e>
 8005290:	e03e      	b.n	8005310 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005292:	f7fd ff03 	bl	800309c <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fd fef5 	bl	800309c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e0c4      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ec      	bne.n	80052ae <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d4:	f7fd fee2 	bl	800309c <HAL_GetTick>
 80052d8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f0:	f7fd fed4 	bl	800309c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0a3      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005306:	f7ff fb1e 	bl	8004946 <LL_RCC_LSE_IsReady>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ef      	bne.n	80052f0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8099 	beq.w	800544c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b0c      	cmp	r3, #12
 800531e:	d06c      	beq.n	80053fa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	2b02      	cmp	r3, #2
 8005326:	d14b      	bne.n	80053c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005328:	f7ff fc74 	bl	8004c14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532c:	f7fd feb6 	bl	800309c <HAL_GetTick>
 8005330:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005334:	f7fd feb2 	bl	800309c <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b0a      	cmp	r3, #10
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e083      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005346:	f7ff fc73 	bl	8004c30 <LL_RCC_PLL_IsReady>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f1      	bne.n	8005334 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	4b40      	ldr	r3, [pc, #256]	; (8005458 <HAL_RCC_OscConfig+0x6fc>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005362:	4311      	orrs	r1, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005368:	0212      	lsls	r2, r2, #8
 800536a:	4311      	orrs	r1, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005370:	4311      	orrs	r1, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005376:	4311      	orrs	r1, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800537c:	430a      	orrs	r2, r1
 800537e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005382:	4313      	orrs	r3, r2
 8005384:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005386:	f7ff fc37 	bl	8004bf8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005398:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fd fe7f 	bl	800309c <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fd fe7b 	bl	800309c <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b0a      	cmp	r3, #10
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e04c      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80053b4:	f7ff fc3c 	bl	8004c30 <LL_RCC_PLL_IsReady>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f1      	beq.n	80053a2 <HAL_RCC_OscConfig+0x646>
 80053be:	e045      	b.n	800544c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	f7ff fc28 	bl	8004c14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fd fe6a 	bl	800309c <HAL_GetTick>
 80053c8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fd fe66 	bl	800309c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b0a      	cmp	r3, #10
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e037      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80053de:	f7ff fc27 	bl	8004c30 <LL_RCC_PLL_IsReady>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f1      	bne.n	80053cc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_RCC_OscConfig+0x700>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60cb      	str	r3, [r1, #12]
 80053f8:	e028      	b.n	800544c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e023      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f003 0203 	and.w	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	429a      	cmp	r2, r3
 800541a:	d115      	bne.n	8005448 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	429a      	cmp	r2, r3
 8005428:	d10e      	bne.n	8005448 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	429a      	cmp	r2, r3
 8005438:	d106      	bne.n	8005448 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	11c1808c 	.word	0x11c1808c
 800545c:	eefefffc 	.word	0xeefefffc

08005460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e12c      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005474:	4b98      	ldr	r3, [pc, #608]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d91b      	bls.n	80054ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b95      	ldr	r3, [pc, #596]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 0207 	bic.w	r2, r3, #7
 800548a:	4993      	ldr	r1, [pc, #588]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005492:	f7fd fe03 	bl	800309c <HAL_GetTick>
 8005496:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005498:	e008      	b.n	80054ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800549a:	f7fd fdff 	bl	800309c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e110      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ac:	4b8a      	ldr	r3, [pc, #552]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d1ef      	bne.n	800549a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fb02 	bl	8004ad4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054d0:	f7fd fde4 	bl	800309c <HAL_GetTick>
 80054d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054d8:	f7fd fde0 	bl	800309c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e0f1      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80054ea:	f7ff fbdf 	bl	8004cac <LL_RCC_IsActiveFlag_HPRE>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f1      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d016      	beq.n	800552e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff faf8 	bl	8004afa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800550a:	f7fd fdc7 	bl	800309c <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005512:	f7fd fdc3 	bl	800309c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e0d4      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005524:	f7ff fbd3 	bl	8004cce <LL_RCC_IsActiveFlag_C2HPRE>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f1      	beq.n	8005512 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff faf0 	bl	8004b24 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005544:	f7fd fdaa 	bl	800309c <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800554c:	f7fd fda6 	bl	800309c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0b7      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800555e:	f7ff fbc8 	bl	8004cf2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f1      	beq.n	800554c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fae9 	bl	8004b50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800557e:	f7fd fd8d 	bl	800309c <HAL_GetTick>
 8005582:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005586:	f7fd fd89 	bl	800309c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e09a      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005598:	f7ff fbbd 	bl	8004d16 <LL_RCC_IsActiveFlag_PPRE1>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f1      	beq.n	8005586 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d017      	beq.n	80055de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fade 	bl	8004b76 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055ba:	f7fd fd6f 	bl	800309c <HAL_GetTick>
 80055be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055c2:	f7fd fd6b 	bl	800309c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e07c      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80055d4:	f7ff fbb0 	bl	8004d38 <LL_RCC_IsActiveFlag_PPRE2>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f1      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d043      	beq.n	8005672 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d106      	bne.n	8005600 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80055f2:	f7ff f956 	bl	80048a2 <LL_RCC_HSE_IsReady>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11e      	bne.n	800563a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e066      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d106      	bne.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005608:	f7ff fb12 	bl	8004c30 <LL_RCC_PLL_IsReady>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d113      	bne.n	800563a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e05b      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800561e:	f7ff f9f0 	bl	8004a02 <LL_RCC_MSI_IsReady>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e050      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800562c:	f7ff f966 	bl	80048fc <LL_RCC_HSI_IsReady>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e049      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fa2a 	bl	8004a98 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005644:	f7fd fd2a 	bl	800309c <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	e00a      	b.n	8005662 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564c:	f7fd fd26 	bl	800309c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	; 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e035      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	f7ff fa2c 	bl	8004abe <LL_RCC_GetSysClkSource>
 8005666:	4602      	mov	r2, r0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	429a      	cmp	r2, r3
 8005670:	d1ec      	bne.n	800564c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005672:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d21b      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005680:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 0207 	bic.w	r2, r3, #7
 8005688:	4913      	ldr	r1, [pc, #76]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	4313      	orrs	r3, r2
 800568e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005690:	f7fd fd04 	bl	800309c <HAL_GetTick>
 8005694:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005696:	e008      	b.n	80056aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005698:	f7fd fd00 	bl	800309c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e011      	b.n	80056ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCC_ClockConfig+0x278>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d1ef      	bne.n	8005698 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056b8:	f000 f8b4 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 80056bc:	4603      	mov	r3, r0
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <HAL_RCC_ClockConfig+0x27c>)
 80056c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <HAL_RCC_ClockConfig+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fc9c 	bl	8003004 <HAL_InitTick>
 80056cc:	4603      	mov	r3, r0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	58004000 	.word	0x58004000
 80056dc:	20000004 	.word	0x20000004
 80056e0:	20000008 	.word	0x20000008

080056e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056f2:	f7ff f9e4 	bl	8004abe <LL_RCC_GetSysClkSource>
 80056f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f8:	f7ff facd 	bl	8004c96 <LL_RCC_PLL_GetMainSource>
 80056fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x2c>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d139      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d136      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005710:	f7ff f987 	bl	8004a22 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d115      	bne.n	8005746 <HAL_RCC_GetSysClockFreq+0x62>
 800571a:	f7ff f982 	bl	8004a22 <LL_RCC_MSI_IsEnabledRangeSelect>
 800571e:	4603      	mov	r3, r0
 8005720:	2b01      	cmp	r3, #1
 8005722:	d106      	bne.n	8005732 <HAL_RCC_GetSysClockFreq+0x4e>
 8005724:	f7ff f98d 	bl	8004a42 <LL_RCC_MSI_GetRange>
 8005728:	4603      	mov	r3, r0
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	e005      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x5a>
 8005732:	f7ff f991 	bl	8004a58 <LL_RCC_MSI_GetRangeAfterStandby>
 8005736:	4603      	mov	r3, r0
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	4a36      	ldr	r2, [pc, #216]	; (8005818 <HAL_RCC_GetSysClockFreq+0x134>)
 8005740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005744:	e014      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x8c>
 8005746:	f7ff f96c 	bl	8004a22 <LL_RCC_MSI_IsEnabledRangeSelect>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d106      	bne.n	800575e <HAL_RCC_GetSysClockFreq+0x7a>
 8005750:	f7ff f977 	bl	8004a42 <LL_RCC_MSI_GetRange>
 8005754:	4603      	mov	r3, r0
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	e005      	b.n	800576a <HAL_RCC_GetSysClockFreq+0x86>
 800575e:	f7ff f97b 	bl	8004a58 <LL_RCC_MSI_GetRangeAfterStandby>
 8005762:	4603      	mov	r3, r0
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <HAL_RCC_GetSysClockFreq+0x134>)
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d115      	bne.n	80057a4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800577c:	e012      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d102      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <HAL_RCC_GetSysClockFreq+0x138>)
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e00c      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d109      	bne.n	80057a4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005790:	f7ff f85a 	bl	8004848 <LL_RCC_HSE_IsEnabledDiv2>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800579a:	4b20      	ldr	r3, [pc, #128]	; (800581c <HAL_RCC_GetSysClockFreq+0x138>)
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e001      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80057a0:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_RCC_GetSysClockFreq+0x13c>)
 80057a2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a4:	f7ff f98b 	bl	8004abe <LL_RCC_GetSysClkSource>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d12f      	bne.n	800580e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80057ae:	f7ff fa72 	bl	8004c96 <LL_RCC_PLL_GetMainSource>
 80057b2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0xde>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d003      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80057c0:	e00d      	b.n	80057de <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80057c2:	4b16      	ldr	r3, [pc, #88]	; (800581c <HAL_RCC_GetSysClockFreq+0x138>)
 80057c4:	60fb      	str	r3, [r7, #12]
        break;
 80057c6:	e00d      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80057c8:	f7ff f83e 	bl	8004848 <LL_RCC_HSE_IsEnabledDiv2>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <HAL_RCC_GetSysClockFreq+0x138>)
 80057d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80057d6:	e005      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <HAL_RCC_GetSysClockFreq+0x13c>)
 80057da:	60fb      	str	r3, [r7, #12]
        break;
 80057dc:	e002      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	60fb      	str	r3, [r7, #12]
        break;
 80057e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80057e4:	f7ff fa35 	bl	8004c52 <LL_RCC_PLL_GetN>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	fb03 f402 	mul.w	r4, r3, r2
 80057f0:	f7ff fa46 	bl	8004c80 <LL_RCC_PLL_GetDivider>
 80057f4:	4603      	mov	r3, r0
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	3301      	adds	r3, #1
 80057fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80057fe:	f7ff fa34 	bl	8004c6a <LL_RCC_PLL_GetR>
 8005802:	4603      	mov	r3, r0
 8005804:	0f5b      	lsrs	r3, r3, #29
 8005806:	3301      	adds	r3, #1
 8005808:	fbb4 f3f3 	udiv	r3, r4, r3
 800580c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800580e:	697b      	ldr	r3, [r7, #20]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	08011560 	.word	0x08011560
 800581c:	00f42400 	.word	0x00f42400
 8005820:	01e84800 	.word	0x01e84800

08005824 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005824:	b598      	push	{r3, r4, r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005828:	f7ff ff5c 	bl	80056e4 <HAL_RCC_GetSysClockFreq>
 800582c:	4604      	mov	r4, r0
 800582e:	f7ff f9b5 	bl	8004b9c <LL_RCC_GetAHBPrescaler>
 8005832:	4603      	mov	r3, r0
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	4a03      	ldr	r2, [pc, #12]	; (8005848 <HAL_RCC_GetHCLKFreq+0x24>)
 800583c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005840:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd98      	pop	{r3, r4, r7, pc}
 8005848:	08011500 	.word	0x08011500

0800584c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800584c:	b598      	push	{r3, r4, r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005850:	f7ff ffe8 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8005854:	4604      	mov	r4, r0
 8005856:	f7ff f9b9 	bl	8004bcc <LL_RCC_GetAPB1Prescaler>
 800585a:	4603      	mov	r3, r0
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	4a03      	ldr	r2, [pc, #12]	; (800586c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005864:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd98      	pop	{r3, r4, r7, pc}
 800586c:	08011540 	.word	0x08011540

08005870 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005870:	b598      	push	{r3, r4, r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005874:	f7ff ffd6 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8005878:	4604      	mov	r4, r0
 800587a:	f7ff f9b2 	bl	8004be2 <LL_RCC_GetAPB2Prescaler>
 800587e:	4603      	mov	r3, r0
 8005880:	0adb      	lsrs	r3, r3, #11
 8005882:	4a03      	ldr	r2, [pc, #12]	; (8005890 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005888:	fa24 f303 	lsr.w	r3, r4, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd98      	pop	{r3, r4, r7, pc}
 8005890:	08011540 	.word	0x08011540

08005894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80058a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058aa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80058ac:	f7ff f981 	bl	8004bb2 <LL_RCC_GetAHB3Prescaler>
 80058b0:	4603      	mov	r3, r0
 80058b2:	091b      	lsrs	r3, r3, #4
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	4a0c      	ldr	r2, [pc, #48]	; (80058ec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80058ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	0c9c      	lsrs	r4, r3, #18
 80058d0:	f7fe ff80 	bl	80047d4 <HAL_PWREx_GetVoltageRange>
 80058d4:	4603      	mov	r3, r0
 80058d6:	4619      	mov	r1, r3
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 f80b 	bl	80058f4 <RCC_SetFlashLatency>
 80058de:	4603      	mov	r3, r0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}
 80058e8:	08011560 	.word	0x08011560
 80058ec:	08011500 	.word	0x08011500
 80058f0:	431bde83 	.word	0x431bde83

080058f4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08e      	sub	sp, #56	; 0x38
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80058fe:	4a3a      	ldr	r2, [pc, #232]	; (80059e8 <RCC_SetFlashLatency+0xf4>)
 8005900:	f107 0320 	add.w	r3, r7, #32
 8005904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005908:	6018      	str	r0, [r3, #0]
 800590a:	3304      	adds	r3, #4
 800590c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800590e:	4a37      	ldr	r2, [pc, #220]	; (80059ec <RCC_SetFlashLatency+0xf8>)
 8005910:	f107 0318 	add.w	r3, r7, #24
 8005914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005918:	6018      	str	r0, [r3, #0]
 800591a:	3304      	adds	r3, #4
 800591c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800591e:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <RCC_SetFlashLatency+0xfc>)
 8005920:	f107 030c 	add.w	r3, r7, #12
 8005924:	ca07      	ldmia	r2, {r0, r1, r2}
 8005926:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800592a:	2300      	movs	r3, #0
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005934:	d11b      	bne.n	800596e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005936:	2300      	movs	r3, #0
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
 800593a:	e014      	b.n	8005966 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	3338      	adds	r3, #56	; 0x38
 8005942:	443b      	add	r3, r7
 8005944:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005948:	461a      	mov	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4293      	cmp	r3, r2
 800594e:	d807      	bhi.n	8005960 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	3338      	adds	r3, #56	; 0x38
 8005956:	443b      	add	r3, r7
 8005958:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800595e:	e021      	b.n	80059a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	3301      	adds	r3, #1
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b02      	cmp	r3, #2
 800596a:	d9e7      	bls.n	800593c <RCC_SetFlashLatency+0x48>
 800596c:	e01a      	b.n	80059a4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800596e:	2300      	movs	r3, #0
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005972:	e014      	b.n	800599e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	3338      	adds	r3, #56	; 0x38
 800597a:	443b      	add	r3, r7
 800597c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005980:	461a      	mov	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4293      	cmp	r3, r2
 8005986:	d807      	bhi.n	8005998 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	3338      	adds	r3, #56	; 0x38
 800598e:	443b      	add	r3, r7
 8005990:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005996:	e005      	b.n	80059a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	3301      	adds	r3, #1
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d9e7      	bls.n	8005974 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <RCC_SetFlashLatency+0x100>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f023 0207 	bic.w	r2, r3, #7
 80059ac:	4911      	ldr	r1, [pc, #68]	; (80059f4 <RCC_SetFlashLatency+0x100>)
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b0:	4313      	orrs	r3, r2
 80059b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059b4:	f7fd fb72 	bl	800309c <HAL_GetTick>
 80059b8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80059ba:	e008      	b.n	80059ce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059bc:	f7fd fb6e 	bl	800309c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e007      	b.n	80059de <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <RCC_SetFlashLatency+0x100>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1ef      	bne.n	80059bc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3738      	adds	r7, #56	; 0x38
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	0801146c 	.word	0x0801146c
 80059ec:	08011474 	.word	0x08011474
 80059f0:	0801147c 	.word	0x0801147c
 80059f4:	58004000 	.word	0x58004000

080059f8 <LL_RCC_LSE_IsReady>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d101      	bne.n	8005a10 <LL_RCC_LSE_IsReady+0x18>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <LL_RCC_LSE_IsReady+0x1a>
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <LL_RCC_SetUSARTClockSource>:
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	401a      	ands	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr

08005a4a <LL_RCC_SetI2SClockSource>:
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_SetLPUARTClockSource>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_SetI2CClockSource>:
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	401a      	ands	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <LL_RCC_SetLPTIMClockSource>:
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <LL_RCC_SetRNGClockSource>:
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <LL_RCC_SetADCClockSource>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <LL_RCC_SetRTCClockSource>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <LL_RCC_GetRTCClockSource>:
{
 8005b86:	b480      	push	{r7}
 8005b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <LL_RCC_ForceBackupDomainReset>:
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bb6:	bf00      	nop
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_ReleaseBackupDomainReset>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bd6:	bf00      	nop
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005bec:	2300      	movs	r3, #0
 8005bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d058      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005c00:	f7fe fdda 	bl	80047b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c04:	f7fd fa4a 	bl	800309c <HAL_GetTick>
 8005c08:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005c0a:	e009      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0c:	f7fd fa46 	bl	800309c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d902      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c1e:	e006      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005c20:	4b7b      	ldr	r3, [pc, #492]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2c:	d1ee      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d13c      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005c34:	f7ff ffa7 	bl	8005b86 <LL_RCC_GetRTCClockSource>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d00f      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c50:	f7ff ffa5 	bl	8005b9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c54:	f7ff ffb3 	bl	8005bbe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d014      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fa16 	bl	800309c <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005c72:	e00b      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fd fa12 	bl	800309c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d902      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	74fb      	strb	r3, [r7, #19]
            break;
 8005c8a:	e004      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005c8c:	f7ff feb4 	bl	80059f8 <LL_RCC_LSE_IsReady>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d1ee      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff5b 	bl	8005b5c <LL_RCC_SetRTCClockSource>
 8005ca6:	e004      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	74bb      	strb	r3, [r7, #18]
 8005cac:	e001      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fea9 	bl	8005a1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fe9e 	bl	8005a1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fec0 	bl	8005a74 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff fee6 	bl	8005ad6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fedb 	bl	8005ad6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fed0 	bl	8005ad6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fea9 	bl	8005a9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fe9e 	bl	8005a9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fe93 	bl	8005a9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fe5e 	bl	8005a4a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d107      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005da6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d010      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fea5 	bl	8005b08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fea3 	bl	8005b32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df4:	d107      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e04:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005e06:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58000400 	.word	0x58000400

08005e14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d071      	beq.n	8005f0a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fc fcca 	bl	80027d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005e48:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d051      	beq.n	8005ef8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e54:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e56:	22ca      	movs	r2, #202	; 0xca
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e5c:	2253      	movs	r2, #83	; 0x53
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa51 	bl	8006308 <RTC_EnterInitMode>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d13f      	bne.n	8005ef0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005e70:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	4a27      	ldr	r2, [pc, #156]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e76:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	4319      	orrs	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	430b      	orrs	r3, r1
 8005e94:	491f      	ldr	r1, [pc, #124]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	491b      	ldr	r1, [pc, #108]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	4915      	ldr	r1, [pc, #84]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa54 	bl	8006370 <RTC_ExitInitMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a19      	ldr	r1, [r3, #32]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	4319      	orrs	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	490a      	ldr	r1, [pc, #40]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <HAL_RTC_Init+0x100>)
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ef6:	e001      	b.n	8005efc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40002800 	.word	0x40002800

08005f18 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_RTC_SetTime+0x1a>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e088      	b.n	8006044 <HAL_RTC_SetTime+0x12c>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f42:	4b42      	ldr	r3, [pc, #264]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005f44:	22ca      	movs	r2, #202	; 0xca
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24
 8005f48:	4b40      	ldr	r3, [pc, #256]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005f4a:	2253      	movs	r2, #83	; 0x53
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f9da 	bl	8006308 <RTC_EnterInitMode>
 8005f54:	4603      	mov	r3, r0
 8005f56:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d15e      	bne.n	800601c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6a:	d057      	beq.n	800601c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d125      	bne.n	8005fbe <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005f72:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fa2f 	bl	80063ec <RTC_ByteToBcd2>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fa28 	bl	80063ec <RTC_ByteToBcd2>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fa0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	789b      	ldrb	r3, [r3, #2]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fa20 	bl	80063ec <RTC_ByteToBcd2>
 8005fac:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fae:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	78db      	ldrb	r3, [r3, #3]
 8005fb6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e017      	b.n	8005fee <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fdc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fe2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ff6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ffa:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_RTC_SetTime+0x134>)
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	4a12      	ldr	r2, [pc, #72]	; (800604c <HAL_RTC_SetTime+0x134>)
 8006002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006006:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <HAL_RTC_SetTime+0x134>)
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	68d9      	ldr	r1, [r3, #12]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	430b      	orrs	r3, r1
 8006016:	490d      	ldr	r1, [pc, #52]	; (800604c <HAL_RTC_SetTime+0x134>)
 8006018:	4313      	orrs	r3, r2
 800601a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f9a7 	bl	8006370 <RTC_ExitInitMode>
 8006022:	4603      	mov	r3, r0
 8006024:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006026:	4b09      	ldr	r3, [pc, #36]	; (800604c <HAL_RTC_SetTime+0x134>)
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800602c:	7cfb      	ldrb	r3, [r7, #19]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8006042:	7cfb      	ldrb	r3, [r7, #19]
}
 8006044:	4618      	mov	r0, r3
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}
 800604c:	40002800 	.word	0x40002800

08006050 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <HAL_RTC_GetTime+0xc0>)
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006064:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <HAL_RTC_GetTime+0xc0>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006070:	d049      	beq.n	8006106 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8006072:	4b27      	ldr	r3, [pc, #156]	; (8006110 <HAL_RTC_GetTime+0xc0>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800607e:	4b24      	ldr	r3, [pc, #144]	; (8006110 <HAL_RTC_GetTime+0xc0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006086:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800608a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006096:	b2da      	uxtb	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	0d9b      	lsrs	r3, r3, #22
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d11a      	bne.n	8006106 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 f9a8 	bl	800642a <RTC_Bcd2ToByte>
 80060da:	4603      	mov	r3, r0
 80060dc:	461a      	mov	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f99f 	bl	800642a <RTC_Bcd2ToByte>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	789b      	ldrb	r3, [r3, #2]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f996 	bl	800642a <RTC_Bcd2ToByte>
 80060fe:	4603      	mov	r3, r0
 8006100:	461a      	mov	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40002800 	.word	0x40002800

08006114 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_RTC_SetDate+0x1a>
 800612a:	2302      	movs	r3, #2
 800612c:	e071      	b.n	8006212 <HAL_RTC_SetDate+0xfe>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10e      	bne.n	8006162 <HAL_RTC_SetDate+0x4e>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	b2db      	uxtb	r3, r3
 800615a:	330a      	adds	r3, #10
 800615c:	b2da      	uxtb	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11c      	bne.n	80061a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 f93d 	bl	80063ec <RTC_ByteToBcd2>
 8006172:	4603      	mov	r3, r0
 8006174:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f936 	bl	80063ec <RTC_ByteToBcd2>
 8006180:	4603      	mov	r3, r0
 8006182:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006184:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	789b      	ldrb	r3, [r3, #2]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f92e 	bl	80063ec <RTC_ByteToBcd2>
 8006190:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006192:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e00e      	b.n	80061c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80061b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061c0:	4b16      	ldr	r3, [pc, #88]	; (800621c <HAL_RTC_SetDate+0x108>)
 80061c2:	22ca      	movs	r2, #202	; 0xca
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <HAL_RTC_SetDate+0x108>)
 80061c8:	2253      	movs	r2, #83	; 0x53
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f89b 	bl	8006308 <RTC_EnterInitMode>
 80061d2:	4603      	mov	r3, r0
 80061d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80061dc:	4a0f      	ldr	r2, [pc, #60]	; (800621c <HAL_RTC_SetDate+0x108>)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f8c0 	bl	8006370 <RTC_ExitInitMode>
 80061f0:	4603      	mov	r3, r0
 80061f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f4:	4b09      	ldr	r3, [pc, #36]	; (800621c <HAL_RTC_SetDate+0x108>)
 80061f6:	22ff      	movs	r2, #255	; 0xff
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80061fa:	7cfb      	ldrb	r3, [r7, #19]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8006210:	7cfb      	ldrb	r3, [r7, #19]
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	40002800 	.word	0x40002800

08006220 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800622c:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_RTC_GetDate+0x98>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006234:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006238:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2da      	uxtb	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	0b5b      	lsrs	r3, r3, #13
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	b2da      	uxtb	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11a      	bne.n	80062ae <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 f8d4 	bl	800642a <RTC_Bcd2ToByte>
 8006282:	4603      	mov	r3, r0
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f8cb 	bl	800642a <RTC_Bcd2ToByte>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	789b      	ldrb	r3, [r3, #2]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f8c2 	bl	800642a <RTC_Bcd2ToByte>
 80062a6:	4603      	mov	r3, r0
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40002800 	.word	0x40002800

080062bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <HAL_RTC_WaitForSynchro+0x48>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <HAL_RTC_WaitForSynchro+0x48>)
 80062ca:	f023 0320 	bic.w	r3, r3, #32
 80062ce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80062d0:	f7fc fee4 	bl	800309c <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062d6:	e009      	b.n	80062ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062d8:	f7fc fee0 	bl	800309c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e6:	d901      	bls.n	80062ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <HAL_RTC_WaitForSynchro+0x48>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ef      	beq.n	80062d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40002800 	.word	0x40002800

08006308 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <RTC_EnterInitMode+0x64>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d120      	bne.n	8006362 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006320:	4b12      	ldr	r3, [pc, #72]	; (800636c <RTC_EnterInitMode+0x64>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a11      	ldr	r2, [pc, #68]	; (800636c <RTC_EnterInitMode+0x64>)
 8006326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800632c:	f7fc feb6 	bl	800309c <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006332:	e00d      	b.n	8006350 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006334:	f7fc feb2 	bl	800309c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006342:	d905      	bls.n	8006350 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2203      	movs	r2, #3
 800634c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <RTC_EnterInitMode+0x64>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <RTC_EnterInitMode+0x5a>
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d1e8      	bne.n	8006334 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40002800 	.word	0x40002800

08006370 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800637c:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <RTC_ExitInitMode+0x78>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <RTC_ExitInitMode+0x78>)
 8006382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006386:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006388:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <RTC_ExitInitMode+0x78>)
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10c      	bne.n	80063ae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ff91 	bl	80062bc <HAL_RTC_WaitForSynchro>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01e      	beq.n	80063de <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2203      	movs	r2, #3
 80063a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	73fb      	strb	r3, [r7, #15]
 80063ac:	e017      	b.n	80063de <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063ae:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <RTC_ExitInitMode+0x78>)
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <RTC_ExitInitMode+0x78>)
 80063b4:	f023 0320 	bic.w	r3, r3, #32
 80063b8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff ff7e 	bl	80062bc <HAL_RTC_WaitForSynchro>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <RTC_ExitInitMode+0x78>)
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <RTC_ExitInitMode+0x78>)
 80063d8:	f043 0320 	orr.w	r3, r3, #32
 80063dc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40002800 	.word	0x40002800

080063ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80063fe:	e005      	b.n	800640c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	3b0a      	subs	r3, #10
 800640a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	2b09      	cmp	r3, #9
 8006410:	d8f6      	bhi.n	8006400 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	b2da      	uxtb	r2, r3
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	4313      	orrs	r3, r2
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	091b      	lsrs	r3, r3, #4
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4413      	add	r3, r2
 8006454:	b2db      	uxtb	r3, r3
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e0c6      	b.n	8006600 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d108      	bne.n	800648c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006482:	d009      	beq.n	8006498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	61da      	str	r2, [r3, #28]
 800648a:	e005      	b.n	8006498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fc fa2b 	bl	8002908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d2:	d902      	bls.n	80064da <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e002      	b.n	80064e0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064e8:	d007      	beq.n	80064fa <HAL_SPI_Init+0x9a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	ea42 0103 	orr.w	r1, r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006558:	d11b      	bne.n	8006592 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800656a:	d903      	bls.n	8006574 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
 8006572:	e002      	b.n	800657a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	2b02      	cmp	r3, #2
 8006580:	d107      	bne.n	8006592 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006590:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	0c1b      	lsrs	r3, r3, #16
 8006598:	f003 0204 	and.w	r2, r3, #4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065b8:	ea42 0103 	orr.w	r1, r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d2:	d105      	bne.n	80065e0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b292      	uxth	r2, r2
 80065de:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_SPI_Transmit+0x22>
 8006626:	2302      	movs	r3, #2
 8006628:	e17a      	b.n	8006920 <HAL_SPI_Transmit+0x318>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006632:	f7fc fd33 	bl	800309c <HAL_GetTick>
 8006636:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d002      	beq.n	800664e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006648:	2302      	movs	r3, #2
 800664a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800664c:	e15f      	b.n	800690e <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_Transmit+0x52>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800665e:	e156      	b.n	800690e <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2203      	movs	r2, #3
 8006664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d10f      	bne.n	80066cc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ca:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d10f      	bne.n	80066f6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d007      	beq.n	8006714 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800671c:	d94b      	bls.n	80067b6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_Transmit+0x124>
 8006726:	8afb      	ldrh	r3, [r7, #22]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d13e      	bne.n	80067aa <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006750:	e02b      	b.n	80067aa <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d112      	bne.n	8006786 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	881a      	ldrh	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	1c9a      	adds	r2, r3, #2
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006784:	e011      	b.n	80067aa <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006786:	f7fc fc89 	bl	800309c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d803      	bhi.n	800679e <HAL_SPI_Transmit+0x196>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679c:	d102      	bne.n	80067a4 <HAL_SPI_Transmit+0x19c>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067a8:	e0b1      	b.n	800690e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ce      	bne.n	8006752 <HAL_SPI_Transmit+0x14a>
 80067b4:	e07c      	b.n	80068b0 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_Transmit+0x1bc>
 80067be:	8afb      	ldrh	r3, [r7, #22]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d170      	bne.n	80068a6 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d912      	bls.n	80067f4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	881a      	ldrh	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	1c9a      	adds	r2, r3, #2
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b02      	subs	r3, #2
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067f2:	e058      	b.n	80068a6 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800681a:	e044      	b.n	80068a6 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b02      	cmp	r3, #2
 8006828:	d12b      	bne.n	8006882 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d912      	bls.n	800685a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	881a      	ldrh	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	1c9a      	adds	r2, r3, #2
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b02      	subs	r3, #2
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006858:	e025      	b.n	80068a6 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	7812      	ldrb	r2, [r2, #0]
 8006866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006880:	e011      	b.n	80068a6 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006882:	f7fc fc0b 	bl	800309c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d803      	bhi.n	800689a <HAL_SPI_Transmit+0x292>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006898:	d102      	bne.n	80068a0 <HAL_SPI_Transmit+0x298>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d102      	bne.n	80068a6 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068a4:	e033      	b.n	800690e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1b5      	bne.n	800681c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b8:	d107      	bne.n	80068ca <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068c8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fc2c 	bl	800712c <SPI_EndRxTxTransaction>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e000      	b.n	800690e <HAL_SPI_Transmit+0x306>
  }

error:
 800690c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800691e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b092      	sub	sp, #72	; 0x48
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800693e:	2301      	movs	r3, #1
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x2e>
 8006952:	2302      	movs	r3, #2
 8006954:	e2c8      	b.n	8006ee8 <HAL_SPI_TransmitReceive+0x5c0>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800695e:	f7fc fb9d 	bl	800309c <HAL_GetTick>
 8006962:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800696a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8006978:	887b      	ldrh	r3, [r7, #2]
 800697a:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800698c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006990:	2b01      	cmp	r3, #1
 8006992:	d00f      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0x8c>
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800699a:	d107      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x84>
 80069a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d003      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
 80069ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80069b2:	e28f      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_SPI_TransmitReceive+0x9e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_SPI_TransmitReceive+0x9e>
 80069c0:	887b      	ldrh	r3, [r7, #2]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80069cc:	e282      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d003      	beq.n	80069e2 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2205      	movs	r2, #5
 80069de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	887a      	ldrh	r2, [r7, #2]
 80069f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	887a      	ldrh	r2, [r7, #2]
 8006a0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a24:	d10f      	bne.n	8006a46 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a44:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a4e:	d802      	bhi.n	8006a56 <HAL_SPI_TransmitReceive+0x12e>
 8006a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d908      	bls.n	8006a68 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	e007      	b.n	8006a78 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a76:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d007      	beq.n	8006a96 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a9e:	f240 80a4 	bls.w	8006bea <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_SPI_TransmitReceive+0x18a>
 8006aaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f040 808e 	bne.w	8006bce <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	881a      	ldrh	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad6:	e07a      	b.n	8006bce <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d13f      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x23e>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d03a      	beq.n	8006b66 <HAL_SPI_TransmitReceive+0x23e>
 8006af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d137      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	881a      	ldrh	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d11e      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x23e>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b30:	d119      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10c      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x22e>
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b54:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b64:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d11c      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x286>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d016      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	b292      	uxth	r2, r2
 8006b8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	1c9a      	adds	r2, r3, #2
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006baa:	2301      	movs	r3, #1
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bae:	f7fc fa75 	bl	800309c <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d807      	bhi.n	8006bce <HAL_SPI_TransmitReceive+0x2a6>
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc4:	d003      	beq.n	8006bce <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006bcc:	e182      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f af7f 	bne.w	8006ad8 <HAL_SPI_TransmitReceive+0x1b0>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f47f af78 	bne.w	8006ad8 <HAL_SPI_TransmitReceive+0x1b0>
 8006be8:	e103      	b.n	8006df2 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_SPI_TransmitReceive+0x2d2>
 8006bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	f040 80ef 	bne.w	8006dd8 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d912      	bls.n	8006c2a <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	881a      	ldrh	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	1c9a      	adds	r2, r3, #2
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b02      	subs	r3, #2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c28:	e0d6      	b.n	8006dd8 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	7812      	ldrb	r2, [r2, #0]
 8006c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c50:	e0c2      	b.n	8006dd8 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d158      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x3ea>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d053      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x3ea>
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d150      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d912      	bls.n	8006ca0 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b02      	subs	r3, #2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c9e:	e012      	b.n	8006cc6 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d11e      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x3ea>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cdc:	d119      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10c      	bne.n	8006d02 <HAL_SPI_TransmitReceive+0x3da>
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d00:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d10:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d148      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x48a>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d042      	beq.n	8006db2 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d923      	bls.n	8006d80 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	b292      	uxth	r2, r2
 8006d44:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b02      	subs	r3, #2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d81f      	bhi.n	8006dae <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	e016      	b.n	8006dae <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f103 020c 	add.w	r2, r3, #12
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dae:	2301      	movs	r3, #1
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006db2:	f7fc f973 	bl	800309c <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d803      	bhi.n	8006dca <HAL_SPI_TransmitReceive+0x4a2>
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc8:	d102      	bne.n	8006dd0 <HAL_SPI_TransmitReceive+0x4a8>
 8006dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006dd6:	e07d      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f47f af37 	bne.w	8006c52 <HAL_SPI_TransmitReceive+0x32a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f af30 	bne.w	8006c52 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dfa:	d146      	bne.n	8006e8a <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e02:	2201      	movs	r2, #1
 8006e04:	2101      	movs	r1, #1
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f872 	bl	8006ef0 <SPI_WaitFlagStateUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e16:	f043 0202 	orr.w	r2, r3, #2
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8006e24:	e056      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e2e:	d105      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	e026      	b.n	8006e8a <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d119      	bne.n	8006e8a <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	2101      	movs	r1, #1
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f845 	bl	8006ef0 <SPI_WaitFlagStateUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d009      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e70:	f043 0202 	orr.w	r2, r3, #2
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006e7e:	e029      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d10d      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9c:	f043 0202 	orr.w	r2, r3, #2
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006eac:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f937 	bl	800712c <SPI_EndRxTxTransaction>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d006      	beq.n	8006ed2 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	661a      	str	r2, [r3, #96]	; 0x60
 8006ed0:	e000      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8006ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ee4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3740      	adds	r7, #64	; 0x40
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f00:	f7fc f8cc 	bl	800309c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f10:	f7fc f8c4 	bl	800309c <HAL_GetTick>
 8006f14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f16:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	015b      	lsls	r3, r3, #5
 8006f1c:	0d1b      	lsrs	r3, r3, #20
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f26:	e054      	b.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f2e:	d050      	beq.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f30:	f7fc f8b4 	bl	800309c <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d902      	bls.n	8006f46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d13d      	bne.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f5e:	d111      	bne.n	8006f84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f68:	d004      	beq.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f72:	d107      	bne.n	8006f84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8c:	d10f      	bne.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e017      	b.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	bf0c      	ite	eq
 8006fe2:	2301      	moveq	r3, #1
 8006fe4:	2300      	movne	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d19b      	bne.n	8006f28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000004 	.word	0x20000004

08007000 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007012:	f7fc f843 	bl	800309c <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	4413      	add	r3, r2
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007022:	f7fc f83b 	bl	800309c <HAL_GetTick>
 8007026:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	330c      	adds	r3, #12
 800702e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007030:	4b3d      	ldr	r3, [pc, #244]	; (8007128 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	00da      	lsls	r2, r3, #3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	0d1b      	lsrs	r3, r3, #20
 8007040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007048:	e060      	b.n	800710c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007050:	d107      	bne.n	8007062 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007060:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007068:	d050      	beq.n	800710c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800706a:	f7fc f817 	bl	800309c <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007076:	429a      	cmp	r2, r3
 8007078:	d902      	bls.n	8007080 <SPI_WaitFifoStateUntilTimeout+0x80>
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d13d      	bne.n	80070fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800708e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007098:	d111      	bne.n	80070be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a2:	d004      	beq.n	80070ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ac:	d107      	bne.n	80070be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c6:	d10f      	bne.n	80070e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e010      	b.n	800711e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	3b01      	subs	r3, #1
 800710a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	429a      	cmp	r2, r3
 800711a:	d196      	bne.n	800704a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000004 	.word	0x20000004

0800712c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af02      	add	r7, sp, #8
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2200      	movs	r2, #0
 8007140:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff ff5b 	bl	8007000 <SPI_WaitFifoStateUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e027      	b.n	80071b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	2180      	movs	r1, #128	; 0x80
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7ff fec0 	bl	8006ef0 <SPI_WaitFlagStateUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717a:	f043 0220 	orr.w	r2, r3, #32
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e014      	b.n	80071b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff ff34 	bl	8007000 <SPI_WaitFifoStateUntilTimeout>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a2:	f043 0220 	orr.w	r2, r3, #32
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e000      	b.n	80071b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e049      	b.n	800725e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fb fdbc 	bl	8002d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f000 f952 	bl	80074a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e049      	b.n	800730c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f841 	bl	8007314 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f000 f8fb 	bl	80074a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr
	...

08007328 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007342:	2302      	movs	r3, #2
 8007344:	e066      	b.n	8007414 <HAL_TIM_OC_ConfigChannel+0xec>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b14      	cmp	r3, #20
 8007352:	d857      	bhi.n	8007404 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	080073b1 	.word	0x080073b1
 8007360:	08007405 	.word	0x08007405
 8007364:	08007405 	.word	0x08007405
 8007368:	08007405 	.word	0x08007405
 800736c:	080073bf 	.word	0x080073bf
 8007370:	08007405 	.word	0x08007405
 8007374:	08007405 	.word	0x08007405
 8007378:	08007405 	.word	0x08007405
 800737c:	080073cd 	.word	0x080073cd
 8007380:	08007405 	.word	0x08007405
 8007384:	08007405 	.word	0x08007405
 8007388:	08007405 	.word	0x08007405
 800738c:	080073db 	.word	0x080073db
 8007390:	08007405 	.word	0x08007405
 8007394:	08007405 	.word	0x08007405
 8007398:	08007405 	.word	0x08007405
 800739c:	080073e9 	.word	0x080073e9
 80073a0:	08007405 	.word	0x08007405
 80073a4:	08007405 	.word	0x08007405
 80073a8:	08007405 	.word	0x08007405
 80073ac:	080073f7 	.word	0x080073f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 f8d4 	bl	8007564 <TIM_OC1_SetConfig>
      break;
 80073bc:	e025      	b.n	800740a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f949 	bl	800765c <TIM_OC2_SetConfig>
      break;
 80073ca:	e01e      	b.n	800740a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 f9ba 	bl	800774c <TIM_OC3_SetConfig>
      break;
 80073d8:	e017      	b.n	800740a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fa2b 	bl	800783c <TIM_OC4_SetConfig>
      break;
 80073e6:	e010      	b.n	800740a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fa80 	bl	80078f4 <TIM_OC5_SetConfig>
      break;
 80073f4:	e009      	b.n	800740a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fad1 	bl	80079a4 <TIM_OC6_SetConfig>
      break;
 8007402:	e002      	b.n	800740a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	75fb      	strb	r3, [r7, #23]
      break;
 8007408:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007430:	2302      	movs	r3, #2
 8007432:	e031      	b.n	8007498 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fb04 	bl	8007a54 <TIM_SlaveTimer_SetConfig>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e018      	b.n	8007498 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007474:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007484:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a29      	ldr	r2, [pc, #164]	; (8007558 <TIM_Base_SetConfig+0xb8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_Base_SetConfig+0x20>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074be:	d108      	bne.n	80074d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a20      	ldr	r2, [pc, #128]	; (8007558 <TIM_Base_SetConfig+0xb8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0x52>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x52>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1d      	ldr	r2, [pc, #116]	; (800755c <TIM_Base_SetConfig+0xbc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x52>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <TIM_Base_SetConfig+0xc0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <TIM_Base_SetConfig+0xb8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d007      	beq.n	8007540 <TIM_Base_SetConfig+0xa0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0a      	ldr	r2, [pc, #40]	; (800755c <TIM_Base_SetConfig+0xbc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_Base_SetConfig+0xa0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a09      	ldr	r2, [pc, #36]	; (8007560 <TIM_Base_SetConfig+0xc0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d103      	bne.n	8007548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	615a      	str	r2, [r3, #20]
}
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr
 8007558:	40012c00 	.word	0x40012c00
 800755c:	40014400 	.word	0x40014400
 8007560:	40014800 	.word	0x40014800

08007564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0302 	bic.w	r3, r3, #2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a24      	ldr	r2, [pc, #144]	; (8007650 <TIM_OC1_SetConfig+0xec>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d007      	beq.n	80075d4 <TIM_OC1_SetConfig+0x70>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a23      	ldr	r2, [pc, #140]	; (8007654 <TIM_OC1_SetConfig+0xf0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_OC1_SetConfig+0x70>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a22      	ldr	r2, [pc, #136]	; (8007658 <TIM_OC1_SetConfig+0xf4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d10c      	bne.n	80075ee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 0308 	bic.w	r3, r3, #8
 80075da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f023 0304 	bic.w	r3, r3, #4
 80075ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a17      	ldr	r2, [pc, #92]	; (8007650 <TIM_OC1_SetConfig+0xec>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d007      	beq.n	8007606 <TIM_OC1_SetConfig+0xa2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a17      	ldr	r2, [pc, #92]	; (8007658 <TIM_OC1_SetConfig+0xf4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d003      	beq.n	8007606 <TIM_OC1_SetConfig+0xa2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a14      	ldr	r2, [pc, #80]	; (8007654 <TIM_OC1_SetConfig+0xf0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d111      	bne.n	800762a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800760c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	621a      	str	r2, [r3, #32]
}
 8007644:	bf00      	nop
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40012c00 	.word	0x40012c00
 8007654:	40014800 	.word	0x40014800
 8007658:	40014400 	.word	0x40014400

0800765c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f023 0210 	bic.w	r2, r3, #16
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0320 	bic.w	r3, r3, #32
 80076aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a21      	ldr	r2, [pc, #132]	; (8007740 <TIM_OC2_SetConfig+0xe4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10d      	bne.n	80076dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a18      	ldr	r2, [pc, #96]	; (8007740 <TIM_OC2_SetConfig+0xe4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d007      	beq.n	80076f4 <TIM_OC2_SetConfig+0x98>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a17      	ldr	r2, [pc, #92]	; (8007744 <TIM_OC2_SetConfig+0xe8>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_OC2_SetConfig+0x98>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a16      	ldr	r2, [pc, #88]	; (8007748 <TIM_OC2_SetConfig+0xec>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d113      	bne.n	800771c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	621a      	str	r2, [r3, #32]
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr
 8007740:	40012c00 	.word	0x40012c00
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a21      	ldr	r2, [pc, #132]	; (8007830 <TIM_OC3_SetConfig+0xe4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10d      	bne.n	80077ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <TIM_OC3_SetConfig+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d007      	beq.n	80077e2 <TIM_OC3_SetConfig+0x96>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a17      	ldr	r2, [pc, #92]	; (8007834 <TIM_OC3_SetConfig+0xe8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d003      	beq.n	80077e2 <TIM_OC3_SetConfig+0x96>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a16      	ldr	r2, [pc, #88]	; (8007838 <TIM_OC3_SetConfig+0xec>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d113      	bne.n	800780a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	621a      	str	r2, [r3, #32]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40012c00 	.word	0x40012c00
 8007834:	40014400 	.word	0x40014400
 8007838:	40014800 	.word	0x40014800

0800783c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800788a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	031b      	lsls	r3, r3, #12
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <TIM_OC4_SetConfig+0xac>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_OC4_SetConfig+0x74>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a12      	ldr	r2, [pc, #72]	; (80078ec <TIM_OC4_SetConfig+0xb0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_OC4_SetConfig+0x74>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <TIM_OC4_SetConfig+0xb4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d109      	bne.n	80078c4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	019b      	lsls	r3, r3, #6
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr
 80078e8:	40012c00 	.word	0x40012c00
 80078ec:	40014400 	.word	0x40014400
 80078f0:	40014800 	.word	0x40014800

080078f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	041b      	lsls	r3, r3, #16
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a13      	ldr	r2, [pc, #76]	; (8007998 <TIM_OC5_SetConfig+0xa4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d007      	beq.n	800795e <TIM_OC5_SetConfig+0x6a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a12      	ldr	r2, [pc, #72]	; (800799c <TIM_OC5_SetConfig+0xa8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d003      	beq.n	800795e <TIM_OC5_SetConfig+0x6a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a11      	ldr	r2, [pc, #68]	; (80079a0 <TIM_OC5_SetConfig+0xac>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d109      	bne.n	8007972 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800

080079a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	051b      	lsls	r3, r3, #20
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <TIM_OC6_SetConfig+0xa4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d007      	beq.n	8007a10 <TIM_OC6_SetConfig+0x6c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <TIM_OC6_SetConfig+0xa8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_OC6_SetConfig+0x6c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a11      	ldr	r2, [pc, #68]	; (8007a50 <TIM_OC6_SetConfig+0xac>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d109      	bne.n	8007a24 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	029b      	lsls	r3, r3, #10
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800

08007a54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b70      	cmp	r3, #112	; 0x70
 8007aa4:	d01a      	beq.n	8007adc <TIM_SlaveTimer_SetConfig+0x88>
 8007aa6:	2b70      	cmp	r3, #112	; 0x70
 8007aa8:	d860      	bhi.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
 8007aaa:	2b60      	cmp	r3, #96	; 0x60
 8007aac:	d054      	beq.n	8007b58 <TIM_SlaveTimer_SetConfig+0x104>
 8007aae:	2b60      	cmp	r3, #96	; 0x60
 8007ab0:	d85c      	bhi.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
 8007ab2:	2b50      	cmp	r3, #80	; 0x50
 8007ab4:	d046      	beq.n	8007b44 <TIM_SlaveTimer_SetConfig+0xf0>
 8007ab6:	2b50      	cmp	r3, #80	; 0x50
 8007ab8:	d858      	bhi.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d019      	beq.n	8007af2 <TIM_SlaveTimer_SetConfig+0x9e>
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	d854      	bhi.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
 8007ac2:	2b30      	cmp	r3, #48	; 0x30
 8007ac4:	d055      	beq.n	8007b72 <TIM_SlaveTimer_SetConfig+0x11e>
 8007ac6:	2b30      	cmp	r3, #48	; 0x30
 8007ac8:	d850      	bhi.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d051      	beq.n	8007b72 <TIM_SlaveTimer_SetConfig+0x11e>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d84c      	bhi.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d04d      	beq.n	8007b72 <TIM_SlaveTimer_SetConfig+0x11e>
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d04b      	beq.n	8007b72 <TIM_SlaveTimer_SetConfig+0x11e>
 8007ada:	e047      	b.n	8007b6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007aec:	f000 f8a4 	bl	8007c38 <TIM_ETR_SetConfig>
      break;
 8007af0:	e040      	b.n	8007b74 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b05      	cmp	r3, #5
 8007af8:	d101      	bne.n	8007afe <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e03b      	b.n	8007b76 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a1a      	ldr	r2, [r3, #32]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0201 	bic.w	r2, r2, #1
 8007b14:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b24:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
      break;
 8007b42:	e017      	b.n	8007b74 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b50:	461a      	mov	r2, r3
 8007b52:	f000 f814 	bl	8007b7e <TIM_TI1_ConfigInputStage>
      break;
 8007b56:	e00d      	b.n	8007b74 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b64:	461a      	mov	r2, r3
 8007b66:	f000 f838 	bl	8007bda <TIM_TI2_ConfigInputStage>
      break;
 8007b6a:	e003      	b.n	8007b74 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	e000      	b.n	8007b74 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 8007b72:	bf00      	nop
  }

  return status;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b087      	sub	sp, #28
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f023 0201 	bic.w	r2, r3, #1
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f023 030a 	bic.w	r3, r3, #10
 8007bba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	621a      	str	r2, [r3, #32]
}
 8007bd0:	bf00      	nop
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr

08007bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b087      	sub	sp, #28
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	f023 0210 	bic.w	r2, r3, #16
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	031b      	lsls	r3, r3, #12
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	021a      	lsls	r2, r3, #8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	609a      	str	r2, [r3, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e04a      	b.n	8007d26 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1e      	ldr	r2, [pc, #120]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d108      	bne.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a11      	ldr	r2, [pc, #68]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d10c      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	40012c00 	.word	0x40012c00

08007d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e078      	b.n	8007e42 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d106      	bne.n	8007de2 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d121      	bne.n	8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	051b      	lsls	r3, r3, #20
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a0b      	ldr	r2, [pc, #44]	; (8007e4c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d106      	bne.n	8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bc80      	pop	{r7}
 8007e4a:	4770      	bx	lr
 8007e4c:	40012c00 	.word	0x40012c00

08007e50 <LL_RCC_GetUSARTClockSource>:
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	401a      	ands	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	041b      	lsls	r3, r3, #16
 8007e68:	4313      	orrs	r3, r2
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <LL_RCC_GetLPUARTClockSource>:
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4013      	ands	r3, r2
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr

08007e92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e042      	b.n	8007f2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fb f80c 	bl	8002ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	; 0x24
 8007ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fbbb 	bl	8008650 <UART_SetConfig>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e022      	b.n	8007f2a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fe23 	bl	8008b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fea9 	bl	8008c7a <UART_CheckIdleState>
 8007f28:	4603      	mov	r3, r0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d137      	bne.n	8007fbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_UART_Receive_IT+0x24>
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e030      	b.n	8007fbe <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <HAL_UART_Receive_IT+0x94>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01f      	beq.n	8007fac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d018      	beq.n	8007fac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	613b      	str	r3, [r7, #16]
   return(result);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	623b      	str	r3, [r7, #32]
 8007f9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	69f9      	ldr	r1, [r7, #28]
 8007f9e:	6a3a      	ldr	r2, [r7, #32]
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 ff78 	bl	8008ea8 <UART_Start_Receive_IT>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	e000      	b.n	8007fbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
  }
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3728      	adds	r7, #40	; 0x28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40008000 	.word	0x40008000

08007fcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b0ba      	sub	sp, #232	; 0xe8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ff2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ff6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11b      	bne.n	8008040 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d015      	beq.n	8008040 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008018:	f003 0320 	and.w	r3, r3, #32
 800801c:	2b00      	cmp	r3, #0
 800801e:	d105      	bne.n	800802c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 82e3 	beq.w	80085fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      }
      return;
 800803e:	e2dd      	b.n	80085fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8123 	beq.w	8008290 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800804a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800804e:	4b8d      	ldr	r3, [pc, #564]	; (8008284 <HAL_UART_IRQHandler+0x2b8>)
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d106      	bne.n	8008064 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008056:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800805a:	4b8b      	ldr	r3, [pc, #556]	; (8008288 <HAL_UART_IRQHandler+0x2bc>)
 800805c:	4013      	ands	r3, r2
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8116 	beq.w	8008290 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d011      	beq.n	8008094 <HAL_UART_IRQHandler+0xc8>
 8008070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2201      	movs	r2, #1
 8008082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808a:	f043 0201 	orr.w	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d011      	beq.n	80080c4 <HAL_UART_IRQHandler+0xf8>
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2202      	movs	r2, #2
 80080b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ba:	f043 0204 	orr.w	r2, r3, #4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d011      	beq.n	80080f4 <HAL_UART_IRQHandler+0x128>
 80080d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2204      	movs	r2, #4
 80080e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ea:	f043 0202 	orr.w	r2, r3, #2
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800810c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008110:	4b5c      	ldr	r3, [pc, #368]	; (8008284 <HAL_UART_IRQHandler+0x2b8>)
 8008112:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2208      	movs	r2, #8
 800811e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008126:	f043 0208 	orr.w	r2, r3, #8
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008138:	2b00      	cmp	r3, #0
 800813a:	d012      	beq.n	8008162 <HAL_UART_IRQHandler+0x196>
 800813c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008158:	f043 0220 	orr.w	r2, r3, #32
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8249 	beq.w	8008600 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d013      	beq.n	80081a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800817a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d105      	bne.n	8008192 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800818a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d005      	beq.n	80081c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d054      	beq.n	8008270 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 ff8e 	bl	80090e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d6:	2b40      	cmp	r3, #64	; 0x40
 80081d8:	d146      	bne.n	8008268 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3308      	adds	r3, #8
 80081e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800820a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800821e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1d9      	bne.n	80081da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008236:	4a15      	ldr	r2, [pc, #84]	; (800828c <HAL_UART_IRQHandler+0x2c0>)
 8008238:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008240:	4618      	mov	r0, r3
 8008242:	f7fb f8d0 	bl	80033e6 <HAL_DMA_Abort_IT>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d019      	beq.n	8008280 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800825a:	4610      	mov	r0, r2
 800825c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825e:	e00f      	b.n	8008280 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9e0 	bl	8008626 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008266:	e00b      	b.n	8008280 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9dc 	bl	8008626 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826e:	e007      	b.n	8008280 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f9d8 	bl	8008626 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800827e:	e1bf      	b.n	8008600 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	bf00      	nop
    return;
 8008282:	e1bd      	b.n	8008600 <HAL_UART_IRQHandler+0x634>
 8008284:	10000001 	.word	0x10000001
 8008288:	04000120 	.word	0x04000120
 800828c:	080091b3 	.word	0x080091b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008294:	2b01      	cmp	r3, #1
 8008296:	f040 8153 	bne.w	8008540 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 814c 	beq.w	8008540 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8145 	beq.w	8008540 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2210      	movs	r2, #16
 80082bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	f040 80bb 	bne.w	8008444 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 818f 	beq.w	8008604 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082f0:	429a      	cmp	r2, r3
 80082f2:	f080 8187 	bcs.w	8008604 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	f040 8087 	bne.w	8008422 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800832c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800833e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008342:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800834a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1da      	bne.n	8008314 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800836e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008382:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008386:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800838a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e1      	bne.n	800835e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e3      	bne.n	800839a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f0:	f023 0310 	bic.w	r3, r3, #16
 80083f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008402:	65bb      	str	r3, [r7, #88]	; 0x58
 8008404:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e4      	bne.n	80083e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800841c:	4618      	mov	r0, r3
 800841e:	f7fa ff84 	bl	800332a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008434:	b29b      	uxth	r3, r3
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	b29b      	uxth	r3, r3
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f8fb 	bl	8008638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008442:	e0df      	b.n	8008604 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008450:	b29b      	uxth	r3, r3
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80d1 	beq.w	8008608 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80cc 	beq.w	8008608 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008492:	647b      	str	r3, [r7, #68]	; 0x44
 8008494:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e4      	bne.n	8008470 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3308      	adds	r3, #8
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	623b      	str	r3, [r7, #32]
   return(result);
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084ce:	633a      	str	r2, [r7, #48]	; 0x30
 80084d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e1      	bne.n	80084a6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	60fb      	str	r3, [r7, #12]
   return(result);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0310 	bic.w	r3, r3, #16
 800850a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	69b9      	ldr	r1, [r7, #24]
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	617b      	str	r3, [r7, #20]
   return(result);
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e4      	bne.n	80084f6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f87d 	bl	8008638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800853e:	e063      	b.n	8008608 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00e      	beq.n	800856a <HAL_UART_IRQHandler+0x59e>
 800854c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 fb82 	bl	8009c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008568:	e051      	b.n	800860e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800856a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d014      	beq.n	80085a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d008      	beq.n	80085a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008592:	2b00      	cmp	r3, #0
 8008594:	d03a      	beq.n	800860c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
    }
    return;
 800859e:	e035      	b.n	800860c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d009      	beq.n	80085c0 <HAL_UART_IRQHandler+0x5f4>
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fe10 	bl	80091de <UART_EndTransmit_IT>
    return;
 80085be:	e026      	b.n	800860e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <HAL_UART_IRQHandler+0x614>
 80085cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 fb59 	bl	8009c90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085de:	e016      	b.n	800860e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d010      	beq.n	800860e <HAL_UART_IRQHandler+0x642>
 80085ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da0c      	bge.n	800860e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 fb42 	bl	8009c7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085fa:	e008      	b.n	800860e <HAL_UART_IRQHandler+0x642>
      return;
 80085fc:	bf00      	nop
 80085fe:	e006      	b.n	800860e <HAL_UART_IRQHandler+0x642>
    return;
 8008600:	bf00      	nop
 8008602:	e004      	b.n	800860e <HAL_UART_IRQHandler+0x642>
      return;
 8008604:	bf00      	nop
 8008606:	e002      	b.n	800860e <HAL_UART_IRQHandler+0x642>
      return;
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <HAL_UART_IRQHandler+0x642>
    return;
 800860c:	bf00      	nop
  }
}
 800860e:	37e8      	adds	r7, #232	; 0xe8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr

08008638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
	...

08008650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008654:	b08c      	sub	sp, #48	; 0x30
 8008656:	af00      	add	r7, sp, #0
 8008658:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	431a      	orrs	r2, r3
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4313      	orrs	r3, r2
 8008676:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b94      	ldr	r3, [pc, #592]	; (80088d0 <UART_SetConfig+0x280>)
 8008680:	4013      	ands	r3, r2
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008688:	430b      	orrs	r3, r1
 800868a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a89      	ldr	r2, [pc, #548]	; (80088d4 <UART_SetConfig+0x284>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d004      	beq.n	80086bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b8:	4313      	orrs	r3, r2
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80086c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	f023 010f 	bic.w	r1, r3, #15
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a7a      	ldr	r2, [pc, #488]	; (80088d8 <UART_SetConfig+0x288>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d127      	bne.n	8008744 <UART_SetConfig+0xf4>
 80086f4:	2003      	movs	r0, #3
 80086f6:	f7ff fbab 	bl	8007e50 <LL_RCC_GetUSARTClockSource>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008700:	2b03      	cmp	r3, #3
 8008702:	d81b      	bhi.n	800873c <UART_SetConfig+0xec>
 8008704:	a201      	add	r2, pc, #4	; (adr r2, 800870c <UART_SetConfig+0xbc>)
 8008706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870a:	bf00      	nop
 800870c:	0800871d 	.word	0x0800871d
 8008710:	0800872d 	.word	0x0800872d
 8008714:	08008725 	.word	0x08008725
 8008718:	08008735 	.word	0x08008735
 800871c:	2301      	movs	r3, #1
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008722:	e080      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008724:	2302      	movs	r3, #2
 8008726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872a:	e07c      	b.n	8008826 <UART_SetConfig+0x1d6>
 800872c:	2304      	movs	r3, #4
 800872e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008732:	e078      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008734:	2308      	movs	r3, #8
 8008736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873a:	e074      	b.n	8008826 <UART_SetConfig+0x1d6>
 800873c:	2310      	movs	r3, #16
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008742:	e070      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a64      	ldr	r2, [pc, #400]	; (80088dc <UART_SetConfig+0x28c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d138      	bne.n	80087c0 <UART_SetConfig+0x170>
 800874e:	200c      	movs	r0, #12
 8008750:	f7ff fb7e 	bl	8007e50 <LL_RCC_GetUSARTClockSource>
 8008754:	4603      	mov	r3, r0
 8008756:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800875a:	2b0c      	cmp	r3, #12
 800875c:	d82c      	bhi.n	80087b8 <UART_SetConfig+0x168>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0x114>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008799 	.word	0x08008799
 8008768:	080087b9 	.word	0x080087b9
 800876c:	080087b9 	.word	0x080087b9
 8008770:	080087b9 	.word	0x080087b9
 8008774:	080087a9 	.word	0x080087a9
 8008778:	080087b9 	.word	0x080087b9
 800877c:	080087b9 	.word	0x080087b9
 8008780:	080087b9 	.word	0x080087b9
 8008784:	080087a1 	.word	0x080087a1
 8008788:	080087b9 	.word	0x080087b9
 800878c:	080087b9 	.word	0x080087b9
 8008790:	080087b9 	.word	0x080087b9
 8008794:	080087b1 	.word	0x080087b1
 8008798:	2300      	movs	r3, #0
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879e:	e042      	b.n	8008826 <UART_SetConfig+0x1d6>
 80087a0:	2302      	movs	r3, #2
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a6:	e03e      	b.n	8008826 <UART_SetConfig+0x1d6>
 80087a8:	2304      	movs	r3, #4
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ae:	e03a      	b.n	8008826 <UART_SetConfig+0x1d6>
 80087b0:	2308      	movs	r3, #8
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b6:	e036      	b.n	8008826 <UART_SetConfig+0x1d6>
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087be:	e032      	b.n	8008826 <UART_SetConfig+0x1d6>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a43      	ldr	r2, [pc, #268]	; (80088d4 <UART_SetConfig+0x284>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d12a      	bne.n	8008820 <UART_SetConfig+0x1d0>
 80087ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80087ce:	f7ff fb51 	bl	8007e74 <LL_RCC_GetLPUARTClockSource>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087d8:	d01a      	beq.n	8008810 <UART_SetConfig+0x1c0>
 80087da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087de:	d81b      	bhi.n	8008818 <UART_SetConfig+0x1c8>
 80087e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e4:	d00c      	beq.n	8008800 <UART_SetConfig+0x1b0>
 80087e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ea:	d815      	bhi.n	8008818 <UART_SetConfig+0x1c8>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <UART_SetConfig+0x1a8>
 80087f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f4:	d008      	beq.n	8008808 <UART_SetConfig+0x1b8>
 80087f6:	e00f      	b.n	8008818 <UART_SetConfig+0x1c8>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e012      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e00e      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e00a      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008816:	e006      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881e:	e002      	b.n	8008826 <UART_SetConfig+0x1d6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <UART_SetConfig+0x284>)
 800882c:	4293      	cmp	r3, r2
 800882e:	f040 80a4 	bne.w	800897a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008836:	2b08      	cmp	r3, #8
 8008838:	d823      	bhi.n	8008882 <UART_SetConfig+0x232>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x1f0>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008865 	.word	0x08008865
 8008844:	08008883 	.word	0x08008883
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008883 	.word	0x08008883
 8008850:	08008873 	.word	0x08008873
 8008854:	08008883 	.word	0x08008883
 8008858:	08008883 	.word	0x08008883
 800885c:	08008883 	.word	0x08008883
 8008860:	0800887b 	.word	0x0800887b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008864:	f7fc fff2 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 8008868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800886a:	e010      	b.n	800888e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800886c:	4b1c      	ldr	r3, [pc, #112]	; (80088e0 <UART_SetConfig+0x290>)
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008870:	e00d      	b.n	800888e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008872:	f7fc ff37 	bl	80056e4 <HAL_RCC_GetSysClockFreq>
 8008876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008878:	e009      	b.n	800888e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008880:	e005      	b.n	800888e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800888c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8137 	beq.w	8008b04 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <UART_SetConfig+0x294>)
 800889c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d305      	bcc.n	80088c6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d910      	bls.n	80088e8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088cc:	e11a      	b.n	8008b04 <UART_SetConfig+0x4b4>
 80088ce:	bf00      	nop
 80088d0:	cfff69f3 	.word	0xcfff69f3
 80088d4:	40008000 	.word	0x40008000
 80088d8:	40013800 	.word	0x40013800
 80088dc:	40004400 	.word	0x40004400
 80088e0:	00f42400 	.word	0x00f42400
 80088e4:	080115a0 	.word	0x080115a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	2200      	movs	r2, #0
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	60fa      	str	r2, [r7, #12]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	4a8e      	ldr	r2, [pc, #568]	; (8008b30 <UART_SetConfig+0x4e0>)
 80088f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2200      	movs	r2, #0
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008906:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800890a:	f7f8 fc03 	bl	8001114 <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	020b      	lsls	r3, r1, #8
 8008920:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008924:	0202      	lsls	r2, r0, #8
 8008926:	6979      	ldr	r1, [r7, #20]
 8008928:	6849      	ldr	r1, [r1, #4]
 800892a:	0849      	lsrs	r1, r1, #1
 800892c:	2000      	movs	r0, #0
 800892e:	460c      	mov	r4, r1
 8008930:	4605      	mov	r5, r0
 8008932:	eb12 0804 	adds.w	r8, r2, r4
 8008936:	eb43 0905 	adc.w	r9, r3, r5
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	469a      	mov	sl, r3
 8008942:	4693      	mov	fp, r2
 8008944:	4652      	mov	r2, sl
 8008946:	465b      	mov	r3, fp
 8008948:	4640      	mov	r0, r8
 800894a:	4649      	mov	r1, r9
 800894c:	f7f8 fbe2 	bl	8001114 <__aeabi_uldivmod>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4613      	mov	r3, r2
 8008956:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800895e:	d308      	bcc.n	8008972 <UART_SetConfig+0x322>
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008966:	d204      	bcs.n	8008972 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6a3a      	ldr	r2, [r7, #32]
 800896e:	60da      	str	r2, [r3, #12]
 8008970:	e0c8      	b.n	8008b04 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008978:	e0c4      	b.n	8008b04 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008982:	d167      	bne.n	8008a54 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008988:	2b08      	cmp	r3, #8
 800898a:	d828      	bhi.n	80089de <UART_SetConfig+0x38e>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0x344>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	080089df 	.word	0x080089df
 80089a4:	080089cf 	.word	0x080089cf
 80089a8:	080089df 	.word	0x080089df
 80089ac:	080089df 	.word	0x080089df
 80089b0:	080089df 	.word	0x080089df
 80089b4:	080089d7 	.word	0x080089d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089b8:	f7fc ff48 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 80089bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089be:	e014      	b.n	80089ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089c0:	f7fc ff56 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
 80089c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089c6:	e010      	b.n	80089ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089c8:	4b5a      	ldr	r3, [pc, #360]	; (8008b34 <UART_SetConfig+0x4e4>)
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089cc:	e00d      	b.n	80089ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ce:	f7fc fe89 	bl	80056e4 <HAL_RCC_GetSysClockFreq>
 80089d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089d4:	e009      	b.n	80089ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089dc:	e005      	b.n	80089ea <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8089 	beq.w	8008b04 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	4a4e      	ldr	r2, [pc, #312]	; (8008b30 <UART_SetConfig+0x4e0>)
 80089f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089fc:	461a      	mov	r2, r3
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a04:	005a      	lsls	r2, r3, #1
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	441a      	add	r2, r3
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d916      	bls.n	8008a4c <UART_SetConfig+0x3fc>
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a24:	d212      	bcs.n	8008a4c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f023 030f 	bic.w	r3, r3, #15
 8008a2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	8bfb      	ldrh	r3, [r7, #30]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	8bfa      	ldrh	r2, [r7, #30]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e05b      	b.n	8008b04 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a52:	e057      	b.n	8008b04 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d828      	bhi.n	8008aae <UART_SetConfig+0x45e>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <UART_SetConfig+0x414>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008a91 	.word	0x08008a91
 8008a6c:	08008a99 	.word	0x08008a99
 8008a70:	08008aaf 	.word	0x08008aaf
 8008a74:	08008a9f 	.word	0x08008a9f
 8008a78:	08008aaf 	.word	0x08008aaf
 8008a7c:	08008aaf 	.word	0x08008aaf
 8008a80:	08008aaf 	.word	0x08008aaf
 8008a84:	08008aa7 	.word	0x08008aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a88:	f7fc fee0 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 8008a8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a8e:	e014      	b.n	8008aba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a90:	f7fc feee 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
 8008a94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a96:	e010      	b.n	8008aba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a98:	4b26      	ldr	r3, [pc, #152]	; (8008b34 <UART_SetConfig+0x4e4>)
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a9c:	e00d      	b.n	8008aba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a9e:	f7fc fe21 	bl	80056e4 <HAL_RCC_GetSysClockFreq>
 8008aa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008aa4:	e009      	b.n	8008aba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008aac:	e005      	b.n	8008aba <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ab8:	bf00      	nop
    }

    if (pclk != 0U)
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d021      	beq.n	8008b04 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	4a1a      	ldr	r2, [pc, #104]	; (8008b30 <UART_SetConfig+0x4e0>)
 8008ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aca:	461a      	mov	r2, r3
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	441a      	add	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	d909      	bls.n	8008afe <UART_SetConfig+0x4ae>
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af0:	d205      	bcs.n	8008afe <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60da      	str	r2, [r3, #12]
 8008afc:	e002      	b.n	8008b04 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2200      	movs	r2, #0
 8008b18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3730      	adds	r7, #48	; 0x30
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b2e:	bf00      	nop
 8008b30:	080115a0 	.word	0x080115a0
 8008b34:	00f42400 	.word	0x00f42400

08008b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01a      	beq.n	8008c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c36:	d10a      	bne.n	8008c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	605a      	str	r2, [r3, #4]
  }
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr

08008c7a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af02      	add	r7, sp, #8
 8008c80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c8a:	f7fa fa07 	bl	800309c <HAL_GetTick>
 8008c8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d10e      	bne.n	8008cbc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f832 	bl	8008d16 <UART_WaitOnFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e028      	b.n	8008d0e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d10e      	bne.n	8008ce8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f81c 	bl	8008d16 <UART_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e012      	b.n	8008d0e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b09c      	sub	sp, #112	; 0x70
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	4613      	mov	r3, r2
 8008d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d26:	e0a9      	b.n	8008e7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d2e:	f000 80a5 	beq.w	8008e7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d32:	f7fa f9b3 	bl	800309c <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d302      	bcc.n	8008d48 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d140      	bne.n	8008dca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e6      	bne.n	8008d48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3308      	adds	r3, #8
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	f023 0301 	bic.w	r3, r3, #1
 8008d90:	663b      	str	r3, [r7, #96]	; 0x60
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e5      	bne.n	8008d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2220      	movs	r2, #32
 8008db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e069      	b.n	8008e9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d051      	beq.n	8008e7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de6:	d149      	bne.n	8008e7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008df0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
 8008e12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	613b      	str	r3, [r7, #16]
   return(result);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3308      	adds	r3, #8
 8008e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e44:	623a      	str	r2, [r7, #32]
 8008e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	69f9      	ldr	r1, [r7, #28]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e010      	b.n	8008e9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	69da      	ldr	r2, [r3, #28]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4013      	ands	r3, r2
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	bf0c      	ite	eq
 8008e8c:	2301      	moveq	r3, #1
 8008e8e:	2300      	movne	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	f43f af46 	beq.w	8008d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3770      	adds	r7, #112	; 0x70
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b0a3      	sub	sp, #140	; 0x8c
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	88fa      	ldrh	r2, [r7, #6]
 8008ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eda:	d10e      	bne.n	8008efa <UART_Start_Receive_IT+0x52>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <UART_Start_Receive_IT+0x48>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008eee:	e02d      	b.n	8008f4c <UART_Start_Receive_IT+0xa4>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	22ff      	movs	r2, #255	; 0xff
 8008ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ef8:	e028      	b.n	8008f4c <UART_Start_Receive_IT+0xa4>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10d      	bne.n	8008f1e <UART_Start_Receive_IT+0x76>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <UART_Start_Receive_IT+0x6c>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	22ff      	movs	r2, #255	; 0xff
 8008f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f12:	e01b      	b.n	8008f4c <UART_Start_Receive_IT+0xa4>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	227f      	movs	r2, #127	; 0x7f
 8008f18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f1c:	e016      	b.n	8008f4c <UART_Start_Receive_IT+0xa4>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f26:	d10d      	bne.n	8008f44 <UART_Start_Receive_IT+0x9c>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <UART_Start_Receive_IT+0x92>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	227f      	movs	r2, #127	; 0x7f
 8008f34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f38:	e008      	b.n	8008f4c <UART_Start_Receive_IT+0xa4>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	223f      	movs	r2, #63	; 0x3f
 8008f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f42:	e003      	b.n	8008f4c <UART_Start_Receive_IT+0xa4>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2222      	movs	r2, #34	; 0x22
 8008f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f6e:	f043 0301 	orr.w	r3, r3, #1
 8008f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008f80:	673a      	str	r2, [r7, #112]	; 0x70
 8008f82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008f86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e3      	bne.n	8008f5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9c:	d14f      	bne.n	800903e <UART_Start_Receive_IT+0x196>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d349      	bcc.n	800903e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb2:	d107      	bne.n	8008fc4 <UART_Start_Receive_IT+0x11c>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a46      	ldr	r2, [pc, #280]	; (80090d8 <UART_Start_Receive_IT+0x230>)
 8008fc0:	675a      	str	r2, [r3, #116]	; 0x74
 8008fc2:	e002      	b.n	8008fca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a45      	ldr	r2, [pc, #276]	; (80090dc <UART_Start_Receive_IT+0x234>)
 8008fc8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01a      	beq.n	8009008 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ff6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ffa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e4      	bne.n	8008fd2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3308      	adds	r3, #8
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800901e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009028:	64ba      	str	r2, [r7, #72]	; 0x48
 800902a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800902e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e5      	bne.n	8009008 <UART_Start_Receive_IT+0x160>
 800903c:	e046      	b.n	80090cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009046:	d107      	bne.n	8009058 <UART_Start_Receive_IT+0x1b0>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a23      	ldr	r2, [pc, #140]	; (80090e0 <UART_Start_Receive_IT+0x238>)
 8009054:	675a      	str	r2, [r3, #116]	; 0x74
 8009056:	e002      	b.n	800905e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4a22      	ldr	r2, [pc, #136]	; (80090e4 <UART_Start_Receive_IT+0x23c>)
 800905c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d019      	beq.n	800909a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800907a:	677b      	str	r3, [r7, #116]	; 0x74
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
 8009086:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800908a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e6      	bne.n	8009066 <UART_Start_Receive_IT+0x1be>
 8009098:	e018      	b.n	80090cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	613b      	str	r3, [r7, #16]
   return(result);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f043 0320 	orr.w	r3, r3, #32
 80090ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b8:	623b      	str	r3, [r7, #32]
 80090ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	69f9      	ldr	r1, [r7, #28]
 80090be:	6a3a      	ldr	r2, [r7, #32]
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e6      	bne.n	800909a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	378c      	adds	r7, #140	; 0x8c
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr
 80090d8:	08009905 	.word	0x08009905
 80090dc:	080095a5 	.word	0x080095a5
 80090e0:	080093ed 	.word	0x080093ed
 80090e4:	08009235 	.word	0x08009235

080090e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b095      	sub	sp, #84	; 0x54
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	643b      	str	r3, [r7, #64]	; 0x40
 8009110:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	61fb      	str	r3, [r7, #28]
   return(result);
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	64bb      	str	r3, [r7, #72]	; 0x48
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e3      	bne.n	8009122 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915e:	2b01      	cmp	r3, #1
 8009160:	d118      	bne.n	8009194 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0310 	bic.w	r3, r3, #16
 8009176:	647b      	str	r3, [r7, #68]	; 0x44
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6979      	ldr	r1, [r7, #20]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	613b      	str	r3, [r7, #16]
   return(result);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e6      	bne.n	8009162 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80091a8:	bf00      	nop
 80091aa:	3754      	adds	r7, #84	; 0x54
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr

080091b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff fa28 	bl	8008626 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d6:	bf00      	nop
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b088      	sub	sp, #32
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6979      	ldr	r1, [r7, #20]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	613b      	str	r3, [r7, #16]
   return(result);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e6      	bne.n	80091e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f9f4 	bl	8008614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922c:	bf00      	nop
 800922e:	3720      	adds	r7, #32
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b09c      	sub	sp, #112	; 0x70
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009242:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800924c:	2b22      	cmp	r3, #34	; 0x22
 800924e:	f040 80be 	bne.w	80093ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800925c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009260:	b2d9      	uxtb	r1, r3
 8009262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009266:	b2da      	uxtb	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926c:	400a      	ands	r2, r1
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	f040 80a1 	bne.w	80093de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80092bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	667b      	str	r3, [r7, #100]	; 0x64
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092ee:	647a      	str	r2, [r7, #68]	; 0x44
 80092f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e5      	bne.n	80092ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a33      	ldr	r2, [pc, #204]	; (80093e8 <UART_RxISR_8BIT+0x1b4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d01f      	beq.n	8009360 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d018      	beq.n	8009360 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	623b      	str	r3, [r7, #32]
   return(result);
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009342:	663b      	str	r3, [r7, #96]	; 0x60
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800934c:	633b      	str	r3, [r7, #48]	; 0x30
 800934e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d12e      	bne.n	80093c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60fb      	str	r3, [r7, #12]
   return(result);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	617b      	str	r3, [r7, #20]
   return(result);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e6      	bne.n	800936e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d103      	bne.n	80093b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2210      	movs	r2, #16
 80093b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff f93a 	bl	8008638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093c4:	e00b      	b.n	80093de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7f9 f8b6 	bl	8002538 <HAL_UART_RxCpltCallback>
}
 80093cc:	e007      	b.n	80093de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0208 	orr.w	r2, r2, #8
 80093dc:	619a      	str	r2, [r3, #24]
}
 80093de:	bf00      	nop
 80093e0:	3770      	adds	r7, #112	; 0x70
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	40008000 	.word	0x40008000

080093ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b09c      	sub	sp, #112	; 0x70
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009404:	2b22      	cmp	r3, #34	; 0x22
 8009406:	f040 80be 	bne.w	8009586 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009418:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800941a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800941e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009422:	4013      	ands	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009428:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942e:	1c9a      	adds	r2, r3, #2
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800943a:	b29b      	uxth	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	f040 80a1 	bne.w	8009596 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009468:	667b      	str	r3, [r7, #100]	; 0x64
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009472:	657b      	str	r3, [r7, #84]	; 0x54
 8009474:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e6      	bne.n	8009454 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3308      	adds	r3, #8
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	663b      	str	r3, [r7, #96]	; 0x60
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3308      	adds	r3, #8
 80094a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094a6:	643a      	str	r2, [r7, #64]	; 0x40
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e5      	bne.n	8009486 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2220      	movs	r2, #32
 80094be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a33      	ldr	r2, [pc, #204]	; (80095a0 <UART_RxISR_16BIT+0x1b4>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d01f      	beq.n	8009518 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d018      	beq.n	8009518 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	461a      	mov	r2, r3
 8009502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009506:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800950a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e6      	bne.n	80094e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800951c:	2b01      	cmp	r3, #1
 800951e:	d12e      	bne.n	800957e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	e853 3f00 	ldrex	r3, [r3]
 8009532:	60bb      	str	r3, [r7, #8]
   return(result);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f023 0310 	bic.w	r3, r3, #16
 800953a:	65bb      	str	r3, [r7, #88]	; 0x58
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6979      	ldr	r1, [r7, #20]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	613b      	str	r3, [r7, #16]
   return(result);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e6      	bne.n	8009526 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	2b10      	cmp	r3, #16
 8009564:	d103      	bne.n	800956e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2210      	movs	r2, #16
 800956c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff f85e 	bl	8008638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800957c:	e00b      	b.n	8009596 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7f8 ffda 	bl	8002538 <HAL_UART_RxCpltCallback>
}
 8009584:	e007      	b.n	8009596 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0208 	orr.w	r2, r2, #8
 8009594:	619a      	str	r2, [r3, #24]
}
 8009596:	bf00      	nop
 8009598:	3770      	adds	r7, #112	; 0x70
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	40008000 	.word	0x40008000

080095a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b0ac      	sub	sp, #176	; 0xb0
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095da:	2b22      	cmp	r3, #34	; 0x22
 80095dc:	f040 8182 	bne.w	80098e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095ea:	e125      	b.n	8009838 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80095fa:	b2d9      	uxtb	r1, r3
 80095fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009600:	b2da      	uxtb	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009606:	400a      	ands	r2, r1
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800961c:	b29b      	uxth	r3, r3
 800961e:	3b01      	subs	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d053      	beq.n	80096e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800963e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d011      	beq.n	800966e <UART_RxISR_8BIT_FIFOEN+0xca>
 800964a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800964e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2201      	movs	r2, #1
 800965c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009664:	f043 0201 	orr.w	r2, r3, #1
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800966e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d011      	beq.n	800969e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800967a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00b      	beq.n	800969e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2202      	movs	r2, #2
 800968c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009694:	f043 0204 	orr.w	r2, r3, #4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800969e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d011      	beq.n	80096ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80096aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00b      	beq.n	80096ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2204      	movs	r2, #4
 80096bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c4:	f043 0202 	orr.w	r2, r3, #2
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7fe ffa4 	bl	8008626 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f040 80a2 	bne.w	8009838 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	461a      	mov	r2, r3
 8009712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009716:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009718:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800971c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e4      	bne.n	80096f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3308      	adds	r3, #8
 8009730:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800973a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800973c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009740:	f023 0301 	bic.w	r3, r3, #1
 8009744:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009752:	66ba      	str	r2, [r7, #104]	; 0x68
 8009754:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009758:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e1      	bne.n	800972a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a5f      	ldr	r2, [pc, #380]	; (80098fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d021      	beq.n	80097c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01a      	beq.n	80097c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097b4:	657b      	str	r3, [r7, #84]	; 0x54
 80097b6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e4      	bne.n	8009792 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d130      	bne.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	f023 0310 	bic.w	r3, r3, #16
 80097ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097f8:	643b      	str	r3, [r7, #64]	; 0x40
 80097fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e4      	bne.n	80097d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b10      	cmp	r3, #16
 8009818:	d103      	bne.n	8009822 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2210      	movs	r2, #16
 8009820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fe ff04 	bl	8008638 <HAL_UARTEx_RxEventCallback>
 8009830:	e002      	b.n	8009838 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7f8 fe80 	bl	8002538 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009838:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b00      	cmp	r3, #0
 800984a:	f47f aecf 	bne.w	80095ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009854:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800985c:	2b00      	cmp	r3, #0
 800985e:	d049      	beq.n	80098f4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009866:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800986a:	429a      	cmp	r2, r3
 800986c:	d242      	bcs.n	80098f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3308      	adds	r3, #8
 8009874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	61fb      	str	r3, [r7, #28]
   return(result);
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e3      	bne.n	800986e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a15      	ldr	r2, [pc, #84]	; (8009900 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80098aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6979      	ldr	r1, [r7, #20]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	613b      	str	r3, [r7, #16]
   return(result);
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e4      	bne.n	80098ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e2:	e007      	b.n	80098f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0208 	orr.w	r2, r2, #8
 80098f2:	619a      	str	r2, [r3, #24]
}
 80098f4:	bf00      	nop
 80098f6:	37b0      	adds	r7, #176	; 0xb0
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	40008000 	.word	0x40008000
 8009900:	08009235 	.word	0x08009235

08009904 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b0ae      	sub	sp, #184	; 0xb8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009912:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993a:	2b22      	cmp	r3, #34	; 0x22
 800993c:	f040 8186 	bne.w	8009c4c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009946:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800994a:	e129      	b.n	8009ba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800995e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009962:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009966:	4013      	ands	r3, r2
 8009968:	b29a      	uxth	r2, r3
 800996a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800996e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009974:	1c9a      	adds	r2, r3, #2
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d053      	beq.n	8009a4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d011      	beq.n	80099d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80099ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00b      	beq.n	80099d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2201      	movs	r2, #1
 80099c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c8:	f043 0201 	orr.w	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d011      	beq.n	8009a02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00b      	beq.n	8009a02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2202      	movs	r2, #2
 80099f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f8:	f043 0204 	orr.w	r2, r3, #4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d011      	beq.n	8009a32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2204      	movs	r2, #4
 8009a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a28:	f043 0202 	orr.w	r2, r3, #2
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d006      	beq.n	8009a4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7fe fdf2 	bl	8008626 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f040 80a4 	bne.w	8009ba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a7e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e2      	bne.n	8009a58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa8:	f023 0301 	bic.w	r3, r3, #1
 8009aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e1      	bne.n	8009a92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a5f      	ldr	r2, [pc, #380]	; (8009c64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d021      	beq.n	8009b30 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01a      	beq.n	8009b30 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e4      	bne.n	8009afa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d130      	bne.n	8009b9a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	f023 0310 	bic.w	r3, r3, #16
 8009b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b60:	647b      	str	r3, [r7, #68]	; 0x44
 8009b62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e4      	bne.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f003 0310 	and.w	r3, r3, #16
 8009b7e:	2b10      	cmp	r3, #16
 8009b80:	d103      	bne.n	8009b8a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2210      	movs	r2, #16
 8009b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fe fd50 	bl	8008638 <HAL_UARTEx_RxEventCallback>
 8009b98:	e002      	b.n	8009ba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7f8 fccc 	bl	8002538 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ba0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bac:	f003 0320 	and.w	r3, r3, #32
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f47f aecb 	bne.w	800994c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bbc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bc0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d049      	beq.n	8009c5c <UART_RxISR_16BIT_FIFOEN+0x358>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d242      	bcs.n	8009c5c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	623b      	str	r3, [r7, #32]
   return(result);
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e3      	bne.n	8009bd6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a15      	ldr	r2, [pc, #84]	; (8009c68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009c12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f043 0320 	orr.w	r3, r3, #32
 8009c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	69b9      	ldr	r1, [r7, #24]
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	617b      	str	r3, [r7, #20]
   return(result);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e4      	bne.n	8009c14 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c4a:	e007      	b.n	8009c5c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0208 	orr.w	r2, r2, #8
 8009c5a:	619a      	str	r2, [r3, #24]
}
 8009c5c:	bf00      	nop
 8009c5e:	37b8      	adds	r7, #184	; 0xb8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	40008000 	.word	0x40008000
 8009c68:	080093ed 	.word	0x080093ed

08009c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr

08009c7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b083      	sub	sp, #12
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bc80      	pop	{r7}
 8009c8e:	4770      	bx	lr

08009c90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr

08009ca2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e027      	b.n	8009d08 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2224      	movs	r2, #36	; 0x24
 8009cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0201 	bic.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bc80      	pop	{r7}
 8009d10:	4770      	bx	lr

08009d12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d101      	bne.n	8009d2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d26:	2302      	movs	r3, #2
 8009d28:	e02d      	b.n	8009d86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2224      	movs	r2, #36	; 0x24
 8009d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f022 0201 	bic.w	r2, r2, #1
 8009d50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f850 	bl	8009e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d101      	bne.n	8009da6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009da2:	2302      	movs	r3, #2
 8009da4:	e02d      	b.n	8009e02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2224      	movs	r2, #36	; 0x24
 8009db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 0201 	bic.w	r2, r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f812 	bl	8009e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e2c:	e031      	b.n	8009e92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e2e:	2308      	movs	r3, #8
 8009e30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e32:	2308      	movs	r3, #8
 8009e34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	0e5b      	lsrs	r3, r3, #25
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	0f5b      	lsrs	r3, r3, #29
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0307 	and.w	r3, r3, #7
 8009e54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	7b3a      	ldrb	r2, [r7, #12]
 8009e5a:	4910      	ldr	r1, [pc, #64]	; (8009e9c <UARTEx_SetNbDataToProcess+0x90>)
 8009e5c:	5c8a      	ldrb	r2, [r1, r2]
 8009e5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e62:	7b3a      	ldrb	r2, [r7, #12]
 8009e64:	490e      	ldr	r1, [pc, #56]	; (8009ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	7b7a      	ldrb	r2, [r7, #13]
 8009e78:	4908      	ldr	r1, [pc, #32]	; (8009e9c <UARTEx_SetNbDataToProcess+0x90>)
 8009e7a:	5c8a      	ldrb	r2, [r1, r2]
 8009e7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e80:	7b7a      	ldrb	r2, [r7, #13]
 8009e82:	4907      	ldr	r1, [pc, #28]	; (8009ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr
 8009e9c:	080115b8 	.word	0x080115b8
 8009ea0:	080115c0 	.word	0x080115c0

08009ea4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009ea8:	4907      	ldr	r1, [pc, #28]	; (8009ec8 <MX_FATFS_Init+0x24>)
 8009eaa:	4808      	ldr	r0, [pc, #32]	; (8009ecc <MX_FATFS_Init+0x28>)
 8009eac:	f002 fee8 	bl	800cc80 <FATFS_LinkDriver>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eba:	e003      	b.n	8009ec4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009ebc:	4b04      	ldr	r3, [pc, #16]	; (8009ed0 <MX_FATFS_Init+0x2c>)
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8009ec2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000478 	.word	0x20000478
 8009ecc:	20000010 	.word	0x20000010
 8009ed0:	2000047c 	.word	0x2000047c

08009ed4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ed8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bc80      	pop	{r7}
 8009ee0:	4770      	bx	lr

08009ee2 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	4603      	mov	r3, r0
 8009eea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 f9d0 	bl	800a294 <USER_SPI_initialize>
 8009ef4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	4603      	mov	r3, r0
 8009f06:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fabc 	bl	800a488 <USER_SPI_status>
 8009f10:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
 8009f26:	4603      	mov	r3, r0
 8009f28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8009f2a:	7bf8      	ldrb	r0, [r7, #15]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	f000 fabd 	bl	800a4b0 <USER_SPI_read>
 8009f36:	4603      	mov	r3, r0

  /* USER CODE END READ */
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8009f50:	7bf8      	ldrb	r0, [r7, #15]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	f000 fb10 	bl	800a57c <USER_SPI_write>
 8009f5c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b082      	sub	sp, #8
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	603a      	str	r2, [r7, #0]
 8009f70:	71fb      	strb	r3, [r7, #7]
 8009f72:	460b      	mov	r3, r1
 8009f74:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8009f76:	79b9      	ldrb	r1, [r7, #6]
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fb79 	bl	800a674 <USER_SPI_ioctl>
 8009f82:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009f94:	f7f9 f882 	bl	800309c <HAL_GetTick>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	4a04      	ldr	r2, [pc, #16]	; (8009fac <SPI_Timer_On+0x20>)
 8009f9c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009f9e:	4a04      	ldr	r2, [pc, #16]	; (8009fb0 <SPI_Timer_On+0x24>)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6013      	str	r3, [r2, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20000480 	.word	0x20000480
 8009fb0:	20000484 	.word	0x20000484

08009fb4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009fb8:	f7f9 f870 	bl	800309c <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <SPI_Timer_Status+0x24>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <SPI_Timer_Status+0x28>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	bf34      	ite	cc
 8009fcc:	2301      	movcc	r3, #1
 8009fce:	2300      	movcs	r3, #0
 8009fd0:	b2db      	uxtb	r3, r3
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000480 	.word	0x20000480
 8009fdc:	20000484 	.word	0x20000484

08009fe0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009fea:	f107 020f 	add.w	r2, r7, #15
 8009fee:	1df9      	adds	r1, r7, #7
 8009ff0:	2332      	movs	r3, #50	; 0x32
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4804      	ldr	r0, [pc, #16]	; (800a008 <xchg_spi+0x28>)
 8009ff8:	f7fc fc96 	bl	8006928 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20000328 	.word	0x20000328

0800a00c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a00c:	b590      	push	{r4, r7, lr}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e00a      	b.n	800a032 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	18d4      	adds	r4, r2, r3
 800a022:	20ff      	movs	r0, #255	; 0xff
 800a024:	f7ff ffdc 	bl	8009fe0 <xchg_spi>
 800a028:	4603      	mov	r3, r0
 800a02a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d3f0      	bcc.n	800a01c <rcvr_spi_multi+0x10>
	}
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	bd90      	pop	{r4, r7, pc}

0800a044 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	b29a      	uxth	r2, r3
 800a052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	4803      	ldr	r0, [pc, #12]	; (800a068 <xmit_spi_multi+0x24>)
 800a05a:	f7fc fad5 	bl	8006608 <HAL_SPI_Transmit>
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000328 	.word	0x20000328

0800a06c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a074:	f7f9 f812 	bl	800309c <HAL_GetTick>
 800a078:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a07e:	20ff      	movs	r0, #255	; 0xff
 800a080:	f7ff ffae 	bl	8009fe0 <xchg_spi>
 800a084:	4603      	mov	r3, r0
 800a086:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	2bff      	cmp	r3, #255	; 0xff
 800a08c:	d007      	beq.n	800a09e <wait_ready+0x32>
 800a08e:	f7f9 f805 	bl	800309c <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d8ef      	bhi.n	800a07e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2bff      	cmp	r3, #255	; 0xff
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2301      	moveq	r3, #1
 800a0a6:	2300      	movne	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	2120      	movs	r1, #32
 800a0ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0be:	f7f9 fb51 	bl	8003764 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a0c2:	20ff      	movs	r0, #255	; 0xff
 800a0c4:	f7ff ff8c 	bl	8009fe0 <xchg_spi>

}
 800a0c8:	bf00      	nop
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2120      	movs	r1, #32
 800a0d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0d8:	f7f9 fb44 	bl	8003764 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a0dc:	20ff      	movs	r0, #255	; 0xff
 800a0de:	f7ff ff7f 	bl	8009fe0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a0e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0e6:	f7ff ffc1 	bl	800a06c <wait_ready>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <spiselect+0x28>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e002      	b.n	800a0fa <spiselect+0x2e>

	despiselect();
 800a0f4:	f7ff ffdd 	bl	800a0b2 <despiselect>
	return 0;	/* Timeout */
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a108:	20c8      	movs	r0, #200	; 0xc8
 800a10a:	f7ff ff3f 	bl	8009f8c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a10e:	20ff      	movs	r0, #255	; 0xff
 800a110:	f7ff ff66 	bl	8009fe0 <xchg_spi>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	2bff      	cmp	r3, #255	; 0xff
 800a11c:	d104      	bne.n	800a128 <rcvr_datablock+0x2a>
 800a11e:	f7ff ff49 	bl	8009fb4 <SPI_Timer_Status>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1f2      	bne.n	800a10e <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	2bfe      	cmp	r3, #254	; 0xfe
 800a12c:	d001      	beq.n	800a132 <rcvr_datablock+0x34>
 800a12e:	2300      	movs	r3, #0
 800a130:	e00a      	b.n	800a148 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff ff69 	bl	800a00c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a13a:	20ff      	movs	r0, #255	; 0xff
 800a13c:	f7ff ff50 	bl	8009fe0 <xchg_spi>
 800a140:	20ff      	movs	r0, #255	; 0xff
 800a142:	f7ff ff4d 	bl	8009fe0 <xchg_spi>

	return 1;						/* Function succeeded */
 800a146:	2301      	movs	r3, #1
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a15c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a160:	f7ff ff84 	bl	800a06c <wait_ready>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <xmit_datablock+0x1e>
 800a16a:	2300      	movs	r3, #0
 800a16c:	e01e      	b.n	800a1ac <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff ff35 	bl	8009fe0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	2bfd      	cmp	r3, #253	; 0xfd
 800a17a:	d016      	beq.n	800a1aa <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a17c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ff5f 	bl	800a044 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a186:	20ff      	movs	r0, #255	; 0xff
 800a188:	f7ff ff2a 	bl	8009fe0 <xchg_spi>
 800a18c:	20ff      	movs	r0, #255	; 0xff
 800a18e:	f7ff ff27 	bl	8009fe0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a192:	20ff      	movs	r0, #255	; 0xff
 800a194:	f7ff ff24 	bl	8009fe0 <xchg_spi>
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	f003 031f 	and.w	r3, r3, #31
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d001      	beq.n	800a1aa <xmit_datablock+0x5a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e000      	b.n	800a1ac <xmit_datablock+0x5c>
	}
	return 1;
 800a1aa:	2301      	movs	r3, #1
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	6039      	str	r1, [r7, #0]
 800a1be:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a1c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	da0e      	bge.n	800a1e6 <send_cmd+0x32>
		cmd &= 0x7F;
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ce:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2037      	movs	r0, #55	; 0x37
 800a1d4:	f7ff ffee 	bl	800a1b4 <send_cmd>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d901      	bls.n	800a1e6 <send_cmd+0x32>
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	e051      	b.n	800a28a <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	2b0c      	cmp	r3, #12
 800a1ea:	d008      	beq.n	800a1fe <send_cmd+0x4a>
		despiselect();
 800a1ec:	f7ff ff61 	bl	800a0b2 <despiselect>
		if (!spiselect()) return 0xFF;
 800a1f0:	f7ff ff6c 	bl	800a0cc <spiselect>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <send_cmd+0x4a>
 800a1fa:	23ff      	movs	r3, #255	; 0xff
 800a1fc:	e045      	b.n	800a28a <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a204:	b2db      	uxtb	r3, r3
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff feea 	bl	8009fe0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	0e1b      	lsrs	r3, r3, #24
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fee4 	bl	8009fe0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	0c1b      	lsrs	r3, r3, #16
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff fede 	bl	8009fe0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	0a1b      	lsrs	r3, r3, #8
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fed8 	bl	8009fe0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fed3 	bl	8009fe0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a23a:	2301      	movs	r3, #1
 800a23c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <send_cmd+0x94>
 800a244:	2395      	movs	r3, #149	; 0x95
 800a246:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	2b08      	cmp	r3, #8
 800a24c:	d101      	bne.n	800a252 <send_cmd+0x9e>
 800a24e:	2387      	movs	r3, #135	; 0x87
 800a250:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff fec3 	bl	8009fe0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	2b0c      	cmp	r3, #12
 800a25e:	d102      	bne.n	800a266 <send_cmd+0xb2>
 800a260:	20ff      	movs	r0, #255	; 0xff
 800a262:	f7ff febd 	bl	8009fe0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a266:	230a      	movs	r3, #10
 800a268:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a26a:	20ff      	movs	r0, #255	; 0xff
 800a26c:	f7ff feb8 	bl	8009fe0 <xchg_spi>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da05      	bge.n	800a288 <send_cmd+0xd4>
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	3b01      	subs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1f0      	bne.n	800a26a <send_cmd+0xb6>

	return res;							/* Return received response */
 800a288:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <USER_SPI_initialize+0x14>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e0df      	b.n	800a468 <USER_SPI_initialize+0x1d4>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a2a8:	4b71      	ldr	r3, [pc, #452]	; (800a470 <USER_SPI_initialize+0x1dc>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <USER_SPI_initialize+0x2a>
 800a2b6:	4b6e      	ldr	r3, [pc, #440]	; (800a470 <USER_SPI_initialize+0x1dc>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	e0d4      	b.n	800a468 <USER_SPI_initialize+0x1d4>

	FCLK_SLOW();
 800a2be:	4b6d      	ldr	r3, [pc, #436]	; (800a474 <USER_SPI_initialize+0x1e0>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a2c8:	4b6a      	ldr	r3, [pc, #424]	; (800a474 <USER_SPI_initialize+0x1e0>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800a2d0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a2d2:	230a      	movs	r3, #10
 800a2d4:	73fb      	strb	r3, [r7, #15]
 800a2d6:	e005      	b.n	800a2e4 <USER_SPI_initialize+0x50>
 800a2d8:	20ff      	movs	r0, #255	; 0xff
 800a2da:	f7ff fe81 	bl	8009fe0 <xchg_spi>
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1f6      	bne.n	800a2d8 <USER_SPI_initialize+0x44>

	ty = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	f7ff ff5f 	bl	800a1b4 <send_cmd>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	f040 8091 	bne.w	800a420 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a2fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a302:	f7ff fe43 	bl	8009f8c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a306:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a30a:	2008      	movs	r0, #8
 800a30c:	f7ff ff52 	bl	800a1b4 <send_cmd>
 800a310:	4603      	mov	r3, r0
 800a312:	2b01      	cmp	r3, #1
 800a314:	d154      	bne.n	800a3c0 <USER_SPI_initialize+0x12c>
			printf("SD v2\n\n");
 800a316:	4858      	ldr	r0, [pc, #352]	; (800a478 <USER_SPI_initialize+0x1e4>)
 800a318:	f003 faf6 	bl	800d908 <puts>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
 800a320:	e00d      	b.n	800a33e <USER_SPI_initialize+0xaa>
 800a322:	7bfc      	ldrb	r4, [r7, #15]
 800a324:	20ff      	movs	r0, #255	; 0xff
 800a326:	f7ff fe5b 	bl	8009fe0 <xchg_spi>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461a      	mov	r2, r3
 800a32e:	f104 0310 	add.w	r3, r4, #16
 800a332:	443b      	add	r3, r7
 800a334:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	3301      	adds	r3, #1
 800a33c:	73fb      	strb	r3, [r7, #15]
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
 800a340:	2b03      	cmp	r3, #3
 800a342:	d9ee      	bls.n	800a322 <USER_SPI_initialize+0x8e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a344:	7abb      	ldrb	r3, [r7, #10]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d16a      	bne.n	800a420 <USER_SPI_initialize+0x18c>
 800a34a:	7afb      	ldrb	r3, [r7, #11]
 800a34c:	2baa      	cmp	r3, #170	; 0xaa
 800a34e:	d167      	bne.n	800a420 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a350:	bf00      	nop
 800a352:	f7ff fe2f 	bl	8009fb4 <SPI_Timer_Status>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d007      	beq.n	800a36c <USER_SPI_initialize+0xd8>
 800a35c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a360:	20a9      	movs	r0, #169	; 0xa9
 800a362:	f7ff ff27 	bl	800a1b4 <send_cmd>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1f2      	bne.n	800a352 <USER_SPI_initialize+0xbe>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a36c:	f7ff fe22 	bl	8009fb4 <SPI_Timer_Status>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d054      	beq.n	800a420 <USER_SPI_initialize+0x18c>
 800a376:	2100      	movs	r1, #0
 800a378:	203a      	movs	r0, #58	; 0x3a
 800a37a:	f7ff ff1b 	bl	800a1b4 <send_cmd>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d14d      	bne.n	800a420 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
 800a388:	e00d      	b.n	800a3a6 <USER_SPI_initialize+0x112>
 800a38a:	7bfc      	ldrb	r4, [r7, #15]
 800a38c:	20ff      	movs	r0, #255	; 0xff
 800a38e:	f7ff fe27 	bl	8009fe0 <xchg_spi>
 800a392:	4603      	mov	r3, r0
 800a394:	461a      	mov	r2, r3
 800a396:	f104 0310 	add.w	r3, r4, #16
 800a39a:	443b      	add	r3, r7
 800a39c:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	73fb      	strb	r3, [r7, #15]
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d9ee      	bls.n	800a38a <USER_SPI_initialize+0xf6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a3ac:	7a3b      	ldrb	r3, [r7, #8]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <USER_SPI_initialize+0x126>
 800a3b6:	230c      	movs	r3, #12
 800a3b8:	e000      	b.n	800a3bc <USER_SPI_initialize+0x128>
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	737b      	strb	r3, [r7, #13]
 800a3be:	e02f      	b.n	800a420 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			printf("NOT SD v2\n\n");
 800a3c0:	482e      	ldr	r0, [pc, #184]	; (800a47c <USER_SPI_initialize+0x1e8>)
 800a3c2:	f003 faa1 	bl	800d908 <puts>

			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	20a9      	movs	r0, #169	; 0xa9
 800a3ca:	f7ff fef3 	bl	800a1b4 <send_cmd>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d804      	bhi.n	800a3de <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	737b      	strb	r3, [r7, #13]
 800a3d8:	23a9      	movs	r3, #169	; 0xa9
 800a3da:	73bb      	strb	r3, [r7, #14]
 800a3dc:	e003      	b.n	800a3e6 <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a3de:	2301      	movs	r3, #1
 800a3e0:	737b      	strb	r3, [r7, #13]
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a3e6:	bf00      	nop
 800a3e8:	f7ff fde4 	bl	8009fb4 <SPI_Timer_Status>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d007      	beq.n	800a402 <USER_SPI_initialize+0x16e>
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fedc 	bl	800a1b4 <send_cmd>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f2      	bne.n	800a3e8 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a402:	f7ff fdd7 	bl	8009fb4 <SPI_Timer_Status>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <USER_SPI_initialize+0x188>
 800a40c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a410:	2010      	movs	r0, #16
 800a412:	f7ff fecf 	bl	800a1b4 <send_cmd>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <USER_SPI_initialize+0x18c>
				ty = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a420:	4a17      	ldr	r2, [pc, #92]	; (800a480 <USER_SPI_initialize+0x1ec>)
 800a422:	7b7b      	ldrb	r3, [r7, #13]
 800a424:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a426:	f7ff fe44 	bl	800a0b2 <despiselect>

	if (ty) {			/* OK */
 800a42a:	7b7b      	ldrb	r3, [r7, #13]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d012      	beq.n	800a456 <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800a430:	4b10      	ldr	r3, [pc, #64]	; (800a474 <USER_SPI_initialize+0x1e0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a43a:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <USER_SPI_initialize+0x1e0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f042 0210 	orr.w	r2, r2, #16
 800a442:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a444:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <USER_SPI_initialize+0x1dc>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <USER_SPI_initialize+0x1dc>)
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e005      	b.n	800a462 <USER_SPI_initialize+0x1ce>
	} else {			/* Failed */
		printf("UH OHJ SPAGHETTIO\n\n");
 800a456:	480b      	ldr	r0, [pc, #44]	; (800a484 <USER_SPI_initialize+0x1f0>)
 800a458:	f003 fa56 	bl	800d908 <puts>
		Stat = STA_NOINIT;
 800a45c:	4b04      	ldr	r3, [pc, #16]	; (800a470 <USER_SPI_initialize+0x1dc>)
 800a45e:	2201      	movs	r2, #1
 800a460:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a462:	4b03      	ldr	r3, [pc, #12]	; (800a470 <USER_SPI_initialize+0x1dc>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b2db      	uxtb	r3, r3
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd90      	pop	{r4, r7, pc}
 800a470:	20000024 	.word	0x20000024
 800a474:	20000328 	.word	0x20000328
 800a478:	08011488 	.word	0x08011488
 800a47c:	08011490 	.word	0x08011490
 800a480:	2000047d 	.word	0x2000047d
 800a484:	0801149c 	.word	0x0801149c

0800a488 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <USER_SPI_status+0x14>
 800a498:	2301      	movs	r3, #1
 800a49a:	e002      	b.n	800a4a2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a49c:	4b03      	ldr	r3, [pc, #12]	; (800a4ac <USER_SPI_status+0x24>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	b2db      	uxtb	r3, r3
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr
 800a4ac:	20000024 	.word	0x20000024

0800a4b0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	607a      	str	r2, [r7, #4]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <USER_SPI_read+0x1c>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <USER_SPI_read+0x20>
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	e04d      	b.n	800a56c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a4d0:	4b28      	ldr	r3, [pc, #160]	; (800a574 <USER_SPI_read+0xc4>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <USER_SPI_read+0x32>
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e044      	b.n	800a56c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a4e2:	4b25      	ldr	r3, [pc, #148]	; (800a578 <USER_SPI_read+0xc8>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f003 0308 	and.w	r3, r3, #8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <USER_SPI_read+0x44>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	025b      	lsls	r3, r3, #9
 800a4f2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d111      	bne.n	800a51e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	2011      	movs	r0, #17
 800a4fe:	f7ff fe59 	bl	800a1b4 <send_cmd>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d129      	bne.n	800a55c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a50c:	68b8      	ldr	r0, [r7, #8]
 800a50e:	f7ff fdf6 	bl	800a0fe <rcvr_datablock>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d021      	beq.n	800a55c <USER_SPI_read+0xac>
			count = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	e01e      	b.n	800a55c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	2012      	movs	r0, #18
 800a522:	f7ff fe47 	bl	800a1b4 <send_cmd>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d117      	bne.n	800a55c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a52c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f7ff fde4 	bl	800a0fe <rcvr_datablock>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <USER_SPI_read+0xa2>
				buff += 512;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a542:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	3b01      	subs	r3, #1
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1ed      	bne.n	800a52c <USER_SPI_read+0x7c>
 800a550:	e000      	b.n	800a554 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a552:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a554:	2100      	movs	r1, #0
 800a556:	200c      	movs	r0, #12
 800a558:	f7ff fe2c 	bl	800a1b4 <send_cmd>
		}
	}
	despiselect();
 800a55c:	f7ff fda9 	bl	800a0b2 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	bf14      	ite	ne
 800a566:	2301      	movne	r3, #1
 800a568:	2300      	moveq	r3, #0
 800a56a:	b2db      	uxtb	r3, r3
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20000024 	.word	0x20000024
 800a578:	2000047d 	.word	0x2000047d

0800a57c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <USER_SPI_write+0x1c>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <USER_SPI_write+0x20>
 800a598:	2304      	movs	r3, #4
 800a59a:	e063      	b.n	800a664 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a59c:	4b33      	ldr	r3, [pc, #204]	; (800a66c <USER_SPI_write+0xf0>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <USER_SPI_write+0x32>
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e05a      	b.n	800a664 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a5ae:	4b2f      	ldr	r3, [pc, #188]	; (800a66c <USER_SPI_write+0xf0>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <USER_SPI_write+0x44>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e051      	b.n	800a664 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a5c0:	4b2b      	ldr	r3, [pc, #172]	; (800a670 <USER_SPI_write+0xf4>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <USER_SPI_write+0x56>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	025b      	lsls	r3, r3, #9
 800a5d0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d110      	bne.n	800a5fa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	2018      	movs	r0, #24
 800a5dc:	f7ff fdea 	bl	800a1b4 <send_cmd>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d136      	bne.n	800a654 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a5e6:	21fe      	movs	r1, #254	; 0xfe
 800a5e8:	68b8      	ldr	r0, [r7, #8]
 800a5ea:	f7ff fdb1 	bl	800a150 <xmit_datablock>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02f      	beq.n	800a654 <USER_SPI_write+0xd8>
			count = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	e02c      	b.n	800a654 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a5fa:	4b1d      	ldr	r3, [pc, #116]	; (800a670 <USER_SPI_write+0xf4>)
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 0306 	and.w	r3, r3, #6
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <USER_SPI_write+0x92>
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	2097      	movs	r0, #151	; 0x97
 800a60a:	f7ff fdd3 	bl	800a1b4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	2019      	movs	r0, #25
 800a612:	f7ff fdcf 	bl	800a1b4 <send_cmd>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d11b      	bne.n	800a654 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a61c:	21fc      	movs	r1, #252	; 0xfc
 800a61e:	68b8      	ldr	r0, [r7, #8]
 800a620:	f7ff fd96 	bl	800a150 <xmit_datablock>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <USER_SPI_write+0xc4>
				buff += 512;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a630:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	3b01      	subs	r3, #1
 800a636:	603b      	str	r3, [r7, #0]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1ee      	bne.n	800a61c <USER_SPI_write+0xa0>
 800a63e:	e000      	b.n	800a642 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a640:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a642:	21fd      	movs	r1, #253	; 0xfd
 800a644:	2000      	movs	r0, #0
 800a646:	f7ff fd83 	bl	800a150 <xmit_datablock>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <USER_SPI_write+0xd8>
 800a650:	2301      	movs	r3, #1
 800a652:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a654:	f7ff fd2d 	bl	800a0b2 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	bf14      	ite	ne
 800a65e:	2301      	movne	r3, #1
 800a660:	2300      	moveq	r3, #0
 800a662:	b2db      	uxtb	r3, r3
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20000024 	.word	0x20000024
 800a670:	2000047d 	.word	0x2000047d

0800a674 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08c      	sub	sp, #48	; 0x30
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	603a      	str	r2, [r7, #0]
 800a67e:	71fb      	strb	r3, [r7, #7]
 800a680:	460b      	mov	r3, r1
 800a682:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <USER_SPI_ioctl+0x1a>
 800a68a:	2304      	movs	r3, #4
 800a68c:	e15a      	b.n	800a944 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a68e:	4baf      	ldr	r3, [pc, #700]	; (800a94c <USER_SPI_ioctl+0x2d8>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <USER_SPI_ioctl+0x2c>
 800a69c:	2303      	movs	r3, #3
 800a69e:	e151      	b.n	800a944 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a6a6:	79bb      	ldrb	r3, [r7, #6]
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	f200 8136 	bhi.w	800a91a <USER_SPI_ioctl+0x2a6>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <USER_SPI_ioctl+0x40>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a6c9 	.word	0x0800a6c9
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800a91b 	.word	0x0800a91b
 800a6c0:	0800a789 	.word	0x0800a789
 800a6c4:	0800a87f 	.word	0x0800a87f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a6c8:	f7ff fd00 	bl	800a0cc <spiselect>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 8127 	beq.w	800a922 <USER_SPI_ioctl+0x2ae>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a6da:	e122      	b.n	800a922 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a6dc:	2100      	movs	r1, #0
 800a6de:	2009      	movs	r0, #9
 800a6e0:	f7ff fd68 	bl	800a1b4 <send_cmd>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f040 811d 	bne.w	800a926 <USER_SPI_ioctl+0x2b2>
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	2110      	movs	r1, #16
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fd03 	bl	800a0fe <rcvr_datablock>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8113 	beq.w	800a926 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a700:	7b3b      	ldrb	r3, [r7, #12]
 800a702:	099b      	lsrs	r3, r3, #6
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b01      	cmp	r3, #1
 800a708:	d111      	bne.n	800a72e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a70a:	7d7b      	ldrb	r3, [r7, #21]
 800a70c:	461a      	mov	r2, r3
 800a70e:	7d3b      	ldrb	r3, [r7, #20]
 800a710:	021b      	lsls	r3, r3, #8
 800a712:	4413      	add	r3, r2
 800a714:	461a      	mov	r2, r3
 800a716:	7cfb      	ldrb	r3, [r7, #19]
 800a718:	041b      	lsls	r3, r3, #16
 800a71a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a71e:	4413      	add	r3, r2
 800a720:	3301      	adds	r3, #1
 800a722:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	029a      	lsls	r2, r3, #10
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	e028      	b.n	800a780 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a72e:	7c7b      	ldrb	r3, [r7, #17]
 800a730:	f003 030f 	and.w	r3, r3, #15
 800a734:	b2da      	uxtb	r2, r3
 800a736:	7dbb      	ldrb	r3, [r7, #22]
 800a738:	09db      	lsrs	r3, r3, #7
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	7d7b      	ldrb	r3, [r7, #21]
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0306 	and.w	r3, r3, #6
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	4413      	add	r3, r2
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	3302      	adds	r3, #2
 800a752:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a756:	7d3b      	ldrb	r3, [r7, #20]
 800a758:	099b      	lsrs	r3, r3, #6
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	461a      	mov	r2, r3
 800a75e:	7cfb      	ldrb	r3, [r7, #19]
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	441a      	add	r2, r3
 800a764:	7cbb      	ldrb	r3, [r7, #18]
 800a766:	029b      	lsls	r3, r3, #10
 800a768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a76c:	4413      	add	r3, r2
 800a76e:	3301      	adds	r3, #1
 800a770:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a776:	3b09      	subs	r3, #9
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	409a      	lsls	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a786:	e0ce      	b.n	800a926 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a788:	4b71      	ldr	r3, [pc, #452]	; (800a950 <USER_SPI_ioctl+0x2dc>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d031      	beq.n	800a7f8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a794:	2100      	movs	r1, #0
 800a796:	208d      	movs	r0, #141	; 0x8d
 800a798:	f7ff fd0c 	bl	800a1b4 <send_cmd>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f040 80c3 	bne.w	800a92a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a7a4:	20ff      	movs	r0, #255	; 0xff
 800a7a6:	f7ff fc1b 	bl	8009fe0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a7aa:	f107 030c 	add.w	r3, r7, #12
 800a7ae:	2110      	movs	r1, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7ff fca4 	bl	800a0fe <rcvr_datablock>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80b6 	beq.w	800a92a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a7be:	2330      	movs	r3, #48	; 0x30
 800a7c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a7c4:	e007      	b.n	800a7d6 <USER_SPI_ioctl+0x162>
 800a7c6:	20ff      	movs	r0, #255	; 0xff
 800a7c8:	f7ff fc0a 	bl	8009fe0 <xchg_spi>
 800a7cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a7d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1f3      	bne.n	800a7c6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a7de:	7dbb      	ldrb	r3, [r7, #22]
 800a7e0:	091b      	lsrs	r3, r3, #4
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	2310      	movs	r3, #16
 800a7e8:	fa03 f202 	lsl.w	r2, r3, r2
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a7f6:	e098      	b.n	800a92a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	2009      	movs	r0, #9
 800a7fc:	f7ff fcda 	bl	800a1b4 <send_cmd>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 8091 	bne.w	800a92a <USER_SPI_ioctl+0x2b6>
 800a808:	f107 030c 	add.w	r3, r7, #12
 800a80c:	2110      	movs	r1, #16
 800a80e:	4618      	mov	r0, r3
 800a810:	f7ff fc75 	bl	800a0fe <rcvr_datablock>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 8087 	beq.w	800a92a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a81c:	4b4c      	ldr	r3, [pc, #304]	; (800a950 <USER_SPI_ioctl+0x2dc>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d012      	beq.n	800a84e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a828:	7dbb      	ldrb	r3, [r7, #22]
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a830:	7dfa      	ldrb	r2, [r7, #23]
 800a832:	09d2      	lsrs	r2, r2, #7
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	4413      	add	r3, r2
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	7e7b      	ldrb	r3, [r7, #25]
 800a83c:	099b      	lsrs	r3, r3, #6
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	3b01      	subs	r3, #1
 800a842:	fa02 f303 	lsl.w	r3, r2, r3
 800a846:	461a      	mov	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e013      	b.n	800a876 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a84e:	7dbb      	ldrb	r3, [r7, #22]
 800a850:	109b      	asrs	r3, r3, #2
 800a852:	b29b      	uxth	r3, r3
 800a854:	f003 031f 	and.w	r3, r3, #31
 800a858:	3301      	adds	r3, #1
 800a85a:	7dfa      	ldrb	r2, [r7, #23]
 800a85c:	00d2      	lsls	r2, r2, #3
 800a85e:	f002 0218 	and.w	r2, r2, #24
 800a862:	7df9      	ldrb	r1, [r7, #23]
 800a864:	0949      	lsrs	r1, r1, #5
 800a866:	b2c9      	uxtb	r1, r1
 800a868:	440a      	add	r2, r1
 800a86a:	3201      	adds	r2, #1
 800a86c:	fb02 f303 	mul.w	r3, r2, r3
 800a870:	461a      	mov	r2, r3
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a87c:	e055      	b.n	800a92a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a87e:	4b34      	ldr	r3, [pc, #208]	; (800a950 <USER_SPI_ioctl+0x2dc>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	f003 0306 	and.w	r3, r3, #6
 800a886:	2b00      	cmp	r3, #0
 800a888:	d051      	beq.n	800a92e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a88a:	f107 020c 	add.w	r2, r7, #12
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	210b      	movs	r1, #11
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff feee 	bl	800a674 <USER_SPI_ioctl>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d149      	bne.n	800a932 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a89e:	7b3b      	ldrb	r3, [r7, #12]
 800a8a0:	099b      	lsrs	r3, r3, #6
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d104      	bne.n	800a8b2 <USER_SPI_ioctl+0x23e>
 800a8a8:	7dbb      	ldrb	r3, [r7, #22]
 800a8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d041      	beq.n	800a936 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	623b      	str	r3, [r7, #32]
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a8c2:	4b23      	ldr	r3, [pc, #140]	; (800a950 <USER_SPI_ioctl+0x2dc>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 0308 	and.w	r3, r3, #8
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	025b      	lsls	r3, r3, #9
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	025b      	lsls	r3, r3, #9
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a8da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8dc:	2020      	movs	r0, #32
 800a8de:	f7ff fc69 	bl	800a1b4 <send_cmd>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d128      	bne.n	800a93a <USER_SPI_ioctl+0x2c6>
 800a8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8ea:	2021      	movs	r0, #33	; 0x21
 800a8ec:	f7ff fc62 	bl	800a1b4 <send_cmd>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d121      	bne.n	800a93a <USER_SPI_ioctl+0x2c6>
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	2026      	movs	r0, #38	; 0x26
 800a8fa:	f7ff fc5b 	bl	800a1b4 <send_cmd>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d11a      	bne.n	800a93a <USER_SPI_ioctl+0x2c6>
 800a904:	f247 5030 	movw	r0, #30000	; 0x7530
 800a908:	f7ff fbb0 	bl	800a06c <wait_ready>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d013      	beq.n	800a93a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a912:	2300      	movs	r3, #0
 800a914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a918:	e00f      	b.n	800a93a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a91a:	2304      	movs	r3, #4
 800a91c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a920:	e00c      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		break;
 800a922:	bf00      	nop
 800a924:	e00a      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		break;
 800a926:	bf00      	nop
 800a928:	e008      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		break;
 800a92a:	bf00      	nop
 800a92c:	e006      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a92e:	bf00      	nop
 800a930:	e004      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a932:	bf00      	nop
 800a934:	e002      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a936:	bf00      	nop
 800a938:	e000      	b.n	800a93c <USER_SPI_ioctl+0x2c8>
		break;
 800a93a:	bf00      	nop
	}

	despiselect();
 800a93c:	f7ff fbb9 	bl	800a0b2 <despiselect>

	return res;
 800a940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a944:	4618      	mov	r0, r3
 800a946:	3730      	adds	r7, #48	; 0x30
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20000024 	.word	0x20000024
 800a950:	2000047d 	.word	0x2000047d

0800a954 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	4a08      	ldr	r2, [pc, #32]	; (800a984 <disk_status+0x30>)
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	79fa      	ldrb	r2, [r7, #7]
 800a96c:	4905      	ldr	r1, [pc, #20]	; (800a984 <disk_status+0x30>)
 800a96e:	440a      	add	r2, r1
 800a970:	7a12      	ldrb	r2, [r2, #8]
 800a972:	4610      	mov	r0, r2
 800a974:	4798      	blx	r3
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	200004b0 	.word	0x200004b0

0800a988 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	4a0d      	ldr	r2, [pc, #52]	; (800a9d0 <disk_initialize+0x48>)
 800a99a:	5cd3      	ldrb	r3, [r2, r3]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d111      	bne.n	800a9c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	4a0b      	ldr	r2, [pc, #44]	; (800a9d0 <disk_initialize+0x48>)
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	4a09      	ldr	r2, [pc, #36]	; (800a9d0 <disk_initialize+0x48>)
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	79fa      	ldrb	r2, [r7, #7]
 800a9b6:	4906      	ldr	r1, [pc, #24]	; (800a9d0 <disk_initialize+0x48>)
 800a9b8:	440a      	add	r2, r1
 800a9ba:	7a12      	ldrb	r2, [r2, #8]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4798      	blx	r3
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	200004b0 	.word	0x200004b0

0800a9d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	4a0a      	ldr	r2, [pc, #40]	; (800aa10 <disk_read+0x3c>)
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	689c      	ldr	r4, [r3, #8]
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	4a07      	ldr	r2, [pc, #28]	; (800aa10 <disk_read+0x3c>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	7a18      	ldrb	r0, [r3, #8]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	68b9      	ldr	r1, [r7, #8]
 800a9fe:	47a0      	blx	r4
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd90      	pop	{r4, r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	200004b0 	.word	0x200004b0

0800aa14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	607a      	str	r2, [r7, #4]
 800aa1e:	603b      	str	r3, [r7, #0]
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4a0a      	ldr	r2, [pc, #40]	; (800aa50 <disk_write+0x3c>)
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68dc      	ldr	r4, [r3, #12]
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	4a07      	ldr	r2, [pc, #28]	; (800aa50 <disk_write+0x3c>)
 800aa34:	4413      	add	r3, r2
 800aa36:	7a18      	ldrb	r0, [r3, #8]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	47a0      	blx	r4
 800aa40:	4603      	mov	r3, r0
 800aa42:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa44:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd90      	pop	{r4, r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200004b0 	.word	0x200004b0

0800aa54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	603a      	str	r2, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
 800aa60:	460b      	mov	r3, r1
 800aa62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	4a09      	ldr	r2, [pc, #36]	; (800aa8c <disk_ioctl+0x38>)
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	79fa      	ldrb	r2, [r7, #7]
 800aa72:	4906      	ldr	r1, [pc, #24]	; (800aa8c <disk_ioctl+0x38>)
 800aa74:	440a      	add	r2, r1
 800aa76:	7a10      	ldrb	r0, [r2, #8]
 800aa78:	79b9      	ldrb	r1, [r7, #6]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	4798      	blx	r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	200004b0 	.word	0x200004b0

0800aa90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aaa0:	89fb      	ldrh	r3, [r7, #14]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	b21a      	sxth	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	b21b      	sxth	r3, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	b21b      	sxth	r3, r3
 800aab0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aab2:	89fb      	ldrh	r3, [r7, #14]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aabe:	b480      	push	{r7}
 800aac0:	b085      	sub	sp, #20
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	3303      	adds	r3, #3
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	021b      	lsls	r3, r3, #8
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	3202      	adds	r2, #2
 800aad6:	7812      	ldrb	r2, [r2, #0]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	021b      	lsls	r3, r3, #8
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	3201      	adds	r2, #1
 800aae4:	7812      	ldrb	r2, [r2, #0]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	021b      	lsls	r3, r3, #8
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	7812      	ldrb	r2, [r2, #0]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]
	return rv;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bc80      	pop	{r7}
 800ab00:	4770      	bx	lr

0800ab02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	887a      	ldrh	r2, [r7, #2]
 800ab16:	b2d2      	uxtb	r2, r2
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	887b      	ldrh	r3, [r7, #2]
 800ab1c:	0a1b      	lsrs	r3, r3, #8
 800ab1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	607a      	str	r2, [r7, #4]
 800ab26:	887a      	ldrh	r2, [r7, #2]
 800ab28:	b2d2      	uxtb	r2, r2
 800ab2a:	701a      	strb	r2, [r3, #0]
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr

0800ab36 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	0a1b      	lsrs	r3, r3, #8
 800ab62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	1c5a      	adds	r2, r3, #1
 800ab68:	607a      	str	r2, [r7, #4]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	b2d2      	uxtb	r2, r2
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	0a1b      	lsrs	r3, r3, #8
 800ab74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	b2d2      	uxtb	r2, r2
 800ab80:	701a      	strb	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bc80      	pop	{r7}
 800ab8a:	4770      	bx	lr

0800ab8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	1c53      	adds	r3, r2, #1
 800abaa:	613b      	str	r3, [r7, #16]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	1c59      	adds	r1, r3, #1
 800abb0:	6179      	str	r1, [r7, #20]
 800abb2:	7812      	ldrb	r2, [r2, #0]
 800abb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3b01      	subs	r3, #1
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f1      	bne.n	800aba6 <mem_cpy+0x1a>
	}
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bc80      	pop	{r7}
 800abca:	4770      	bx	lr

0800abcc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	617a      	str	r2, [r7, #20]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	b2d2      	uxtb	r2, r2
 800abe6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3b01      	subs	r3, #1
 800abec:	607b      	str	r3, [r7, #4]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1f3      	bne.n	800abdc <mem_set+0x10>
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	371c      	adds	r7, #28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bc80      	pop	{r7}
 800abfe:	4770      	bx	lr

0800ac00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac00:	b480      	push	{r7}
 800ac02:	b089      	sub	sp, #36	; 0x24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	61fa      	str	r2, [r7, #28]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	4619      	mov	r1, r3
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	61ba      	str	r2, [r7, #24]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	1acb      	subs	r3, r1, r3
 800ac2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	607b      	str	r3, [r7, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <mem_cmp+0x40>
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0eb      	beq.n	800ac18 <mem_cmp+0x18>

	return r;
 800ac40:	697b      	ldr	r3, [r7, #20]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3724      	adds	r7, #36	; 0x24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr

0800ac4c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac56:	e002      	b.n	800ac5e <chk_chr+0x12>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d005      	beq.n	800ac72 <chk_chr+0x26>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d1f2      	bne.n	800ac58 <chk_chr+0xc>
	return *str;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	781b      	ldrb	r3, [r3, #0]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr

0800ac80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e029      	b.n	800ace8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac94:	4a26      	ldr	r2, [pc, #152]	; (800ad30 <chk_lock+0xb0>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	4413      	add	r3, r2
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d01d      	beq.n	800acde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aca2:	4a23      	ldr	r2, [pc, #140]	; (800ad30 <chk_lock+0xb0>)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	4413      	add	r3, r2
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d116      	bne.n	800ace2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800acb4:	4a1e      	ldr	r2, [pc, #120]	; (800ad30 <chk_lock+0xb0>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	4413      	add	r3, r2
 800acbc:	3304      	adds	r3, #4
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d10c      	bne.n	800ace2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acc8:	4a19      	ldr	r2, [pc, #100]	; (800ad30 <chk_lock+0xb0>)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	011b      	lsls	r3, r3, #4
 800acce:	4413      	add	r3, r2
 800acd0:	3308      	adds	r3, #8
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800acd8:	429a      	cmp	r2, r3
 800acda:	d102      	bne.n	800ace2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acdc:	e007      	b.n	800acee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800acde:	2301      	movs	r3, #1
 800ace0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3301      	adds	r3, #1
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d9d2      	bls.n	800ac94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d109      	bne.n	800ad08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d102      	bne.n	800ad00 <chk_lock+0x80>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d101      	bne.n	800ad04 <chk_lock+0x84>
 800ad00:	2300      	movs	r3, #0
 800ad02:	e010      	b.n	800ad26 <chk_lock+0xa6>
 800ad04:	2312      	movs	r3, #18
 800ad06:	e00e      	b.n	800ad26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d108      	bne.n	800ad20 <chk_lock+0xa0>
 800ad0e:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <chk_lock+0xb0>)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	4413      	add	r3, r2
 800ad16:	330c      	adds	r3, #12
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad1e:	d101      	bne.n	800ad24 <chk_lock+0xa4>
 800ad20:	2310      	movs	r3, #16
 800ad22:	e000      	b.n	800ad26 <chk_lock+0xa6>
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bc80      	pop	{r7}
 800ad2e:	4770      	bx	lr
 800ad30:	20000490 	.word	0x20000490

0800ad34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	607b      	str	r3, [r7, #4]
 800ad3e:	e002      	b.n	800ad46 <enq_lock+0x12>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3301      	adds	r3, #1
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d806      	bhi.n	800ad5a <enq_lock+0x26>
 800ad4c:	4a08      	ldr	r2, [pc, #32]	; (800ad70 <enq_lock+0x3c>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	011b      	lsls	r3, r3, #4
 800ad52:	4413      	add	r3, r2
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f2      	bne.n	800ad40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	bf14      	ite	ne
 800ad60:	2301      	movne	r3, #1
 800ad62:	2300      	moveq	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bc80      	pop	{r7}
 800ad6e:	4770      	bx	lr
 800ad70:	20000490 	.word	0x20000490

0800ad74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60fb      	str	r3, [r7, #12]
 800ad82:	e01f      	b.n	800adc4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad84:	4a41      	ldr	r2, [pc, #260]	; (800ae8c <inc_lock+0x118>)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	4413      	add	r3, r2
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d113      	bne.n	800adbe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad96:	4a3d      	ldr	r2, [pc, #244]	; (800ae8c <inc_lock+0x118>)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	011b      	lsls	r3, r3, #4
 800ad9c:	4413      	add	r3, r2
 800ad9e:	3304      	adds	r3, #4
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d109      	bne.n	800adbe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800adaa:	4a38      	ldr	r2, [pc, #224]	; (800ae8c <inc_lock+0x118>)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	4413      	add	r3, r2
 800adb2:	3308      	adds	r3, #8
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800adba:	429a      	cmp	r2, r3
 800adbc:	d006      	beq.n	800adcc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d9dc      	bls.n	800ad84 <inc_lock+0x10>
 800adca:	e000      	b.n	800adce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800adcc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b02      	cmp	r3, #2
 800add2:	d132      	bne.n	800ae3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800add4:	2300      	movs	r3, #0
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e002      	b.n	800ade0 <inc_lock+0x6c>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3301      	adds	r3, #1
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d806      	bhi.n	800adf4 <inc_lock+0x80>
 800ade6:	4a29      	ldr	r2, [pc, #164]	; (800ae8c <inc_lock+0x118>)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	4413      	add	r3, r2
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1f2      	bne.n	800adda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d101      	bne.n	800adfe <inc_lock+0x8a>
 800adfa:	2300      	movs	r3, #0
 800adfc:	e040      	b.n	800ae80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4922      	ldr	r1, [pc, #136]	; (800ae8c <inc_lock+0x118>)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	440b      	add	r3, r1
 800ae0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	491e      	ldr	r1, [pc, #120]	; (800ae8c <inc_lock+0x118>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	011b      	lsls	r3, r3, #4
 800ae16:	440b      	add	r3, r1
 800ae18:	3304      	adds	r3, #4
 800ae1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	695a      	ldr	r2, [r3, #20]
 800ae20:	491a      	ldr	r1, [pc, #104]	; (800ae8c <inc_lock+0x118>)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	440b      	add	r3, r1
 800ae28:	3308      	adds	r3, #8
 800ae2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae2c:	4a17      	ldr	r2, [pc, #92]	; (800ae8c <inc_lock+0x118>)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	4413      	add	r3, r2
 800ae34:	330c      	adds	r3, #12
 800ae36:	2200      	movs	r2, #0
 800ae38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <inc_lock+0xe0>
 800ae40:	4a12      	ldr	r2, [pc, #72]	; (800ae8c <inc_lock+0x118>)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	4413      	add	r3, r2
 800ae48:	330c      	adds	r3, #12
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <inc_lock+0xe0>
 800ae50:	2300      	movs	r3, #0
 800ae52:	e015      	b.n	800ae80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d108      	bne.n	800ae6c <inc_lock+0xf8>
 800ae5a:	4a0c      	ldr	r2, [pc, #48]	; (800ae8c <inc_lock+0x118>)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	011b      	lsls	r3, r3, #4
 800ae60:	4413      	add	r3, r2
 800ae62:	330c      	adds	r3, #12
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	e001      	b.n	800ae70 <inc_lock+0xfc>
 800ae6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae70:	4906      	ldr	r1, [pc, #24]	; (800ae8c <inc_lock+0x118>)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	011b      	lsls	r3, r3, #4
 800ae76:	440b      	add	r3, r1
 800ae78:	330c      	adds	r3, #12
 800ae7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bc80      	pop	{r7}
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20000490 	.word	0x20000490

0800ae90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	607b      	str	r3, [r7, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d825      	bhi.n	800aef0 <dec_lock+0x60>
		n = Files[i].ctr;
 800aea4:	4a16      	ldr	r2, [pc, #88]	; (800af00 <dec_lock+0x70>)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	4413      	add	r3, r2
 800aeac:	330c      	adds	r3, #12
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aeb2:	89fb      	ldrh	r3, [r7, #14]
 800aeb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb8:	d101      	bne.n	800aebe <dec_lock+0x2e>
 800aeba:	2300      	movs	r3, #0
 800aebc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aebe:	89fb      	ldrh	r3, [r7, #14]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <dec_lock+0x3a>
 800aec4:	89fb      	ldrh	r3, [r7, #14]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aeca:	4a0d      	ldr	r2, [pc, #52]	; (800af00 <dec_lock+0x70>)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	011b      	lsls	r3, r3, #4
 800aed0:	4413      	add	r3, r2
 800aed2:	330c      	adds	r3, #12
 800aed4:	89fa      	ldrh	r2, [r7, #14]
 800aed6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aed8:	89fb      	ldrh	r3, [r7, #14]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d105      	bne.n	800aeea <dec_lock+0x5a>
 800aede:	4a08      	ldr	r2, [pc, #32]	; (800af00 <dec_lock+0x70>)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	4413      	add	r3, r2
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	737b      	strb	r3, [r7, #13]
 800aeee:	e001      	b.n	800aef4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aef0:	2302      	movs	r3, #2
 800aef2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aef4:	7b7b      	ldrb	r3, [r7, #13]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr
 800af00:	20000490 	.word	0x20000490

0800af04 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e010      	b.n	800af34 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af12:	4a0d      	ldr	r2, [pc, #52]	; (800af48 <clear_lock+0x44>)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	4413      	add	r3, r2
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d105      	bne.n	800af2e <clear_lock+0x2a>
 800af22:	4a09      	ldr	r2, [pc, #36]	; (800af48 <clear_lock+0x44>)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	4413      	add	r3, r2
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3301      	adds	r3, #1
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d9eb      	bls.n	800af12 <clear_lock+0xe>
	}
}
 800af3a:	bf00      	nop
 800af3c:	bf00      	nop
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	bc80      	pop	{r7}
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	20000490 	.word	0x20000490

0800af4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	78db      	ldrb	r3, [r3, #3]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d034      	beq.n	800afca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	7858      	ldrb	r0, [r3, #1]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af70:	2301      	movs	r3, #1
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	f7ff fd4e 	bl	800aa14 <disk_write>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <sync_window+0x38>
			res = FR_DISK_ERR;
 800af7e:	2301      	movs	r3, #1
 800af80:	73fb      	strb	r3, [r7, #15]
 800af82:	e022      	b.n	800afca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	1ad2      	subs	r2, r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	429a      	cmp	r2, r3
 800af98:	d217      	bcs.n	800afca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	789b      	ldrb	r3, [r3, #2]
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	e010      	b.n	800afc4 <sync_window+0x78>
					wsect += fs->fsize;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4413      	add	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7858      	ldrb	r0, [r3, #1]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afb6:	2301      	movs	r3, #1
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	f7ff fd2b 	bl	800aa14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d8eb      	bhi.n	800afa2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d01b      	beq.n	800b024 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ffad 	bl	800af4c <sync_window>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d113      	bne.n	800b024 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7858      	ldrb	r0, [r3, #1]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b006:	2301      	movs	r3, #1
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	f7ff fce3 	bl	800a9d4 <disk_read>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b018:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b024:	7bfb      	ldrb	r3, [r7, #15]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
	...

0800b030 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ff87 	bl	800af4c <sync_window>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d158      	bne.n	800b0fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d148      	bne.n	800b0e2 <sync_fs+0xb2>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	791b      	ldrb	r3, [r3, #4]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d144      	bne.n	800b0e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3330      	adds	r3, #48	; 0x30
 800b05c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fdb2 	bl	800abcc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3330      	adds	r3, #48	; 0x30
 800b06c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b070:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff fd44 	bl	800ab02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3330      	adds	r3, #48	; 0x30
 800b07e:	4921      	ldr	r1, [pc, #132]	; (800b104 <sync_fs+0xd4>)
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fd58 	bl	800ab36 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3330      	adds	r3, #48	; 0x30
 800b08a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b08e:	491e      	ldr	r1, [pc, #120]	; (800b108 <sync_fs+0xd8>)
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff fd50 	bl	800ab36 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3330      	adds	r3, #48	; 0x30
 800b09a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f7ff fd46 	bl	800ab36 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3330      	adds	r3, #48	; 0x30
 800b0ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7ff fd3c 	bl	800ab36 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	7858      	ldrb	r0, [r3, #1]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f7ff fc9c 	bl	800aa14 <disk_write>
			fs->fsi_flag = 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fcb2 	bl	800aa54 <disk_ioctl>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <sync_fs+0xca>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	41615252 	.word	0x41615252
 800b108:	61417272 	.word	0x61417272

0800b10c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	3b02      	subs	r3, #2
 800b11a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	3b02      	subs	r3, #2
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d301      	bcc.n	800b12c <clust2sect+0x20>
 800b128:	2300      	movs	r3, #0
 800b12a:	e008      	b.n	800b13e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	895b      	ldrh	r3, [r3, #10]
 800b130:	461a      	mov	r2, r3
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	fb03 f202 	mul.w	r2, r3, r2
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	4413      	add	r3, r2
}
 800b13e:	4618      	mov	r0, r3
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	bc80      	pop	{r7}
 800b146:	4770      	bx	lr

0800b148 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d904      	bls.n	800b168 <get_fat+0x20>
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d302      	bcc.n	800b16e <get_fat+0x26>
		val = 1;	/* Internal error */
 800b168:	2301      	movs	r3, #1
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	e08f      	b.n	800b28e <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b16e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b172:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d062      	beq.n	800b242 <get_fat+0xfa>
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	dc7c      	bgt.n	800b27a <get_fat+0x132>
 800b180:	2b01      	cmp	r3, #1
 800b182:	d002      	beq.n	800b18a <get_fat+0x42>
 800b184:	2b02      	cmp	r3, #2
 800b186:	d042      	beq.n	800b20e <get_fat+0xc6>
 800b188:	e077      	b.n	800b27a <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	085b      	lsrs	r3, r3, #1
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	4413      	add	r3, r2
 800b196:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6a1a      	ldr	r2, [r3, #32]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	0a5b      	lsrs	r3, r3, #9
 800b1a0:	4413      	add	r3, r2
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6938      	ldr	r0, [r7, #16]
 800b1a6:	f7ff ff15 	bl	800afd4 <move_window>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d167      	bne.n	800b280 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	60fa      	str	r2, [r7, #12]
 800b1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1c2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	6a1a      	ldr	r2, [r3, #32]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	0a5b      	lsrs	r3, r3, #9
 800b1cc:	4413      	add	r3, r2
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6938      	ldr	r0, [r7, #16]
 800b1d2:	f7ff feff 	bl	800afd4 <move_window>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d153      	bne.n	800b284 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d002      	beq.n	800b204 <get_fat+0xbc>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	091b      	lsrs	r3, r3, #4
 800b202:	e002      	b.n	800b20a <get_fat+0xc2>
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b20a:	617b      	str	r3, [r7, #20]
			break;
 800b20c:	e03f      	b.n	800b28e <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6a1a      	ldr	r2, [r3, #32]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	4413      	add	r3, r2
 800b218:	4619      	mov	r1, r3
 800b21a:	6938      	ldr	r0, [r7, #16]
 800b21c:	f7ff feda 	bl	800afd4 <move_window>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d130      	bne.n	800b288 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b234:	4413      	add	r3, r2
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff fc2a 	bl	800aa90 <ld_word>
 800b23c:	4603      	mov	r3, r0
 800b23e:	617b      	str	r3, [r7, #20]
			break;
 800b240:	e025      	b.n	800b28e <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6a1a      	ldr	r2, [r3, #32]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	09db      	lsrs	r3, r3, #7
 800b24a:	4413      	add	r3, r2
 800b24c:	4619      	mov	r1, r3
 800b24e:	6938      	ldr	r0, [r7, #16]
 800b250:	f7ff fec0 	bl	800afd4 <move_window>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d118      	bne.n	800b28c <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b268:	4413      	add	r3, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff fc27 	bl	800aabe <ld_dword>
 800b270:	4603      	mov	r3, r0
 800b272:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b276:	617b      	str	r3, [r7, #20]
			break;
 800b278:	e009      	b.n	800b28e <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b27a:	2301      	movs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e006      	b.n	800b28e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b280:	bf00      	nop
 800b282:	e004      	b.n	800b28e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b284:	bf00      	nop
 800b286:	e002      	b.n	800b28e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b288:	bf00      	nop
 800b28a:	e000      	b.n	800b28e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b28c:	bf00      	nop
		}
	}

	return val;
 800b28e:	697b      	ldr	r3, [r7, #20]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b089      	sub	sp, #36	; 0x24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	f240 80d9 	bls.w	800b462 <put_fat+0x1ca>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	f080 80d3 	bcs.w	800b462 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	f000 8096 	beq.w	800b3f2 <put_fat+0x15a>
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	f300 80cb 	bgt.w	800b462 <put_fat+0x1ca>
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d002      	beq.n	800b2d6 <put_fat+0x3e>
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d06e      	beq.n	800b3b2 <put_fat+0x11a>
 800b2d4:	e0c5      	b.n	800b462 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	61bb      	str	r3, [r7, #24]
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	085b      	lsrs	r3, r3, #1
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a1a      	ldr	r2, [r3, #32]
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	0a5b      	lsrs	r3, r3, #9
 800b2ec:	4413      	add	r3, r2
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f7ff fe6f 	bl	800afd4 <move_window>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2fa:	7ffb      	ldrb	r3, [r7, #31]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 80a9 	bne.w	800b454 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	1c59      	adds	r1, r3, #1
 800b30c:	61b9      	str	r1, [r7, #24]
 800b30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b312:	4413      	add	r3, r2
 800b314:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00d      	beq.n	800b33c <put_fat+0xa4>
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	b25b      	sxtb	r3, r3
 800b326:	f003 030f 	and.w	r3, r3, #15
 800b32a:	b25a      	sxtb	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	b25b      	sxtb	r3, r3
 800b334:	4313      	orrs	r3, r2
 800b336:	b25b      	sxtb	r3, r3
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	e001      	b.n	800b340 <put_fat+0xa8>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2201      	movs	r2, #1
 800b348:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a1a      	ldr	r2, [r3, #32]
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	0a5b      	lsrs	r3, r3, #9
 800b352:	4413      	add	r3, r2
 800b354:	4619      	mov	r1, r3
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f7ff fe3c 	bl	800afd4 <move_window>
 800b35c:	4603      	mov	r3, r0
 800b35e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b360:	7ffb      	ldrb	r3, [r7, #31]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d178      	bne.n	800b458 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b372:	4413      	add	r3, r2
 800b374:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <put_fat+0xf0>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	091b      	lsrs	r3, r3, #4
 800b384:	b2db      	uxtb	r3, r3
 800b386:	e00e      	b.n	800b3a6 <put_fat+0x10e>
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b25b      	sxtb	r3, r3
 800b38e:	f023 030f 	bic.w	r3, r3, #15
 800b392:	b25a      	sxtb	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	0a1b      	lsrs	r3, r3, #8
 800b398:	b25b      	sxtb	r3, r3
 800b39a:	f003 030f 	and.w	r3, r3, #15
 800b39e:	b25b      	sxtb	r3, r3
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	b25b      	sxtb	r3, r3
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	70da      	strb	r2, [r3, #3]
			break;
 800b3b0:	e057      	b.n	800b462 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a1a      	ldr	r2, [r3, #32]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	0a1b      	lsrs	r3, r3, #8
 800b3ba:	4413      	add	r3, r2
 800b3bc:	4619      	mov	r1, r3
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fe08 	bl	800afd4 <move_window>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3c8:	7ffb      	ldrb	r3, [r7, #31]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d146      	bne.n	800b45c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3dc:	4413      	add	r3, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	b292      	uxth	r2, r2
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff fb8c 	bl	800ab02 <st_word>
			fs->wflag = 1;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	70da      	strb	r2, [r3, #3]
			break;
 800b3f0:	e037      	b.n	800b462 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6a1a      	ldr	r2, [r3, #32]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	09db      	lsrs	r3, r3, #7
 800b3fa:	4413      	add	r3, r2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f7ff fde8 	bl	800afd4 <move_window>
 800b404:	4603      	mov	r3, r0
 800b406:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b408:	7ffb      	ldrb	r3, [r7, #31]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d128      	bne.n	800b460 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b422:	4413      	add	r3, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fb4a 	bl	800aabe <ld_dword>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b430:	4323      	orrs	r3, r4
 800b432:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b442:	4413      	add	r3, r2
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff fb75 	bl	800ab36 <st_dword>
			fs->wflag = 1;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	70da      	strb	r2, [r3, #3]
			break;
 800b452:	e006      	b.n	800b462 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b454:	bf00      	nop
 800b456:	e004      	b.n	800b462 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b458:	bf00      	nop
 800b45a:	e002      	b.n	800b462 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b45c:	bf00      	nop
 800b45e:	e000      	b.n	800b462 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b460:	bf00      	nop
		}
	}
	return res;
 800b462:	7ffb      	ldrb	r3, [r7, #31]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3724      	adds	r7, #36	; 0x24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd90      	pop	{r4, r7, pc}

0800b46c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d904      	bls.n	800b492 <remove_chain+0x26>
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	695b      	ldr	r3, [r3, #20]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d301      	bcc.n	800b496 <remove_chain+0x2a>
 800b492:	2302      	movs	r3, #2
 800b494:	e04b      	b.n	800b52e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00c      	beq.n	800b4b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	69b8      	ldr	r0, [r7, #24]
 800b4a4:	f7ff fef8 	bl	800b298 <put_fat>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b4ac:	7ffb      	ldrb	r3, [r7, #31]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <remove_chain+0x4a>
 800b4b2:	7ffb      	ldrb	r3, [r7, #31]
 800b4b4:	e03b      	b.n	800b52e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fe45 	bl	800b148 <get_fat>
 800b4be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d031      	beq.n	800b52a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d101      	bne.n	800b4d0 <remove_chain+0x64>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e02e      	b.n	800b52e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4d6:	d101      	bne.n	800b4dc <remove_chain+0x70>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e028      	b.n	800b52e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b4dc:	2200      	movs	r2, #0
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	69b8      	ldr	r0, [r7, #24]
 800b4e2:	f7ff fed9 	bl	800b298 <put_fat>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b4ea:	7ffb      	ldrb	r3, [r7, #31]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <remove_chain+0x88>
 800b4f0:	7ffb      	ldrb	r3, [r7, #31]
 800b4f2:	e01c      	b.n	800b52e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	691a      	ldr	r2, [r3, #16]
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	3b02      	subs	r3, #2
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d20b      	bcs.n	800b51a <remove_chain+0xae>
			fs->free_clst++;
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	791b      	ldrb	r3, [r3, #4]
 800b510:	f043 0301 	orr.w	r3, r3, #1
 800b514:	b2da      	uxtb	r2, r3
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	429a      	cmp	r2, r3
 800b526:	d3c6      	bcc.n	800b4b6 <remove_chain+0x4a>
 800b528:	e000      	b.n	800b52c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b52a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3720      	adds	r7, #32
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b088      	sub	sp, #32
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10d      	bne.n	800b568 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <create_chain+0x2c>
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d31b      	bcc.n	800b59a <create_chain+0x64>
 800b562:	2301      	movs	r3, #1
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	e018      	b.n	800b59a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fdec 	bl	800b148 <get_fat>
 800b570:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d801      	bhi.n	800b57c <create_chain+0x46>
 800b578:	2301      	movs	r3, #1
 800b57a:	e070      	b.n	800b65e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b582:	d101      	bne.n	800b588 <create_chain+0x52>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	e06a      	b.n	800b65e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d201      	bcs.n	800b596 <create_chain+0x60>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	e063      	b.n	800b65e <create_chain+0x128>
		scl = clst;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d307      	bcc.n	800b5be <create_chain+0x88>
				ncl = 2;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d901      	bls.n	800b5be <create_chain+0x88>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e04f      	b.n	800b65e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b5be:	69f9      	ldr	r1, [r7, #28]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7ff fdc1 	bl	800b148 <get_fat>
 800b5c6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00e      	beq.n	800b5ec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d003      	beq.n	800b5dc <create_chain+0xa6>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5da:	d101      	bne.n	800b5e0 <create_chain+0xaa>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	e03e      	b.n	800b65e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b5e0:	69fa      	ldr	r2, [r7, #28]
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d1da      	bne.n	800b59e <create_chain+0x68>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e038      	b.n	800b65e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b5ec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5f2:	69f9      	ldr	r1, [r7, #28]
 800b5f4:	6938      	ldr	r0, [r7, #16]
 800b5f6:	f7ff fe4f 	bl	800b298 <put_fat>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d109      	bne.n	800b618 <create_chain+0xe2>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d006      	beq.n	800b618 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b60a:	69fa      	ldr	r2, [r7, #28]
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6938      	ldr	r0, [r7, #16]
 800b610:	f7ff fe42 	bl	800b298 <put_fat>
 800b614:	4603      	mov	r3, r0
 800b616:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d116      	bne.n	800b64c <create_chain+0x116>
		fs->last_clst = ncl;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	69fa      	ldr	r2, [r7, #28]
 800b622:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	691a      	ldr	r2, [r3, #16]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	3b02      	subs	r3, #2
 800b62e:	429a      	cmp	r2, r3
 800b630:	d804      	bhi.n	800b63c <create_chain+0x106>
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	1e5a      	subs	r2, r3, #1
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	791b      	ldrb	r3, [r3, #4]
 800b640:	f043 0301 	orr.w	r3, r3, #1
 800b644:	b2da      	uxtb	r2, r3
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	711a      	strb	r2, [r3, #4]
 800b64a:	e007      	b.n	800b65c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d102      	bne.n	800b658 <create_chain+0x122>
 800b652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b656:	e000      	b.n	800b65a <create_chain+0x124>
 800b658:	2301      	movs	r3, #1
 800b65a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b65c:	69fb      	ldr	r3, [r7, #28]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3720      	adds	r7, #32
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b666:	b480      	push	{r7}
 800b668:	b087      	sub	sp, #28
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	3304      	adds	r3, #4
 800b67c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	0a5b      	lsrs	r3, r3, #9
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	8952      	ldrh	r2, [r2, #10]
 800b686:	fbb3 f3f2 	udiv	r3, r3, r2
 800b68a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	613a      	str	r2, [r7, #16]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <clmt_clust+0x3a>
 800b69c:	2300      	movs	r3, #0
 800b69e:	e010      	b.n	800b6c2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d307      	bcc.n	800b6b8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b6b6:	e7e9      	b.n	800b68c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b6b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	4413      	add	r3, r2
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	371c      	adds	r7, #28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bc80      	pop	{r7}
 800b6ca:	4770      	bx	lr

0800b6cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6e2:	d204      	bcs.n	800b6ee <dir_sdi+0x22>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	f003 031f 	and.w	r3, r3, #31
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e063      	b.n	800b7ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <dir_sdi+0x46>
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d902      	bls.n	800b712 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b710:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10c      	bne.n	800b732 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	095b      	lsrs	r3, r3, #5
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	8912      	ldrh	r2, [r2, #8]
 800b720:	4293      	cmp	r3, r2
 800b722:	d301      	bcc.n	800b728 <dir_sdi+0x5c>
 800b724:	2302      	movs	r3, #2
 800b726:	e048      	b.n	800b7ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	61da      	str	r2, [r3, #28]
 800b730:	e029      	b.n	800b786 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	895b      	ldrh	r3, [r3, #10]
 800b736:	025b      	lsls	r3, r3, #9
 800b738:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b73a:	e019      	b.n	800b770 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6979      	ldr	r1, [r7, #20]
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fd01 	bl	800b148 <get_fat>
 800b746:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b74e:	d101      	bne.n	800b754 <dir_sdi+0x88>
 800b750:	2301      	movs	r3, #1
 800b752:	e032      	b.n	800b7ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d904      	bls.n	800b764 <dir_sdi+0x98>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	429a      	cmp	r2, r3
 800b762:	d301      	bcc.n	800b768 <dir_sdi+0x9c>
 800b764:	2302      	movs	r3, #2
 800b766:	e028      	b.n	800b7ba <dir_sdi+0xee>
			ofs -= csz;
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	429a      	cmp	r2, r3
 800b776:	d2e1      	bcs.n	800b73c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b778:	6979      	ldr	r1, [r7, #20]
 800b77a:	6938      	ldr	r0, [r7, #16]
 800b77c:	f7ff fcc6 	bl	800b10c <clust2sect>
 800b780:	4602      	mov	r2, r0
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	69db      	ldr	r3, [r3, #28]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <dir_sdi+0xcc>
 800b794:	2302      	movs	r3, #2
 800b796:	e010      	b.n	800b7ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	69da      	ldr	r2, [r3, #28]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	0a5b      	lsrs	r3, r3, #9
 800b7a0:	441a      	add	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b2:	441a      	add	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b086      	sub	sp, #24
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	3320      	adds	r3, #32
 800b7d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <dir_next+0x28>
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7e8:	d301      	bcc.n	800b7ee <dir_next+0x2c>
 800b7ea:	2304      	movs	r3, #4
 800b7ec:	e0aa      	b.n	800b944 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f040 8098 	bne.w	800b92a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	69db      	ldr	r3, [r3, #28]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	095b      	lsrs	r3, r3, #5
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	8912      	ldrh	r2, [r2, #8]
 800b814:	4293      	cmp	r3, r2
 800b816:	f0c0 8088 	bcc.w	800b92a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	61da      	str	r2, [r3, #28]
 800b820:	2304      	movs	r3, #4
 800b822:	e08f      	b.n	800b944 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	0a5b      	lsrs	r3, r3, #9
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	8952      	ldrh	r2, [r2, #10]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	4013      	ands	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	d17a      	bne.n	800b92a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	4619      	mov	r1, r3
 800b83c:	4610      	mov	r0, r2
 800b83e:	f7ff fc83 	bl	800b148 <get_fat>
 800b842:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d801      	bhi.n	800b84e <dir_next+0x8c>
 800b84a:	2302      	movs	r3, #2
 800b84c:	e07a      	b.n	800b944 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b854:	d101      	bne.n	800b85a <dir_next+0x98>
 800b856:	2301      	movs	r3, #1
 800b858:	e074      	b.n	800b944 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d358      	bcc.n	800b916 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d104      	bne.n	800b874 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	61da      	str	r2, [r3, #28]
 800b870:	2304      	movs	r3, #4
 800b872:	e067      	b.n	800b944 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	4619      	mov	r1, r3
 800b87c:	4610      	mov	r0, r2
 800b87e:	f7ff fe5a 	bl	800b536 <create_chain>
 800b882:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <dir_next+0xcc>
 800b88a:	2307      	movs	r3, #7
 800b88c:	e05a      	b.n	800b944 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <dir_next+0xd6>
 800b894:	2302      	movs	r3, #2
 800b896:	e055      	b.n	800b944 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b89e:	d101      	bne.n	800b8a4 <dir_next+0xe2>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e04f      	b.n	800b944 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff fb51 	bl	800af4c <sync_window>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <dir_next+0xf2>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e047      	b.n	800b944 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3330      	adds	r3, #48	; 0x30
 800b8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f984 	bl	800abcc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	613b      	str	r3, [r7, #16]
 800b8c8:	6979      	ldr	r1, [r7, #20]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7ff fc1e 	bl	800b10c <clust2sect>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b8d6:	e012      	b.n	800b8fe <dir_next+0x13c>
						fs->wflag = 1;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fb34 	bl	800af4c <sync_window>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <dir_next+0x12c>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e02a      	b.n	800b944 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	895b      	ldrh	r3, [r3, #10]
 800b902:	461a      	mov	r2, r3
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	4293      	cmp	r3, r2
 800b908:	d3e6      	bcc.n	800b8d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b91c:	6979      	ldr	r1, [r7, #20]
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fbf4 	bl	800b10c <clust2sect>
 800b924:	4602      	mov	r2, r0
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93c:	441a      	add	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b95c:	2100      	movs	r1, #0
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff feb4 	bl	800b6cc <dir_sdi>
 800b964:	4603      	mov	r3, r0
 800b966:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d12b      	bne.n	800b9c6 <dir_alloc+0x7a>
		n = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	4619      	mov	r1, r3
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fb2b 	bl	800afd4 <move_window>
 800b97e:	4603      	mov	r3, r0
 800b980:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11d      	bne.n	800b9c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2be5      	cmp	r3, #229	; 0xe5
 800b990:	d004      	beq.n	800b99c <dir_alloc+0x50>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d107      	bne.n	800b9ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	613b      	str	r3, [r7, #16]
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d102      	bne.n	800b9b0 <dir_alloc+0x64>
 800b9aa:	e00c      	b.n	800b9c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff ff05 	bl	800b7c2 <dir_next>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0d7      	beq.n	800b972 <dir_alloc+0x26>
 800b9c2:	e000      	b.n	800b9c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b9c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d101      	bne.n	800b9d0 <dir_alloc+0x84>
 800b9cc:	2307      	movs	r3, #7
 800b9ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	331a      	adds	r3, #26
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff f851 	bl	800aa90 <ld_word>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	d109      	bne.n	800ba0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	3314      	adds	r3, #20
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff f846 	bl	800aa90 <ld_word>
 800ba04:	4603      	mov	r3, r0
 800ba06:	041b      	lsls	r3, r3, #16
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	331a      	adds	r3, #26
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f867 	bl	800ab02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d109      	bne.n	800ba50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f103 0214 	add.w	r2, r3, #20
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	0c1b      	lsrs	r3, r3, #16
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f7ff f859 	bl	800ab02 <st_word>
	}
}
 800ba50:	bf00      	nop
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ba66:	2100      	movs	r1, #0
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff fe2f 	bl	800b6cc <dir_sdi>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <dir_find+0x24>
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	e03e      	b.n	800bafa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	69db      	ldr	r3, [r3, #28]
 800ba80:	4619      	mov	r1, r3
 800ba82:	6938      	ldr	r0, [r7, #16]
 800ba84:	f7ff faa6 	bl	800afd4 <move_window>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d12f      	bne.n	800baf2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d102      	bne.n	800baa6 <dir_find+0x4e>
 800baa0:	2304      	movs	r3, #4
 800baa2:	75fb      	strb	r3, [r7, #23]
 800baa4:	e028      	b.n	800baf8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	330b      	adds	r3, #11
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	330b      	adds	r3, #11
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <dir_find+0x86>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a18      	ldr	r0, [r3, #32]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	220b      	movs	r2, #11
 800bad2:	4619      	mov	r1, r3
 800bad4:	f7ff f894 	bl	800ac00 <mem_cmp>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bade:	2100      	movs	r1, #0
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff fe6e 	bl	800b7c2 <dir_next>
 800bae6:	4603      	mov	r3, r0
 800bae8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800baea:	7dfb      	ldrb	r3, [r7, #23]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0c5      	beq.n	800ba7c <dir_find+0x24>
 800baf0:	e002      	b.n	800baf8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800baf2:	bf00      	nop
 800baf4:	e000      	b.n	800baf8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800baf6:	bf00      	nop

	return res;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bb10:	2101      	movs	r1, #1
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ff1a 	bl	800b94c <dir_alloc>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bb1c:	7bfb      	ldrb	r3, [r7, #15]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d11c      	bne.n	800bb5c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	4619      	mov	r1, r3
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f7ff fa53 	bl	800afd4 <move_window>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d111      	bne.n	800bb5c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a1b      	ldr	r3, [r3, #32]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	2100      	movs	r1, #0
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff f843 	bl	800abcc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a18      	ldr	r0, [r3, #32]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3324      	adds	r3, #36	; 0x24
 800bb4e:	220b      	movs	r2, #11
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7ff f81b 	bl	800ab8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3324      	adds	r3, #36	; 0x24
 800bb7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bb7e:	220b      	movs	r2, #11
 800bb80:	2120      	movs	r1, #32
 800bb82:	68b8      	ldr	r0, [r7, #8]
 800bb84:	f7ff f822 	bl	800abcc <mem_set>
	si = i = 0; ni = 8;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	613b      	str	r3, [r7, #16]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	61fb      	str	r3, [r7, #28]
 800bb90:	2308      	movs	r3, #8
 800bb92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	61fa      	str	r2, [r7, #28]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bba2:	7efb      	ldrb	r3, [r7, #27]
 800bba4:	2b20      	cmp	r3, #32
 800bba6:	d94e      	bls.n	800bc46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bba8:	7efb      	ldrb	r3, [r7, #27]
 800bbaa:	2b2f      	cmp	r3, #47	; 0x2f
 800bbac:	d006      	beq.n	800bbbc <create_name+0x54>
 800bbae:	7efb      	ldrb	r3, [r7, #27]
 800bbb0:	2b5c      	cmp	r3, #92	; 0x5c
 800bbb2:	d110      	bne.n	800bbd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bbb4:	e002      	b.n	800bbbc <create_name+0x54>
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	61fb      	str	r3, [r7, #28]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b2f      	cmp	r3, #47	; 0x2f
 800bbc6:	d0f6      	beq.n	800bbb6 <create_name+0x4e>
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	4413      	add	r3, r2
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b5c      	cmp	r3, #92	; 0x5c
 800bbd2:	d0f0      	beq.n	800bbb6 <create_name+0x4e>
			break;
 800bbd4:	e038      	b.n	800bc48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bbd6:	7efb      	ldrb	r3, [r7, #27]
 800bbd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bbda:	d003      	beq.n	800bbe4 <create_name+0x7c>
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d30c      	bcc.n	800bbfe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	2b0b      	cmp	r3, #11
 800bbe8:	d002      	beq.n	800bbf0 <create_name+0x88>
 800bbea:	7efb      	ldrb	r3, [r7, #27]
 800bbec:	2b2e      	cmp	r3, #46	; 0x2e
 800bbee:	d001      	beq.n	800bbf4 <create_name+0x8c>
 800bbf0:	2306      	movs	r3, #6
 800bbf2:	e044      	b.n	800bc7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bbf4:	2308      	movs	r3, #8
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	230b      	movs	r3, #11
 800bbfa:	617b      	str	r3, [r7, #20]
			continue;
 800bbfc:	e022      	b.n	800bc44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bbfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da04      	bge.n	800bc10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bc06:	7efb      	ldrb	r3, [r7, #27]
 800bc08:	3b80      	subs	r3, #128	; 0x80
 800bc0a:	4a1f      	ldr	r2, [pc, #124]	; (800bc88 <create_name+0x120>)
 800bc0c:	5cd3      	ldrb	r3, [r2, r3]
 800bc0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bc10:	7efb      	ldrb	r3, [r7, #27]
 800bc12:	4619      	mov	r1, r3
 800bc14:	481d      	ldr	r0, [pc, #116]	; (800bc8c <create_name+0x124>)
 800bc16:	f7ff f819 	bl	800ac4c <chk_chr>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <create_name+0xbc>
 800bc20:	2306      	movs	r3, #6
 800bc22:	e02c      	b.n	800bc7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bc24:	7efb      	ldrb	r3, [r7, #27]
 800bc26:	2b60      	cmp	r3, #96	; 0x60
 800bc28:	d905      	bls.n	800bc36 <create_name+0xce>
 800bc2a:	7efb      	ldrb	r3, [r7, #27]
 800bc2c:	2b7a      	cmp	r3, #122	; 0x7a
 800bc2e:	d802      	bhi.n	800bc36 <create_name+0xce>
 800bc30:	7efb      	ldrb	r3, [r7, #27]
 800bc32:	3b20      	subs	r3, #32
 800bc34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	613a      	str	r2, [r7, #16]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	4413      	add	r3, r2
 800bc40:	7efa      	ldrb	r2, [r7, #27]
 800bc42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bc44:	e7a6      	b.n	800bb94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <create_name+0xf4>
 800bc58:	2306      	movs	r3, #6
 800bc5a:	e010      	b.n	800bc7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2be5      	cmp	r3, #229	; 0xe5
 800bc62:	d102      	bne.n	800bc6a <create_name+0x102>
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2205      	movs	r2, #5
 800bc68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bc6a:	7efb      	ldrb	r3, [r7, #27]
 800bc6c:	2b20      	cmp	r3, #32
 800bc6e:	d801      	bhi.n	800bc74 <create_name+0x10c>
 800bc70:	2204      	movs	r2, #4
 800bc72:	e000      	b.n	800bc76 <create_name+0x10e>
 800bc74:	2200      	movs	r2, #0
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	330b      	adds	r3, #11
 800bc7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bc7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	080115c8 	.word	0x080115c8
 800bc8c:	080114b0 	.word	0x080114b0

0800bc90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bca4:	e002      	b.n	800bcac <follow_path+0x1c>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b2f      	cmp	r3, #47	; 0x2f
 800bcb2:	d0f8      	beq.n	800bca6 <follow_path+0x16>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b5c      	cmp	r3, #92	; 0x5c
 800bcba:	d0f4      	beq.n	800bca6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b1f      	cmp	r3, #31
 800bcc8:	d80a      	bhi.n	800bce0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2280      	movs	r2, #128	; 0x80
 800bcce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff fcf9 	bl	800b6cc <dir_sdi>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75fb      	strb	r3, [r7, #23]
 800bcde:	e043      	b.n	800bd68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bce0:	463b      	mov	r3, r7
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff ff3f 	bl	800bb68 <create_name>
 800bcea:	4603      	mov	r3, r0
 800bcec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d134      	bne.n	800bd5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff feaf 	bl	800ba58 <dir_find>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00a      	beq.n	800bd22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	d127      	bne.n	800bd62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd12:	7afb      	ldrb	r3, [r7, #11]
 800bd14:	f003 0304 	and.w	r3, r3, #4
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d122      	bne.n	800bd62 <follow_path+0xd2>
 800bd1c:	2305      	movs	r3, #5
 800bd1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd20:	e01f      	b.n	800bd62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd22:	7afb      	ldrb	r3, [r7, #11]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d11c      	bne.n	800bd66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	799b      	ldrb	r3, [r3, #6]
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bd38:	2305      	movs	r3, #5
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	e014      	b.n	800bd68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4c:	4413      	add	r3, r2
 800bd4e:	4619      	mov	r1, r3
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff fe42 	bl	800b9da <ld_clust>
 800bd56:	4602      	mov	r2, r0
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd5c:	e7c0      	b.n	800bce0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bd5e:	bf00      	nop
 800bd60:	e002      	b.n	800bd68 <follow_path+0xd8>
				break;
 800bd62:	bf00      	nop
 800bd64:	e000      	b.n	800bd68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd66:	bf00      	nop
			}
		}
	}

	return res;
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b087      	sub	sp, #28
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d031      	beq.n	800bdec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	617b      	str	r3, [r7, #20]
 800bd8e:	e002      	b.n	800bd96 <get_ldnumber+0x24>
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	3301      	adds	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d903      	bls.n	800bda6 <get_ldnumber+0x34>
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b3a      	cmp	r3, #58	; 0x3a
 800bda4:	d1f4      	bne.n	800bd90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2b3a      	cmp	r3, #58	; 0x3a
 800bdac:	d11c      	bne.n	800bde8 <get_ldnumber+0x76>
			tp = *path;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	60fa      	str	r2, [r7, #12]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	3b30      	subs	r3, #48	; 0x30
 800bdbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2b09      	cmp	r3, #9
 800bdc4:	d80e      	bhi.n	800bde4 <get_ldnumber+0x72>
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d10a      	bne.n	800bde4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d107      	bne.n	800bde4 <get_ldnumber+0x72>
					vol = (int)i;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	3301      	adds	r3, #1
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	e002      	b.n	800bdee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bdec:	693b      	ldr	r3, [r7, #16]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	371c      	adds	r7, #28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bc80      	pop	{r7}
 800bdf6:	4770      	bx	lr

0800bdf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	70da      	strb	r2, [r3, #3]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be0e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff f8de 	bl	800afd4 <move_window>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <check_fs+0x2a>
 800be1e:	2304      	movs	r3, #4
 800be20:	e038      	b.n	800be94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3330      	adds	r3, #48	; 0x30
 800be26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe fe30 	bl	800aa90 <ld_word>
 800be30:	4603      	mov	r3, r0
 800be32:	461a      	mov	r2, r3
 800be34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be38:	429a      	cmp	r2, r3
 800be3a:	d001      	beq.n	800be40 <check_fs+0x48>
 800be3c:	2303      	movs	r3, #3
 800be3e:	e029      	b.n	800be94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be46:	2be9      	cmp	r3, #233	; 0xe9
 800be48:	d009      	beq.n	800be5e <check_fs+0x66>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be50:	2beb      	cmp	r3, #235	; 0xeb
 800be52:	d11e      	bne.n	800be92 <check_fs+0x9a>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800be5a:	2b90      	cmp	r3, #144	; 0x90
 800be5c:	d119      	bne.n	800be92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3330      	adds	r3, #48	; 0x30
 800be62:	3336      	adds	r3, #54	; 0x36
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe fe2a 	bl	800aabe <ld_dword>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be70:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <check_fs+0xa4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d101      	bne.n	800be7a <check_fs+0x82>
 800be76:	2300      	movs	r3, #0
 800be78:	e00c      	b.n	800be94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3330      	adds	r3, #48	; 0x30
 800be7e:	3352      	adds	r3, #82	; 0x52
 800be80:	4618      	mov	r0, r3
 800be82:	f7fe fe1c 	bl	800aabe <ld_dword>
 800be86:	4603      	mov	r3, r0
 800be88:	4a05      	ldr	r2, [pc, #20]	; (800bea0 <check_fs+0xa8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d101      	bne.n	800be92 <check_fs+0x9a>
 800be8e:	2300      	movs	r3, #0
 800be90:	e000      	b.n	800be94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be92:	2302      	movs	r3, #2
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	00544146 	.word	0x00544146
 800bea0:	33544146 	.word	0x33544146

0800bea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b096      	sub	sp, #88	; 0x58
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	4613      	mov	r3, r2
 800beb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7ff ff5a 	bl	800bd72 <get_ldnumber>
 800bebe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	da01      	bge.n	800beca <find_volume+0x26>
 800bec6:	230b      	movs	r3, #11
 800bec8:	e22d      	b.n	800c326 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800beca:	4aa1      	ldr	r2, [pc, #644]	; (800c150 <find_volume+0x2ac>)
 800becc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bed2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <find_volume+0x3a>
 800beda:	230c      	movs	r3, #12
 800bedc:	e223      	b.n	800c326 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bee2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	f023 0301 	bic.w	r3, r3, #1
 800beea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01a      	beq.n	800bf2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fd2b 	bl	800a954 <disk_status>
 800befe:	4603      	mov	r3, r0
 800bf00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10c      	bne.n	800bf2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf10:	79fb      	ldrb	r3, [r7, #7]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d007      	beq.n	800bf26 <find_volume+0x82>
 800bf16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf1a:	f003 0304 	and.w	r3, r3, #4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf22:	230a      	movs	r3, #10
 800bf24:	e1ff      	b.n	800c326 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bf26:	2300      	movs	r3, #0
 800bf28:	e1fd      	b.n	800c326 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe fd23 	bl	800a988 <disk_initialize>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf54:	2303      	movs	r3, #3
 800bf56:	e1e6      	b.n	800c326 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d007      	beq.n	800bf6e <find_volume+0xca>
 800bf5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf6a:	230a      	movs	r3, #10
 800bf6c:	e1db      	b.n	800c326 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf76:	f7ff ff3f 	bl	800bdf8 <check_fs>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d149      	bne.n	800c01c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf88:	2300      	movs	r3, #0
 800bf8a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf8c:	e01e      	b.n	800bfcc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bf9c:	4413      	add	r3, r2
 800bf9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d006      	beq.n	800bfb8 <find_volume+0x114>
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	3308      	adds	r3, #8
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fd85 	bl	800aabe <ld_dword>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	e000      	b.n	800bfba <find_volume+0x116>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	3358      	adds	r3, #88	; 0x58
 800bfc0:	443b      	add	r3, r7
 800bfc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc8:	3301      	adds	r3, #1
 800bfca:	643b      	str	r3, [r7, #64]	; 0x40
 800bfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d9dd      	bls.n	800bf8e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <find_volume+0x13e>
 800bfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	3358      	adds	r3, #88	; 0x58
 800bfe8:	443b      	add	r3, r7
 800bfea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bfee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d005      	beq.n	800c002 <find_volume+0x15e>
 800bff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bffa:	f7ff fefd 	bl	800bdf8 <check_fs>
 800bffe:	4603      	mov	r3, r0
 800c000:	e000      	b.n	800c004 <find_volume+0x160>
 800c002:	2303      	movs	r3, #3
 800c004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d905      	bls.n	800c01c <find_volume+0x178>
 800c010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c012:	3301      	adds	r3, #1
 800c014:	643b      	str	r3, [r7, #64]	; 0x40
 800c016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d9e2      	bls.n	800bfe2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c01c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c020:	2b04      	cmp	r3, #4
 800c022:	d101      	bne.n	800c028 <find_volume+0x184>
 800c024:	2301      	movs	r3, #1
 800c026:	e17e      	b.n	800c326 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d901      	bls.n	800c034 <find_volume+0x190>
 800c030:	230d      	movs	r3, #13
 800c032:	e178      	b.n	800c326 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	3330      	adds	r3, #48	; 0x30
 800c038:	330b      	adds	r3, #11
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fd28 	bl	800aa90 <ld_word>
 800c040:	4603      	mov	r3, r0
 800c042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c046:	d001      	beq.n	800c04c <find_volume+0x1a8>
 800c048:	230d      	movs	r3, #13
 800c04a:	e16c      	b.n	800c326 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04e:	3330      	adds	r3, #48	; 0x30
 800c050:	3316      	adds	r3, #22
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fd1c 	bl	800aa90 <ld_word>
 800c058:	4603      	mov	r3, r0
 800c05a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <find_volume+0x1cc>
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	3330      	adds	r3, #48	; 0x30
 800c066:	3324      	adds	r3, #36	; 0x24
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fe fd28 	bl	800aabe <ld_dword>
 800c06e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c074:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c078:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	789b      	ldrb	r3, [r3, #2]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d005      	beq.n	800c094 <find_volume+0x1f0>
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	789b      	ldrb	r3, [r3, #2]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d001      	beq.n	800c094 <find_volume+0x1f0>
 800c090:	230d      	movs	r3, #13
 800c092:	e148      	b.n	800c326 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	789b      	ldrb	r3, [r3, #2]
 800c098:	461a      	mov	r2, r3
 800c09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c09c:	fb02 f303 	mul.w	r3, r2, r3
 800c0a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	895b      	ldrh	r3, [r3, #10]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <find_volume+0x224>
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	895b      	ldrh	r3, [r3, #10]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	895b      	ldrh	r3, [r3, #10]
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <find_volume+0x228>
 800c0c8:	230d      	movs	r3, #13
 800c0ca:	e12c      	b.n	800c326 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	3330      	adds	r3, #48	; 0x30
 800c0d0:	3311      	adds	r3, #17
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fcdc 	bl	800aa90 <ld_word>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	891b      	ldrh	r3, [r3, #8]
 800c0e4:	f003 030f 	and.w	r3, r3, #15
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <find_volume+0x24e>
 800c0ee:	230d      	movs	r3, #13
 800c0f0:	e119      	b.n	800c326 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	3330      	adds	r3, #48	; 0x30
 800c0f6:	3313      	adds	r3, #19
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fcc9 	bl	800aa90 <ld_word>
 800c0fe:	4603      	mov	r3, r0
 800c100:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c104:	2b00      	cmp	r3, #0
 800c106:	d106      	bne.n	800c116 <find_volume+0x272>
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	3330      	adds	r3, #48	; 0x30
 800c10c:	3320      	adds	r3, #32
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe fcd5 	bl	800aabe <ld_dword>
 800c114:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	3330      	adds	r3, #48	; 0x30
 800c11a:	330e      	adds	r3, #14
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fcb7 	bl	800aa90 <ld_word>
 800c122:	4603      	mov	r3, r0
 800c124:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <find_volume+0x28c>
 800c12c:	230d      	movs	r3, #13
 800c12e:	e0fa      	b.n	800c326 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c134:	4413      	add	r3, r2
 800c136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c138:	8912      	ldrh	r2, [r2, #8]
 800c13a:	0912      	lsrs	r2, r2, #4
 800c13c:	b292      	uxth	r2, r2
 800c13e:	4413      	add	r3, r2
 800c140:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	429a      	cmp	r2, r3
 800c148:	d204      	bcs.n	800c154 <find_volume+0x2b0>
 800c14a:	230d      	movs	r3, #13
 800c14c:	e0eb      	b.n	800c326 <find_volume+0x482>
 800c14e:	bf00      	nop
 800c150:	20000488 	.word	0x20000488
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c15c:	8952      	ldrh	r2, [r2, #10]
 800c15e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <find_volume+0x2ca>
 800c16a:	230d      	movs	r3, #13
 800c16c:	e0db      	b.n	800c326 <find_volume+0x482>
		fmt = FS_FAT32;
 800c16e:	2303      	movs	r3, #3
 800c170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d802      	bhi.n	800c184 <find_volume+0x2e0>
 800c17e:	2302      	movs	r3, #2
 800c180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d802      	bhi.n	800c194 <find_volume+0x2f0>
 800c18e:	2301      	movs	r3, #1
 800c190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	1c9a      	adds	r2, r3, #2
 800c198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1a0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a6:	441a      	add	r2, r3
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	441a      	add	r2, r3
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c1b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d11e      	bne.n	800c1fc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	3330      	adds	r3, #48	; 0x30
 800c1c2:	332a      	adds	r3, #42	; 0x2a
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fc63 	bl	800aa90 <ld_word>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d001      	beq.n	800c1d4 <find_volume+0x330>
 800c1d0:	230d      	movs	r3, #13
 800c1d2:	e0a8      	b.n	800c326 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	891b      	ldrh	r3, [r3, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <find_volume+0x33c>
 800c1dc:	230d      	movs	r3, #13
 800c1de:	e0a2      	b.n	800c326 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	3330      	adds	r3, #48	; 0x30
 800c1e4:	332c      	adds	r3, #44	; 0x2c
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fc69 	bl	800aabe <ld_dword>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c1fa:	e01f      	b.n	800c23c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	891b      	ldrh	r3, [r3, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <find_volume+0x364>
 800c204:	230d      	movs	r3, #13
 800c206:	e08e      	b.n	800c326 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20a:	6a1a      	ldr	r2, [r3, #32]
 800c20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c20e:	441a      	add	r2, r3
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d103      	bne.n	800c224 <find_volume+0x380>
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	e00a      	b.n	800c23a <find_volume+0x396>
 800c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c226:	695a      	ldr	r2, [r3, #20]
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	085a      	lsrs	r2, r3, #1
 800c230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	f003 0301 	and.w	r3, r3, #1
 800c238:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c23a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	699a      	ldr	r2, [r3, #24]
 800c240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c242:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c246:	0a5b      	lsrs	r3, r3, #9
 800c248:	429a      	cmp	r2, r3
 800c24a:	d201      	bcs.n	800c250 <find_volume+0x3ac>
 800c24c:	230d      	movs	r3, #13
 800c24e:	e06a      	b.n	800c326 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c256:	611a      	str	r2, [r3, #16]
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	2280      	movs	r2, #128	; 0x80
 800c264:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d149      	bne.n	800c302 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c270:	3330      	adds	r3, #48	; 0x30
 800c272:	3330      	adds	r3, #48	; 0x30
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe fc0b 	bl	800aa90 <ld_word>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d140      	bne.n	800c302 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c282:	3301      	adds	r3, #1
 800c284:	4619      	mov	r1, r3
 800c286:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c288:	f7fe fea4 	bl	800afd4 <move_window>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d137      	bne.n	800c302 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	2200      	movs	r2, #0
 800c296:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	3330      	adds	r3, #48	; 0x30
 800c29c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fe fbf5 	bl	800aa90 <ld_word>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d127      	bne.n	800c302 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	3330      	adds	r3, #48	; 0x30
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fc01 	bl	800aabe <ld_dword>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	4a1c      	ldr	r2, [pc, #112]	; (800c330 <find_volume+0x48c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d11e      	bne.n	800c302 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	3330      	adds	r3, #48	; 0x30
 800c2c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fbf6 	bl	800aabe <ld_dword>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	4a17      	ldr	r2, [pc, #92]	; (800c334 <find_volume+0x490>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d113      	bne.n	800c302 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	3330      	adds	r3, #48	; 0x30
 800c2de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fbeb 	bl	800aabe <ld_dword>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	3330      	adds	r3, #48	; 0x30
 800c2f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fbe1 	bl	800aabe <ld_dword>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c308:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c30a:	4b0b      	ldr	r3, [pc, #44]	; (800c338 <find_volume+0x494>)
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	3301      	adds	r3, #1
 800c310:	b29a      	uxth	r2, r3
 800c312:	4b09      	ldr	r3, [pc, #36]	; (800c338 <find_volume+0x494>)
 800c314:	801a      	strh	r2, [r3, #0]
 800c316:	4b08      	ldr	r3, [pc, #32]	; (800c338 <find_volume+0x494>)
 800c318:	881a      	ldrh	r2, [r3, #0]
 800c31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c31e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c320:	f7fe fdf0 	bl	800af04 <clear_lock>
#endif
	return FR_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3758      	adds	r7, #88	; 0x58
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	41615252 	.word	0x41615252
 800c334:	61417272 	.word	0x61417272
 800c338:	2000048c 	.word	0x2000048c

0800c33c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c346:	2309      	movs	r3, #9
 800c348:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d01c      	beq.n	800c38a <validate+0x4e>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d018      	beq.n	800c38a <validate+0x4e>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d013      	beq.n	800c38a <validate+0x4e>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	889a      	ldrh	r2, [r3, #4]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	88db      	ldrh	r3, [r3, #6]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d10c      	bne.n	800c38a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe faec 	bl	800a954 <disk_status>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <validate+0x4e>
			res = FR_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <validate+0x5a>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	e000      	b.n	800c398 <validate+0x5c>
 800c396:	2300      	movs	r3, #0
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	6013      	str	r3, [r2, #0]
	return res;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3ba:	f107 0310 	add.w	r3, r7, #16
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fcd7 	bl	800bd72 <get_ldnumber>
 800c3c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	da01      	bge.n	800c3d0 <f_mount+0x28>
 800c3cc:	230b      	movs	r3, #11
 800c3ce:	e02b      	b.n	800c428 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3d0:	4a17      	ldr	r2, [pc, #92]	; (800c430 <f_mount+0x88>)
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d005      	beq.n	800c3ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c3e0:	69b8      	ldr	r0, [r7, #24]
 800c3e2:	f7fe fd8f 	bl	800af04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	490d      	ldr	r1, [pc, #52]	; (800c430 <f_mount+0x88>)
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <f_mount+0x66>
 800c408:	79fb      	ldrb	r3, [r7, #7]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d001      	beq.n	800c412 <f_mount+0x6a>
 800c40e:	2300      	movs	r3, #0
 800c410:	e00a      	b.n	800c428 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c412:	f107 010c 	add.w	r1, r7, #12
 800c416:	f107 0308 	add.w	r3, r7, #8
 800c41a:	2200      	movs	r2, #0
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff fd41 	bl	800bea4 <find_volume>
 800c422:	4603      	mov	r3, r0
 800c424:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c426:	7dfb      	ldrb	r3, [r7, #23]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3720      	adds	r7, #32
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20000488 	.word	0x20000488

0800c434 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b098      	sub	sp, #96	; 0x60
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	4613      	mov	r3, r2
 800c440:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <f_open+0x18>
 800c448:	2309      	movs	r3, #9
 800c44a:	e1ad      	b.n	800c7a8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c452:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c454:	79fa      	ldrb	r2, [r7, #7]
 800c456:	f107 0110 	add.w	r1, r7, #16
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff fd20 	bl	800bea4 <find_volume>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c46a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f040 8191 	bne.w	800c796 <f_open+0x362>
		dj.obj.fs = fs;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	f107 0314 	add.w	r3, r7, #20
 800c47e:	4611      	mov	r1, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fc05 	bl	800bc90 <follow_path>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c48c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c490:	2b00      	cmp	r3, #0
 800c492:	d11a      	bne.n	800c4ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c494:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c498:	b25b      	sxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	da03      	bge.n	800c4a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c49e:	2306      	movs	r3, #6
 800c4a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c4a4:	e011      	b.n	800c4ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	f023 0301 	bic.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	bf14      	ite	ne
 800c4b0:	2301      	movne	r3, #1
 800c4b2:	2300      	moveq	r3, #0
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f107 0314 	add.w	r3, r7, #20
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fbde 	bl	800ac80 <chk_lock>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c4ca:	79fb      	ldrb	r3, [r7, #7]
 800c4cc:	f003 031c 	and.w	r3, r3, #28
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d07f      	beq.n	800c5d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d017      	beq.n	800c50c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d10e      	bne.n	800c502 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c4e4:	f7fe fc26 	bl	800ad34 <enq_lock>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d006      	beq.n	800c4fc <f_open+0xc8>
 800c4ee:	f107 0314 	add.w	r3, r7, #20
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff fb05 	bl	800bb02 <dir_register>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	e000      	b.n	800c4fe <f_open+0xca>
 800c4fc:	2312      	movs	r3, #18
 800c4fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	f043 0308 	orr.w	r3, r3, #8
 800c508:	71fb      	strb	r3, [r7, #7]
 800c50a:	e010      	b.n	800c52e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c50c:	7ebb      	ldrb	r3, [r7, #26]
 800c50e:	f003 0311 	and.w	r3, r3, #17
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <f_open+0xea>
					res = FR_DENIED;
 800c516:	2307      	movs	r3, #7
 800c518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c51c:	e007      	b.n	800c52e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	f003 0304 	and.w	r3, r3, #4
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <f_open+0xfa>
 800c528:	2308      	movs	r3, #8
 800c52a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c52e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c532:	2b00      	cmp	r3, #0
 800c534:	d168      	bne.n	800c608 <f_open+0x1d4>
 800c536:	79fb      	ldrb	r3, [r7, #7]
 800c538:	f003 0308 	and.w	r3, r3, #8
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d063      	beq.n	800c608 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c540:	f7fd fcc8 	bl	8009ed4 <get_fattime>
 800c544:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c548:	330e      	adds	r3, #14
 800c54a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe faf2 	bl	800ab36 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	3316      	adds	r3, #22
 800c556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe faec 	bl	800ab36 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c560:	330b      	adds	r3, #11
 800c562:	2220      	movs	r2, #32
 800c564:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c56a:	4611      	mov	r1, r2
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7ff fa34 	bl	800b9da <ld_clust>
 800c572:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c578:	2200      	movs	r2, #0
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff fa4c 	bl	800ba18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c582:	331c      	adds	r3, #28
 800c584:	2100      	movs	r1, #0
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe fad5 	bl	800ab36 <st_dword>
					fs->wflag = 1;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2201      	movs	r2, #1
 800c590:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c594:	2b00      	cmp	r3, #0
 800c596:	d037      	beq.n	800c608 <f_open+0x1d4>
						dw = fs->winsect;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c59e:	f107 0314 	add.w	r3, r7, #20
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe ff60 	bl	800b46c <remove_chain>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d126      	bne.n	800c608 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fd08 	bl	800afd4 <move_window>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5ce:	3a01      	subs	r2, #1
 800c5d0:	60da      	str	r2, [r3, #12]
 800c5d2:	e019      	b.n	800c608 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d115      	bne.n	800c608 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c5dc:	7ebb      	ldrb	r3, [r7, #26]
 800c5de:	f003 0310 	and.w	r3, r3, #16
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d003      	beq.n	800c5ee <f_open+0x1ba>
					res = FR_NO_FILE;
 800c5e6:	2304      	movs	r3, #4
 800c5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c5ec:	e00c      	b.n	800c608 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d007      	beq.n	800c608 <f_open+0x1d4>
 800c5f8:	7ebb      	ldrb	r3, [r7, #26]
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d002      	beq.n	800c608 <f_open+0x1d4>
						res = FR_DENIED;
 800c602:	2307      	movs	r3, #7
 800c604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d128      	bne.n	800c662 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	f003 0308 	and.w	r3, r3, #8
 800c616:	2b00      	cmp	r3, #0
 800c618:	d003      	beq.n	800c622 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c61a:	79fb      	ldrb	r3, [r7, #7]
 800c61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c620:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c62a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	f023 0301 	bic.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	bf14      	ite	ne
 800c63a:	2301      	movne	r3, #1
 800c63c:	2300      	moveq	r3, #0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	f107 0314 	add.w	r3, r7, #20
 800c646:	4611      	mov	r1, r2
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fb93 	bl	800ad74 <inc_lock>
 800c64e:	4602      	mov	r2, r0
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	691b      	ldr	r3, [r3, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <f_open+0x22e>
 800c65c:	2302      	movs	r3, #2
 800c65e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c666:	2b00      	cmp	r3, #0
 800c668:	f040 8095 	bne.w	800c796 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c670:	4611      	mov	r1, r2
 800c672:	4618      	mov	r0, r3
 800c674:	f7ff f9b1 	bl	800b9da <ld_clust>
 800c678:	4602      	mov	r2, r0
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c680:	331c      	adds	r3, #28
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe fa1b 	bl	800aabe <ld_dword>
 800c688:	4602      	mov	r2, r0
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	88da      	ldrh	r2, [r3, #6]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	79fa      	ldrb	r2, [r7, #7]
 800c6a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3330      	adds	r3, #48	; 0x30
 800c6be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe fa81 	bl	800abcc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	f003 0320 	and.w	r3, r3, #32
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d060      	beq.n	800c796 <f_open+0x362>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d05c      	beq.n	800c796 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	68da      	ldr	r2, [r3, #12]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	895b      	ldrh	r3, [r3, #10]
 800c6e8:	025b      	lsls	r3, r3, #9
 800c6ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	657b      	str	r3, [r7, #84]	; 0x54
 800c6f8:	e016      	b.n	800c728 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fd22 	bl	800b148 <get_fat>
 800c704:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d802      	bhi.n	800c712 <f_open+0x2de>
 800c70c:	2302      	movs	r3, #2
 800c70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c718:	d102      	bne.n	800c720 <f_open+0x2ec>
 800c71a:	2301      	movs	r3, #1
 800c71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	657b      	str	r3, [r7, #84]	; 0x54
 800c728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d103      	bne.n	800c738 <f_open+0x304>
 800c730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c734:	429a      	cmp	r2, r3
 800c736:	d8e0      	bhi.n	800c6fa <f_open+0x2c6>
				}
				fp->clust = clst;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c73c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c73e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c742:	2b00      	cmp	r3, #0
 800c744:	d127      	bne.n	800c796 <f_open+0x362>
 800c746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d022      	beq.n	800c796 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe fcd9 	bl	800b10c <clust2sect>
 800c75a:	6478      	str	r0, [r7, #68]	; 0x44
 800c75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d103      	bne.n	800c76a <f_open+0x336>
						res = FR_INT_ERR;
 800c762:	2302      	movs	r3, #2
 800c764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c768:	e015      	b.n	800c796 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c76c:	0a5a      	lsrs	r2, r3, #9
 800c76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c770:	441a      	add	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	7858      	ldrb	r0, [r3, #1]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6a1a      	ldr	r2, [r3, #32]
 800c784:	2301      	movs	r3, #1
 800c786:	f7fe f925 	bl	800a9d4 <disk_read>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <f_open+0x362>
 800c790:	2301      	movs	r3, #1
 800c792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d002      	beq.n	800c7a4 <f_open+0x370>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c7a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3760      	adds	r7, #96	; 0x60
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08c      	sub	sp, #48	; 0x30
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f107 0210 	add.w	r2, r7, #16
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fdb3 	bl	800c33c <validate>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c7dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d107      	bne.n	800c7f4 <f_write+0x44>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	7d5b      	ldrb	r3, [r3, #21]
 800c7e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c7ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <f_write+0x4a>
 800c7f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7f8:	e14b      	b.n	800ca92 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	7d1b      	ldrb	r3, [r3, #20]
 800c7fe:	f003 0302 	and.w	r3, r3, #2
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <f_write+0x5a>
 800c806:	2307      	movs	r3, #7
 800c808:	e143      	b.n	800ca92 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	441a      	add	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	429a      	cmp	r2, r3
 800c818:	f080 812d 	bcs.w	800ca76 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	43db      	mvns	r3, r3
 800c822:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c824:	e127      	b.n	800ca76 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f040 80e3 	bne.w	800c9fa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	0a5b      	lsrs	r3, r3, #9
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	8952      	ldrh	r2, [r2, #10]
 800c83e:	3a01      	subs	r2, #1
 800c840:	4013      	ands	r3, r2
 800c842:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d143      	bne.n	800c8d2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10c      	bne.n	800c86c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d11a      	bne.n	800c894 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2100      	movs	r1, #0
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fe67 	bl	800b536 <create_chain>
 800c868:	62b8      	str	r0, [r7, #40]	; 0x28
 800c86a:	e013      	b.n	800c894 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d007      	beq.n	800c884 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	4619      	mov	r1, r3
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f7fe fef3 	bl	800b666 <clmt_clust>
 800c880:	62b8      	str	r0, [r7, #40]	; 0x28
 800c882:	e007      	b.n	800c894 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	4619      	mov	r1, r3
 800c88c:	4610      	mov	r0, r2
 800c88e:	f7fe fe52 	bl	800b536 <create_chain>
 800c892:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 80f2 	beq.w	800ca80 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d104      	bne.n	800c8ac <f_write+0xfc>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	755a      	strb	r2, [r3, #21]
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	e0f2      	b.n	800ca92 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8b2:	d104      	bne.n	800c8be <f_write+0x10e>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	755a      	strb	r2, [r3, #21]
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e0e9      	b.n	800ca92 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d102      	bne.n	800c8d2 <f_write+0x122>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	7d1b      	ldrb	r3, [r3, #20]
 800c8d6:	b25b      	sxtb	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da18      	bge.n	800c90e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	7858      	ldrb	r0, [r3, #1]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1a      	ldr	r2, [r3, #32]
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	f7fe f892 	bl	800aa14 <disk_write>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <f_write+0x150>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	755a      	strb	r2, [r3, #21]
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e0c8      	b.n	800ca92 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	7d1b      	ldrb	r3, [r3, #20]
 800c904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	69db      	ldr	r3, [r3, #28]
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f7fe fbf8 	bl	800b10c <clust2sect>
 800c91c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d104      	bne.n	800c92e <f_write+0x17e>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2202      	movs	r2, #2
 800c928:	755a      	strb	r2, [r3, #21]
 800c92a:	2302      	movs	r3, #2
 800c92c:	e0b1      	b.n	800ca92 <f_write+0x2e2>
			sect += csect;
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	4413      	add	r3, r2
 800c934:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	0a5b      	lsrs	r3, r3, #9
 800c93a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d03c      	beq.n	800c9bc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	4413      	add	r3, r2
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	8952      	ldrh	r2, [r2, #10]
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d905      	bls.n	800c95c <f_write+0x1ac>
					cc = fs->csize - csect;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	895b      	ldrh	r3, [r3, #10]
 800c954:	461a      	mov	r2, r3
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	7858      	ldrb	r0, [r3, #1]
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	69f9      	ldr	r1, [r7, #28]
 800c966:	f7fe f855 	bl	800aa14 <disk_write>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d004      	beq.n	800c97a <f_write+0x1ca>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	755a      	strb	r2, [r3, #21]
 800c976:	2301      	movs	r3, #1
 800c978:	e08b      	b.n	800ca92 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6a1a      	ldr	r2, [r3, #32]
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	6a3a      	ldr	r2, [r7, #32]
 800c984:	429a      	cmp	r2, r3
 800c986:	d915      	bls.n	800c9b4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6a1a      	ldr	r2, [r3, #32]
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	025b      	lsls	r3, r3, #9
 800c998:	69fa      	ldr	r2, [r7, #28]
 800c99a:	4413      	add	r3, r2
 800c99c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f7fe f8f3 	bl	800ab8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	7d1b      	ldrb	r3, [r3, #20]
 800c9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	025b      	lsls	r3, r3, #9
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c9ba:	e03f      	b.n	800ca3c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d016      	beq.n	800c9f4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	699a      	ldr	r2, [r3, #24]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d210      	bcs.n	800c9f4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	7858      	ldrb	r0, [r3, #1]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9dc:	2301      	movs	r3, #1
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	f7fd fff8 	bl	800a9d4 <disk_read>
 800c9e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d004      	beq.n	800c9f4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	755a      	strb	r2, [r3, #21]
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e04e      	b.n	800ca92 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca02:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca06:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ca08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d901      	bls.n	800ca14 <f_write+0x264>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca22:	4413      	add	r3, r2
 800ca24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca26:	69f9      	ldr	r1, [r7, #28]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe f8af 	bl	800ab8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	7d1b      	ldrb	r3, [r3, #20]
 800ca32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ca3c:	69fa      	ldr	r2, [r7, #28]
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	4413      	add	r3, r2
 800ca42:	61fb      	str	r3, [r7, #28]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	699a      	ldr	r2, [r3, #24]
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	441a      	add	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	619a      	str	r2, [r3, #24]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	bf38      	it	cc
 800ca5c:	461a      	movcc	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	60da      	str	r2, [r3, #12]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca68:	441a      	add	r2, r3
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f47f aed4 	bne.w	800c826 <f_write+0x76>
 800ca7e:	e000      	b.n	800ca82 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7d1b      	ldrb	r3, [r3, #20]
 800ca86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3730      	adds	r7, #48	; 0x30
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b086      	sub	sp, #24
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f107 0208 	add.w	r2, r7, #8
 800caa8:	4611      	mov	r1, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff fc46 	bl	800c33c <validate>
 800cab0:	4603      	mov	r3, r0
 800cab2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d168      	bne.n	800cb8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d062      	beq.n	800cb8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	7d1b      	ldrb	r3, [r3, #20]
 800caca:	b25b      	sxtb	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	da15      	bge.n	800cafc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	7858      	ldrb	r0, [r3, #1]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a1a      	ldr	r2, [r3, #32]
 800cade:	2301      	movs	r3, #1
 800cae0:	f7fd ff98 	bl	800aa14 <disk_write>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d001      	beq.n	800caee <f_sync+0x54>
 800caea:	2301      	movs	r3, #1
 800caec:	e04f      	b.n	800cb8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7d1b      	ldrb	r3, [r3, #20]
 800caf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cafc:	f7fd f9ea 	bl	8009ed4 <get_fattime>
 800cb00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fe fa62 	bl	800afd4 <move_window>
 800cb10:	4603      	mov	r3, r0
 800cb12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d138      	bne.n	800cb8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	330b      	adds	r3, #11
 800cb24:	781a      	ldrb	r2, [r3, #0]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	330b      	adds	r3, #11
 800cb2a:	f042 0220 	orr.w	r2, r2, #32
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6818      	ldr	r0, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	68f9      	ldr	r1, [r7, #12]
 800cb3e:	f7fe ff6b 	bl	800ba18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f103 021c 	add.w	r2, r3, #28
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4610      	mov	r0, r2
 800cb50:	f7fd fff1 	bl	800ab36 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	3316      	adds	r3, #22
 800cb58:	6939      	ldr	r1, [r7, #16]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fd ffeb 	bl	800ab36 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3312      	adds	r3, #18
 800cb64:	2100      	movs	r1, #0
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fd ffcb 	bl	800ab02 <st_word>
					fs->wflag = 1;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe fa5b 	bl	800b030 <sync_fs>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7d1b      	ldrb	r3, [r3, #20]
 800cb82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3718      	adds	r7, #24
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff ff7b 	bl	800ca9a <f_sync>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cba8:	7bfb      	ldrb	r3, [r7, #15]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d118      	bne.n	800cbe0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f107 0208 	add.w	r2, r7, #8
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff fbc0 	bl	800c33c <validate>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10c      	bne.n	800cbe0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe f960 	bl	800ae90 <dec_lock>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d102      	bne.n	800cbe0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc02:	4b1e      	ldr	r3, [pc, #120]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc04:	7a5b      	ldrb	r3, [r3, #9]
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d131      	bne.n	800cc70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc0c:	4b1b      	ldr	r3, [pc, #108]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc0e:	7a5b      	ldrb	r3, [r3, #9]
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	461a      	mov	r2, r3
 800cc14:	4b19      	ldr	r3, [pc, #100]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc16:	2100      	movs	r1, #0
 800cc18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc1a:	4b18      	ldr	r3, [pc, #96]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc1c:	7a5b      	ldrb	r3, [r3, #9]
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	4a16      	ldr	r2, [pc, #88]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc2a:	4b14      	ldr	r3, [pc, #80]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc2c:	7a5b      	ldrb	r3, [r3, #9]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	461a      	mov	r2, r3
 800cc32:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc34:	4413      	add	r3, r2
 800cc36:	79fa      	ldrb	r2, [r7, #7]
 800cc38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc3a:	4b10      	ldr	r3, [pc, #64]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc3c:	7a5b      	ldrb	r3, [r3, #9]
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	b2d1      	uxtb	r1, r2
 800cc44:	4a0d      	ldr	r2, [pc, #52]	; (800cc7c <FATFS_LinkDriverEx+0x90>)
 800cc46:	7251      	strb	r1, [r2, #9]
 800cc48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc4a:	7dbb      	ldrb	r3, [r7, #22]
 800cc4c:	3330      	adds	r3, #48	; 0x30
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	3301      	adds	r3, #1
 800cc58:	223a      	movs	r2, #58	; 0x3a
 800cc5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	3302      	adds	r3, #2
 800cc60:	222f      	movs	r2, #47	; 0x2f
 800cc62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	3303      	adds	r3, #3
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bc80      	pop	{r7}
 800cc7a:	4770      	bx	lr
 800cc7c:	200004b0 	.word	0x200004b0

0800cc80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff ffac 	bl	800cbec <FATFS_LinkDriverEx>
 800cc94:	4603      	mov	r3, r0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <__cvt>:
 800cc9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	461f      	mov	r7, r3
 800cca8:	4614      	mov	r4, r2
 800ccaa:	bfb8      	it	lt
 800ccac:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ccb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ccb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ccb8:	bfb6      	itet	lt
 800ccba:	461f      	movlt	r7, r3
 800ccbc:	2300      	movge	r3, #0
 800ccbe:	232d      	movlt	r3, #45	; 0x2d
 800ccc0:	7013      	strb	r3, [r2, #0]
 800ccc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccc4:	f023 0820 	bic.w	r8, r3, #32
 800ccc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cccc:	d005      	beq.n	800ccda <__cvt+0x3c>
 800ccce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccd2:	d100      	bne.n	800ccd6 <__cvt+0x38>
 800ccd4:	3501      	adds	r5, #1
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	e000      	b.n	800ccdc <__cvt+0x3e>
 800ccda:	2303      	movs	r3, #3
 800ccdc:	aa07      	add	r2, sp, #28
 800ccde:	9204      	str	r2, [sp, #16]
 800cce0:	aa06      	add	r2, sp, #24
 800cce2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cce6:	e9cd 3500 	strd	r3, r5, [sp]
 800ccea:	4622      	mov	r2, r4
 800ccec:	463b      	mov	r3, r7
 800ccee:	f001 fd83 	bl	800e7f8 <_dtoa_r>
 800ccf2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	d102      	bne.n	800cd00 <__cvt+0x62>
 800ccfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccfc:	07db      	lsls	r3, r3, #31
 800ccfe:	d522      	bpl.n	800cd46 <__cvt+0xa8>
 800cd00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd04:	eb06 0905 	add.w	r9, r6, r5
 800cd08:	d110      	bne.n	800cd2c <__cvt+0x8e>
 800cd0a:	7833      	ldrb	r3, [r6, #0]
 800cd0c:	2b30      	cmp	r3, #48	; 0x30
 800cd0e:	d10a      	bne.n	800cd26 <__cvt+0x88>
 800cd10:	2200      	movs	r2, #0
 800cd12:	2300      	movs	r3, #0
 800cd14:	4620      	mov	r0, r4
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 feb8 	bl	8000a8c <__aeabi_dcmpeq>
 800cd1c:	b918      	cbnz	r0, 800cd26 <__cvt+0x88>
 800cd1e:	f1c5 0501 	rsb	r5, r5, #1
 800cd22:	f8ca 5000 	str.w	r5, [sl]
 800cd26:	f8da 3000 	ldr.w	r3, [sl]
 800cd2a:	4499      	add	r9, r3
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4620      	mov	r0, r4
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 feaa 	bl	8000a8c <__aeabi_dcmpeq>
 800cd38:	b108      	cbz	r0, 800cd3e <__cvt+0xa0>
 800cd3a:	f8cd 901c 	str.w	r9, [sp, #28]
 800cd3e:	2230      	movs	r2, #48	; 0x30
 800cd40:	9b07      	ldr	r3, [sp, #28]
 800cd42:	454b      	cmp	r3, r9
 800cd44:	d307      	bcc.n	800cd56 <__cvt+0xb8>
 800cd46:	9b07      	ldr	r3, [sp, #28]
 800cd48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cd4a:	1b9b      	subs	r3, r3, r6
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	b008      	add	sp, #32
 800cd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd56:	1c59      	adds	r1, r3, #1
 800cd58:	9107      	str	r1, [sp, #28]
 800cd5a:	701a      	strb	r2, [r3, #0]
 800cd5c:	e7f0      	b.n	800cd40 <__cvt+0xa2>

0800cd5e <__exponent>:
 800cd5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd60:	4603      	mov	r3, r0
 800cd62:	2900      	cmp	r1, #0
 800cd64:	bfb8      	it	lt
 800cd66:	4249      	neglt	r1, r1
 800cd68:	f803 2b02 	strb.w	r2, [r3], #2
 800cd6c:	bfb4      	ite	lt
 800cd6e:	222d      	movlt	r2, #45	; 0x2d
 800cd70:	222b      	movge	r2, #43	; 0x2b
 800cd72:	2909      	cmp	r1, #9
 800cd74:	7042      	strb	r2, [r0, #1]
 800cd76:	dd2a      	ble.n	800cdce <__exponent+0x70>
 800cd78:	f10d 0207 	add.w	r2, sp, #7
 800cd7c:	4617      	mov	r7, r2
 800cd7e:	260a      	movs	r6, #10
 800cd80:	4694      	mov	ip, r2
 800cd82:	fb91 f5f6 	sdiv	r5, r1, r6
 800cd86:	fb06 1415 	mls	r4, r6, r5, r1
 800cd8a:	3430      	adds	r4, #48	; 0x30
 800cd8c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cd90:	460c      	mov	r4, r1
 800cd92:	2c63      	cmp	r4, #99	; 0x63
 800cd94:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cd98:	4629      	mov	r1, r5
 800cd9a:	dcf1      	bgt.n	800cd80 <__exponent+0x22>
 800cd9c:	3130      	adds	r1, #48	; 0x30
 800cd9e:	f1ac 0402 	sub.w	r4, ip, #2
 800cda2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cda6:	1c41      	adds	r1, r0, #1
 800cda8:	4622      	mov	r2, r4
 800cdaa:	42ba      	cmp	r2, r7
 800cdac:	d30a      	bcc.n	800cdc4 <__exponent+0x66>
 800cdae:	f10d 0209 	add.w	r2, sp, #9
 800cdb2:	eba2 020c 	sub.w	r2, r2, ip
 800cdb6:	42bc      	cmp	r4, r7
 800cdb8:	bf88      	it	hi
 800cdba:	2200      	movhi	r2, #0
 800cdbc:	4413      	add	r3, r2
 800cdbe:	1a18      	subs	r0, r3, r0
 800cdc0:	b003      	add	sp, #12
 800cdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cdc8:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cdcc:	e7ed      	b.n	800cdaa <__exponent+0x4c>
 800cdce:	2330      	movs	r3, #48	; 0x30
 800cdd0:	3130      	adds	r1, #48	; 0x30
 800cdd2:	7083      	strb	r3, [r0, #2]
 800cdd4:	70c1      	strb	r1, [r0, #3]
 800cdd6:	1d03      	adds	r3, r0, #4
 800cdd8:	e7f1      	b.n	800cdbe <__exponent+0x60>
	...

0800cddc <_printf_float>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	b091      	sub	sp, #68	; 0x44
 800cde2:	460c      	mov	r4, r1
 800cde4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cde8:	4616      	mov	r6, r2
 800cdea:	461f      	mov	r7, r3
 800cdec:	4605      	mov	r5, r0
 800cdee:	f001 fbfb 	bl	800e5e8 <_localeconv_r>
 800cdf2:	6803      	ldr	r3, [r0, #0]
 800cdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f3 fa12 	bl	8000220 <strlen>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	930e      	str	r3, [sp, #56]	; 0x38
 800ce00:	f8d8 3000 	ldr.w	r3, [r8]
 800ce04:	900a      	str	r0, [sp, #40]	; 0x28
 800ce06:	3307      	adds	r3, #7
 800ce08:	f023 0307 	bic.w	r3, r3, #7
 800ce0c:	f103 0208 	add.w	r2, r3, #8
 800ce10:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ce14:	f8d4 b000 	ldr.w	fp, [r4]
 800ce18:	f8c8 2000 	str.w	r2, [r8]
 800ce1c:	e9d3 a800 	ldrd	sl, r8, [r3]
 800ce20:	4652      	mov	r2, sl
 800ce22:	4643      	mov	r3, r8
 800ce24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce28:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800ce2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce30:	4b9c      	ldr	r3, [pc, #624]	; (800d0a4 <_printf_float+0x2c8>)
 800ce32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce36:	4650      	mov	r0, sl
 800ce38:	f7f3 fe5a 	bl	8000af0 <__aeabi_dcmpun>
 800ce3c:	bb70      	cbnz	r0, 800ce9c <_printf_float+0xc0>
 800ce3e:	4b99      	ldr	r3, [pc, #612]	; (800d0a4 <_printf_float+0x2c8>)
 800ce40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce46:	4650      	mov	r0, sl
 800ce48:	f7f3 fe34 	bl	8000ab4 <__aeabi_dcmple>
 800ce4c:	bb30      	cbnz	r0, 800ce9c <_printf_float+0xc0>
 800ce4e:	2200      	movs	r2, #0
 800ce50:	2300      	movs	r3, #0
 800ce52:	4650      	mov	r0, sl
 800ce54:	4641      	mov	r1, r8
 800ce56:	f7f3 fe23 	bl	8000aa0 <__aeabi_dcmplt>
 800ce5a:	b110      	cbz	r0, 800ce62 <_printf_float+0x86>
 800ce5c:	232d      	movs	r3, #45	; 0x2d
 800ce5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce62:	4a91      	ldr	r2, [pc, #580]	; (800d0a8 <_printf_float+0x2cc>)
 800ce64:	4b91      	ldr	r3, [pc, #580]	; (800d0ac <_printf_float+0x2d0>)
 800ce66:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ce6a:	bf94      	ite	ls
 800ce6c:	4690      	movls	r8, r2
 800ce6e:	4698      	movhi	r8, r3
 800ce70:	2303      	movs	r3, #3
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	f02b 0304 	bic.w	r3, fp, #4
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	f04f 0a00 	mov.w	sl, #0
 800ce7e:	9700      	str	r7, [sp, #0]
 800ce80:	4633      	mov	r3, r6
 800ce82:	aa0f      	add	r2, sp, #60	; 0x3c
 800ce84:	4621      	mov	r1, r4
 800ce86:	4628      	mov	r0, r5
 800ce88:	f000 f9d4 	bl	800d234 <_printf_common>
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	f040 808f 	bne.w	800cfb0 <_printf_float+0x1d4>
 800ce92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce96:	b011      	add	sp, #68	; 0x44
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9c:	4652      	mov	r2, sl
 800ce9e:	4643      	mov	r3, r8
 800cea0:	4650      	mov	r0, sl
 800cea2:	4641      	mov	r1, r8
 800cea4:	f7f3 fe24 	bl	8000af0 <__aeabi_dcmpun>
 800cea8:	b140      	cbz	r0, 800cebc <_printf_float+0xe0>
 800ceaa:	f1b8 0f00 	cmp.w	r8, #0
 800ceae:	bfbc      	itt	lt
 800ceb0:	232d      	movlt	r3, #45	; 0x2d
 800ceb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ceb6:	4a7e      	ldr	r2, [pc, #504]	; (800d0b0 <_printf_float+0x2d4>)
 800ceb8:	4b7e      	ldr	r3, [pc, #504]	; (800d0b4 <_printf_float+0x2d8>)
 800ceba:	e7d4      	b.n	800ce66 <_printf_float+0x8a>
 800cebc:	6863      	ldr	r3, [r4, #4]
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cec4:	d142      	bne.n	800cf4c <_printf_float+0x170>
 800cec6:	2306      	movs	r3, #6
 800cec8:	6063      	str	r3, [r4, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	9206      	str	r2, [sp, #24]
 800cece:	aa0e      	add	r2, sp, #56	; 0x38
 800ced0:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ced4:	aa0d      	add	r2, sp, #52	; 0x34
 800ced6:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ceda:	9203      	str	r2, [sp, #12]
 800cedc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800cee0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	6863      	ldr	r3, [r4, #4]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	4652      	mov	r2, sl
 800ceec:	4643      	mov	r3, r8
 800ceee:	4628      	mov	r0, r5
 800cef0:	910b      	str	r1, [sp, #44]	; 0x2c
 800cef2:	f7ff fed4 	bl	800cc9e <__cvt>
 800cef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cef8:	2947      	cmp	r1, #71	; 0x47
 800cefa:	4680      	mov	r8, r0
 800cefc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cefe:	d108      	bne.n	800cf12 <_printf_float+0x136>
 800cf00:	1cc8      	adds	r0, r1, #3
 800cf02:	db02      	blt.n	800cf0a <_printf_float+0x12e>
 800cf04:	6863      	ldr	r3, [r4, #4]
 800cf06:	4299      	cmp	r1, r3
 800cf08:	dd40      	ble.n	800cf8c <_printf_float+0x1b0>
 800cf0a:	f1a9 0902 	sub.w	r9, r9, #2
 800cf0e:	fa5f f989 	uxtb.w	r9, r9
 800cf12:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf16:	d81f      	bhi.n	800cf58 <_printf_float+0x17c>
 800cf18:	3901      	subs	r1, #1
 800cf1a:	464a      	mov	r2, r9
 800cf1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf20:	910d      	str	r1, [sp, #52]	; 0x34
 800cf22:	f7ff ff1c 	bl	800cd5e <__exponent>
 800cf26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf28:	1813      	adds	r3, r2, r0
 800cf2a:	2a01      	cmp	r2, #1
 800cf2c:	4682      	mov	sl, r0
 800cf2e:	6123      	str	r3, [r4, #16]
 800cf30:	dc02      	bgt.n	800cf38 <_printf_float+0x15c>
 800cf32:	6822      	ldr	r2, [r4, #0]
 800cf34:	07d2      	lsls	r2, r2, #31
 800cf36:	d501      	bpl.n	800cf3c <_printf_float+0x160>
 800cf38:	3301      	adds	r3, #1
 800cf3a:	6123      	str	r3, [r4, #16]
 800cf3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d09c      	beq.n	800ce7e <_printf_float+0xa2>
 800cf44:	232d      	movs	r3, #45	; 0x2d
 800cf46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf4a:	e798      	b.n	800ce7e <_printf_float+0xa2>
 800cf4c:	2947      	cmp	r1, #71	; 0x47
 800cf4e:	d1bc      	bne.n	800ceca <_printf_float+0xee>
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1ba      	bne.n	800ceca <_printf_float+0xee>
 800cf54:	2301      	movs	r3, #1
 800cf56:	e7b7      	b.n	800cec8 <_printf_float+0xec>
 800cf58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cf5c:	d118      	bne.n	800cf90 <_printf_float+0x1b4>
 800cf5e:	2900      	cmp	r1, #0
 800cf60:	6863      	ldr	r3, [r4, #4]
 800cf62:	dd0b      	ble.n	800cf7c <_printf_float+0x1a0>
 800cf64:	6121      	str	r1, [r4, #16]
 800cf66:	b913      	cbnz	r3, 800cf6e <_printf_float+0x192>
 800cf68:	6822      	ldr	r2, [r4, #0]
 800cf6a:	07d0      	lsls	r0, r2, #31
 800cf6c:	d502      	bpl.n	800cf74 <_printf_float+0x198>
 800cf6e:	3301      	adds	r3, #1
 800cf70:	440b      	add	r3, r1
 800cf72:	6123      	str	r3, [r4, #16]
 800cf74:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	e7df      	b.n	800cf3c <_printf_float+0x160>
 800cf7c:	b913      	cbnz	r3, 800cf84 <_printf_float+0x1a8>
 800cf7e:	6822      	ldr	r2, [r4, #0]
 800cf80:	07d2      	lsls	r2, r2, #31
 800cf82:	d501      	bpl.n	800cf88 <_printf_float+0x1ac>
 800cf84:	3302      	adds	r3, #2
 800cf86:	e7f4      	b.n	800cf72 <_printf_float+0x196>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e7f2      	b.n	800cf72 <_printf_float+0x196>
 800cf8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cf90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf92:	4299      	cmp	r1, r3
 800cf94:	db05      	blt.n	800cfa2 <_printf_float+0x1c6>
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	6121      	str	r1, [r4, #16]
 800cf9a:	07d8      	lsls	r0, r3, #31
 800cf9c:	d5ea      	bpl.n	800cf74 <_printf_float+0x198>
 800cf9e:	1c4b      	adds	r3, r1, #1
 800cfa0:	e7e7      	b.n	800cf72 <_printf_float+0x196>
 800cfa2:	2900      	cmp	r1, #0
 800cfa4:	bfd4      	ite	le
 800cfa6:	f1c1 0202 	rsble	r2, r1, #2
 800cfaa:	2201      	movgt	r2, #1
 800cfac:	4413      	add	r3, r2
 800cfae:	e7e0      	b.n	800cf72 <_printf_float+0x196>
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	055a      	lsls	r2, r3, #21
 800cfb4:	d407      	bmi.n	800cfc6 <_printf_float+0x1ea>
 800cfb6:	6923      	ldr	r3, [r4, #16]
 800cfb8:	4642      	mov	r2, r8
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d12b      	bne.n	800d01c <_printf_float+0x240>
 800cfc4:	e765      	b.n	800ce92 <_printf_float+0xb6>
 800cfc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cfca:	f240 80dc 	bls.w	800d186 <_printf_float+0x3aa>
 800cfce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f7f3 fd59 	bl	8000a8c <__aeabi_dcmpeq>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d033      	beq.n	800d046 <_printf_float+0x26a>
 800cfde:	4a36      	ldr	r2, [pc, #216]	; (800d0b8 <_printf_float+0x2dc>)
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	47b8      	blx	r7
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f43f af52 	beq.w	800ce92 <_printf_float+0xb6>
 800cfee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cff2:	429a      	cmp	r2, r3
 800cff4:	db02      	blt.n	800cffc <_printf_float+0x220>
 800cff6:	6823      	ldr	r3, [r4, #0]
 800cff8:	07d8      	lsls	r0, r3, #31
 800cffa:	d50f      	bpl.n	800d01c <_printf_float+0x240>
 800cffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	47b8      	blx	r7
 800d006:	3001      	adds	r0, #1
 800d008:	f43f af43 	beq.w	800ce92 <_printf_float+0xb6>
 800d00c:	f04f 0800 	mov.w	r8, #0
 800d010:	f104 091a 	add.w	r9, r4, #26
 800d014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d016:	3b01      	subs	r3, #1
 800d018:	4543      	cmp	r3, r8
 800d01a:	dc09      	bgt.n	800d030 <_printf_float+0x254>
 800d01c:	6823      	ldr	r3, [r4, #0]
 800d01e:	079b      	lsls	r3, r3, #30
 800d020:	f100 8103 	bmi.w	800d22a <_printf_float+0x44e>
 800d024:	68e0      	ldr	r0, [r4, #12]
 800d026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d028:	4298      	cmp	r0, r3
 800d02a:	bfb8      	it	lt
 800d02c:	4618      	movlt	r0, r3
 800d02e:	e732      	b.n	800ce96 <_printf_float+0xba>
 800d030:	2301      	movs	r3, #1
 800d032:	464a      	mov	r2, r9
 800d034:	4631      	mov	r1, r6
 800d036:	4628      	mov	r0, r5
 800d038:	47b8      	blx	r7
 800d03a:	3001      	adds	r0, #1
 800d03c:	f43f af29 	beq.w	800ce92 <_printf_float+0xb6>
 800d040:	f108 0801 	add.w	r8, r8, #1
 800d044:	e7e6      	b.n	800d014 <_printf_float+0x238>
 800d046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d048:	2b00      	cmp	r3, #0
 800d04a:	dc37      	bgt.n	800d0bc <_printf_float+0x2e0>
 800d04c:	4a1a      	ldr	r2, [pc, #104]	; (800d0b8 <_printf_float+0x2dc>)
 800d04e:	2301      	movs	r3, #1
 800d050:	4631      	mov	r1, r6
 800d052:	4628      	mov	r0, r5
 800d054:	47b8      	blx	r7
 800d056:	3001      	adds	r0, #1
 800d058:	f43f af1b 	beq.w	800ce92 <_printf_float+0xb6>
 800d05c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d060:	4313      	orrs	r3, r2
 800d062:	d102      	bne.n	800d06a <_printf_float+0x28e>
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	07d9      	lsls	r1, r3, #31
 800d068:	d5d8      	bpl.n	800d01c <_printf_float+0x240>
 800d06a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d06e:	4631      	mov	r1, r6
 800d070:	4628      	mov	r0, r5
 800d072:	47b8      	blx	r7
 800d074:	3001      	adds	r0, #1
 800d076:	f43f af0c 	beq.w	800ce92 <_printf_float+0xb6>
 800d07a:	f04f 0900 	mov.w	r9, #0
 800d07e:	f104 0a1a 	add.w	sl, r4, #26
 800d082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d084:	425b      	negs	r3, r3
 800d086:	454b      	cmp	r3, r9
 800d088:	dc01      	bgt.n	800d08e <_printf_float+0x2b2>
 800d08a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d08c:	e794      	b.n	800cfb8 <_printf_float+0x1dc>
 800d08e:	2301      	movs	r3, #1
 800d090:	4652      	mov	r2, sl
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f aefa 	beq.w	800ce92 <_printf_float+0xb6>
 800d09e:	f109 0901 	add.w	r9, r9, #1
 800d0a2:	e7ee      	b.n	800d082 <_printf_float+0x2a6>
 800d0a4:	7fefffff 	.word	0x7fefffff
 800d0a8:	08011648 	.word	0x08011648
 800d0ac:	0801164c 	.word	0x0801164c
 800d0b0:	08011650 	.word	0x08011650
 800d0b4:	08011654 	.word	0x08011654
 800d0b8:	08011b34 	.word	0x08011b34
 800d0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	bfa8      	it	ge
 800d0c4:	461a      	movge	r2, r3
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	4691      	mov	r9, r2
 800d0ca:	dc37      	bgt.n	800d13c <_printf_float+0x360>
 800d0cc:	f04f 0b00 	mov.w	fp, #0
 800d0d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0d4:	f104 021a 	add.w	r2, r4, #26
 800d0d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d0dc:	ebaa 0309 	sub.w	r3, sl, r9
 800d0e0:	455b      	cmp	r3, fp
 800d0e2:	dc33      	bgt.n	800d14c <_printf_float+0x370>
 800d0e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	db3b      	blt.n	800d164 <_printf_float+0x388>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	07da      	lsls	r2, r3, #31
 800d0f0:	d438      	bmi.n	800d164 <_printf_float+0x388>
 800d0f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d0f6:	eba2 0903 	sub.w	r9, r2, r3
 800d0fa:	eba2 020a 	sub.w	r2, r2, sl
 800d0fe:	4591      	cmp	r9, r2
 800d100:	bfa8      	it	ge
 800d102:	4691      	movge	r9, r2
 800d104:	f1b9 0f00 	cmp.w	r9, #0
 800d108:	dc34      	bgt.n	800d174 <_printf_float+0x398>
 800d10a:	f04f 0800 	mov.w	r8, #0
 800d10e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d112:	f104 0a1a 	add.w	sl, r4, #26
 800d116:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d11a:	1a9b      	subs	r3, r3, r2
 800d11c:	eba3 0309 	sub.w	r3, r3, r9
 800d120:	4543      	cmp	r3, r8
 800d122:	f77f af7b 	ble.w	800d01c <_printf_float+0x240>
 800d126:	2301      	movs	r3, #1
 800d128:	4652      	mov	r2, sl
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f aeae 	beq.w	800ce92 <_printf_float+0xb6>
 800d136:	f108 0801 	add.w	r8, r8, #1
 800d13a:	e7ec      	b.n	800d116 <_printf_float+0x33a>
 800d13c:	4613      	mov	r3, r2
 800d13e:	4631      	mov	r1, r6
 800d140:	4642      	mov	r2, r8
 800d142:	4628      	mov	r0, r5
 800d144:	47b8      	blx	r7
 800d146:	3001      	adds	r0, #1
 800d148:	d1c0      	bne.n	800d0cc <_printf_float+0x2f0>
 800d14a:	e6a2      	b.n	800ce92 <_printf_float+0xb6>
 800d14c:	2301      	movs	r3, #1
 800d14e:	4631      	mov	r1, r6
 800d150:	4628      	mov	r0, r5
 800d152:	920b      	str	r2, [sp, #44]	; 0x2c
 800d154:	47b8      	blx	r7
 800d156:	3001      	adds	r0, #1
 800d158:	f43f ae9b 	beq.w	800ce92 <_printf_float+0xb6>
 800d15c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d15e:	f10b 0b01 	add.w	fp, fp, #1
 800d162:	e7b9      	b.n	800d0d8 <_printf_float+0x2fc>
 800d164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d168:	4631      	mov	r1, r6
 800d16a:	4628      	mov	r0, r5
 800d16c:	47b8      	blx	r7
 800d16e:	3001      	adds	r0, #1
 800d170:	d1bf      	bne.n	800d0f2 <_printf_float+0x316>
 800d172:	e68e      	b.n	800ce92 <_printf_float+0xb6>
 800d174:	464b      	mov	r3, r9
 800d176:	eb08 020a 	add.w	r2, r8, sl
 800d17a:	4631      	mov	r1, r6
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b8      	blx	r7
 800d180:	3001      	adds	r0, #1
 800d182:	d1c2      	bne.n	800d10a <_printf_float+0x32e>
 800d184:	e685      	b.n	800ce92 <_printf_float+0xb6>
 800d186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d188:	2a01      	cmp	r2, #1
 800d18a:	dc01      	bgt.n	800d190 <_printf_float+0x3b4>
 800d18c:	07db      	lsls	r3, r3, #31
 800d18e:	d539      	bpl.n	800d204 <_printf_float+0x428>
 800d190:	2301      	movs	r3, #1
 800d192:	4642      	mov	r2, r8
 800d194:	4631      	mov	r1, r6
 800d196:	4628      	mov	r0, r5
 800d198:	47b8      	blx	r7
 800d19a:	3001      	adds	r0, #1
 800d19c:	f43f ae79 	beq.w	800ce92 <_printf_float+0xb6>
 800d1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	47b8      	blx	r7
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	f43f ae71 	beq.w	800ce92 <_printf_float+0xb6>
 800d1b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800d1bc:	f7f3 fc66 	bl	8000a8c <__aeabi_dcmpeq>
 800d1c0:	b9d8      	cbnz	r0, 800d1fa <_printf_float+0x41e>
 800d1c2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800d1c6:	f108 0201 	add.w	r2, r8, #1
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	47b8      	blx	r7
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d10e      	bne.n	800d1f2 <_printf_float+0x416>
 800d1d4:	e65d      	b.n	800ce92 <_printf_float+0xb6>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	464a      	mov	r2, r9
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b8      	blx	r7
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	f43f ae56 	beq.w	800ce92 <_printf_float+0xb6>
 800d1e6:	f108 0801 	add.w	r8, r8, #1
 800d1ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	4543      	cmp	r3, r8
 800d1f0:	dcf1      	bgt.n	800d1d6 <_printf_float+0x3fa>
 800d1f2:	4653      	mov	r3, sl
 800d1f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d1f8:	e6df      	b.n	800cfba <_printf_float+0x1de>
 800d1fa:	f04f 0800 	mov.w	r8, #0
 800d1fe:	f104 091a 	add.w	r9, r4, #26
 800d202:	e7f2      	b.n	800d1ea <_printf_float+0x40e>
 800d204:	2301      	movs	r3, #1
 800d206:	4642      	mov	r2, r8
 800d208:	e7df      	b.n	800d1ca <_printf_float+0x3ee>
 800d20a:	2301      	movs	r3, #1
 800d20c:	464a      	mov	r2, r9
 800d20e:	4631      	mov	r1, r6
 800d210:	4628      	mov	r0, r5
 800d212:	47b8      	blx	r7
 800d214:	3001      	adds	r0, #1
 800d216:	f43f ae3c 	beq.w	800ce92 <_printf_float+0xb6>
 800d21a:	f108 0801 	add.w	r8, r8, #1
 800d21e:	68e3      	ldr	r3, [r4, #12]
 800d220:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d222:	1a5b      	subs	r3, r3, r1
 800d224:	4543      	cmp	r3, r8
 800d226:	dcf0      	bgt.n	800d20a <_printf_float+0x42e>
 800d228:	e6fc      	b.n	800d024 <_printf_float+0x248>
 800d22a:	f04f 0800 	mov.w	r8, #0
 800d22e:	f104 0919 	add.w	r9, r4, #25
 800d232:	e7f4      	b.n	800d21e <_printf_float+0x442>

0800d234 <_printf_common>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	4616      	mov	r6, r2
 800d23a:	4699      	mov	r9, r3
 800d23c:	688a      	ldr	r2, [r1, #8]
 800d23e:	690b      	ldr	r3, [r1, #16]
 800d240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d244:	4293      	cmp	r3, r2
 800d246:	bfb8      	it	lt
 800d248:	4613      	movlt	r3, r2
 800d24a:	6033      	str	r3, [r6, #0]
 800d24c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d250:	4607      	mov	r7, r0
 800d252:	460c      	mov	r4, r1
 800d254:	b10a      	cbz	r2, 800d25a <_printf_common+0x26>
 800d256:	3301      	adds	r3, #1
 800d258:	6033      	str	r3, [r6, #0]
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	0699      	lsls	r1, r3, #26
 800d25e:	bf42      	ittt	mi
 800d260:	6833      	ldrmi	r3, [r6, #0]
 800d262:	3302      	addmi	r3, #2
 800d264:	6033      	strmi	r3, [r6, #0]
 800d266:	6825      	ldr	r5, [r4, #0]
 800d268:	f015 0506 	ands.w	r5, r5, #6
 800d26c:	d106      	bne.n	800d27c <_printf_common+0x48>
 800d26e:	f104 0a19 	add.w	sl, r4, #25
 800d272:	68e3      	ldr	r3, [r4, #12]
 800d274:	6832      	ldr	r2, [r6, #0]
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	42ab      	cmp	r3, r5
 800d27a:	dc26      	bgt.n	800d2ca <_printf_common+0x96>
 800d27c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d280:	1e13      	subs	r3, r2, #0
 800d282:	6822      	ldr	r2, [r4, #0]
 800d284:	bf18      	it	ne
 800d286:	2301      	movne	r3, #1
 800d288:	0692      	lsls	r2, r2, #26
 800d28a:	d42b      	bmi.n	800d2e4 <_printf_common+0xb0>
 800d28c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d290:	4649      	mov	r1, r9
 800d292:	4638      	mov	r0, r7
 800d294:	47c0      	blx	r8
 800d296:	3001      	adds	r0, #1
 800d298:	d01e      	beq.n	800d2d8 <_printf_common+0xa4>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	6922      	ldr	r2, [r4, #16]
 800d29e:	f003 0306 	and.w	r3, r3, #6
 800d2a2:	2b04      	cmp	r3, #4
 800d2a4:	bf02      	ittt	eq
 800d2a6:	68e5      	ldreq	r5, [r4, #12]
 800d2a8:	6833      	ldreq	r3, [r6, #0]
 800d2aa:	1aed      	subeq	r5, r5, r3
 800d2ac:	68a3      	ldr	r3, [r4, #8]
 800d2ae:	bf0c      	ite	eq
 800d2b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2b4:	2500      	movne	r5, #0
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	bfc4      	itt	gt
 800d2ba:	1a9b      	subgt	r3, r3, r2
 800d2bc:	18ed      	addgt	r5, r5, r3
 800d2be:	2600      	movs	r6, #0
 800d2c0:	341a      	adds	r4, #26
 800d2c2:	42b5      	cmp	r5, r6
 800d2c4:	d11a      	bne.n	800d2fc <_printf_common+0xc8>
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	e008      	b.n	800d2dc <_printf_common+0xa8>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	4652      	mov	r2, sl
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	47c0      	blx	r8
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	d103      	bne.n	800d2e0 <_printf_common+0xac>
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e0:	3501      	adds	r5, #1
 800d2e2:	e7c6      	b.n	800d272 <_printf_common+0x3e>
 800d2e4:	18e1      	adds	r1, r4, r3
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	2030      	movs	r0, #48	; 0x30
 800d2ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2ee:	4422      	add	r2, r4
 800d2f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2f8:	3302      	adds	r3, #2
 800d2fa:	e7c7      	b.n	800d28c <_printf_common+0x58>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	4622      	mov	r2, r4
 800d300:	4649      	mov	r1, r9
 800d302:	4638      	mov	r0, r7
 800d304:	47c0      	blx	r8
 800d306:	3001      	adds	r0, #1
 800d308:	d0e6      	beq.n	800d2d8 <_printf_common+0xa4>
 800d30a:	3601      	adds	r6, #1
 800d30c:	e7d9      	b.n	800d2c2 <_printf_common+0x8e>
	...

0800d310 <_printf_i>:
 800d310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d314:	7e0f      	ldrb	r7, [r1, #24]
 800d316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d318:	2f78      	cmp	r7, #120	; 0x78
 800d31a:	4691      	mov	r9, r2
 800d31c:	4680      	mov	r8, r0
 800d31e:	460c      	mov	r4, r1
 800d320:	469a      	mov	sl, r3
 800d322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d326:	d807      	bhi.n	800d338 <_printf_i+0x28>
 800d328:	2f62      	cmp	r7, #98	; 0x62
 800d32a:	d80a      	bhi.n	800d342 <_printf_i+0x32>
 800d32c:	2f00      	cmp	r7, #0
 800d32e:	f000 80d4 	beq.w	800d4da <_printf_i+0x1ca>
 800d332:	2f58      	cmp	r7, #88	; 0x58
 800d334:	f000 80c0 	beq.w	800d4b8 <_printf_i+0x1a8>
 800d338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d33c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d340:	e03a      	b.n	800d3b8 <_printf_i+0xa8>
 800d342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d346:	2b15      	cmp	r3, #21
 800d348:	d8f6      	bhi.n	800d338 <_printf_i+0x28>
 800d34a:	a101      	add	r1, pc, #4	; (adr r1, 800d350 <_printf_i+0x40>)
 800d34c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d350:	0800d3a9 	.word	0x0800d3a9
 800d354:	0800d3bd 	.word	0x0800d3bd
 800d358:	0800d339 	.word	0x0800d339
 800d35c:	0800d339 	.word	0x0800d339
 800d360:	0800d339 	.word	0x0800d339
 800d364:	0800d339 	.word	0x0800d339
 800d368:	0800d3bd 	.word	0x0800d3bd
 800d36c:	0800d339 	.word	0x0800d339
 800d370:	0800d339 	.word	0x0800d339
 800d374:	0800d339 	.word	0x0800d339
 800d378:	0800d339 	.word	0x0800d339
 800d37c:	0800d4c1 	.word	0x0800d4c1
 800d380:	0800d3e9 	.word	0x0800d3e9
 800d384:	0800d47b 	.word	0x0800d47b
 800d388:	0800d339 	.word	0x0800d339
 800d38c:	0800d339 	.word	0x0800d339
 800d390:	0800d4e3 	.word	0x0800d4e3
 800d394:	0800d339 	.word	0x0800d339
 800d398:	0800d3e9 	.word	0x0800d3e9
 800d39c:	0800d339 	.word	0x0800d339
 800d3a0:	0800d339 	.word	0x0800d339
 800d3a4:	0800d483 	.word	0x0800d483
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	1d1a      	adds	r2, r3, #4
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	602a      	str	r2, [r5, #0]
 800d3b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e09f      	b.n	800d4fc <_printf_i+0x1ec>
 800d3bc:	6820      	ldr	r0, [r4, #0]
 800d3be:	682b      	ldr	r3, [r5, #0]
 800d3c0:	0607      	lsls	r7, r0, #24
 800d3c2:	f103 0104 	add.w	r1, r3, #4
 800d3c6:	6029      	str	r1, [r5, #0]
 800d3c8:	d501      	bpl.n	800d3ce <_printf_i+0xbe>
 800d3ca:	681e      	ldr	r6, [r3, #0]
 800d3cc:	e003      	b.n	800d3d6 <_printf_i+0xc6>
 800d3ce:	0646      	lsls	r6, r0, #25
 800d3d0:	d5fb      	bpl.n	800d3ca <_printf_i+0xba>
 800d3d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	da03      	bge.n	800d3e2 <_printf_i+0xd2>
 800d3da:	232d      	movs	r3, #45	; 0x2d
 800d3dc:	4276      	negs	r6, r6
 800d3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3e2:	485a      	ldr	r0, [pc, #360]	; (800d54c <_printf_i+0x23c>)
 800d3e4:	230a      	movs	r3, #10
 800d3e6:	e012      	b.n	800d40e <_printf_i+0xfe>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	6820      	ldr	r0, [r4, #0]
 800d3ec:	1d19      	adds	r1, r3, #4
 800d3ee:	6029      	str	r1, [r5, #0]
 800d3f0:	0605      	lsls	r5, r0, #24
 800d3f2:	d501      	bpl.n	800d3f8 <_printf_i+0xe8>
 800d3f4:	681e      	ldr	r6, [r3, #0]
 800d3f6:	e002      	b.n	800d3fe <_printf_i+0xee>
 800d3f8:	0641      	lsls	r1, r0, #25
 800d3fa:	d5fb      	bpl.n	800d3f4 <_printf_i+0xe4>
 800d3fc:	881e      	ldrh	r6, [r3, #0]
 800d3fe:	4853      	ldr	r0, [pc, #332]	; (800d54c <_printf_i+0x23c>)
 800d400:	2f6f      	cmp	r7, #111	; 0x6f
 800d402:	bf0c      	ite	eq
 800d404:	2308      	moveq	r3, #8
 800d406:	230a      	movne	r3, #10
 800d408:	2100      	movs	r1, #0
 800d40a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d40e:	6865      	ldr	r5, [r4, #4]
 800d410:	60a5      	str	r5, [r4, #8]
 800d412:	2d00      	cmp	r5, #0
 800d414:	bfa2      	ittt	ge
 800d416:	6821      	ldrge	r1, [r4, #0]
 800d418:	f021 0104 	bicge.w	r1, r1, #4
 800d41c:	6021      	strge	r1, [r4, #0]
 800d41e:	b90e      	cbnz	r6, 800d424 <_printf_i+0x114>
 800d420:	2d00      	cmp	r5, #0
 800d422:	d04b      	beq.n	800d4bc <_printf_i+0x1ac>
 800d424:	4615      	mov	r5, r2
 800d426:	fbb6 f1f3 	udiv	r1, r6, r3
 800d42a:	fb03 6711 	mls	r7, r3, r1, r6
 800d42e:	5dc7      	ldrb	r7, [r0, r7]
 800d430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d434:	4637      	mov	r7, r6
 800d436:	42bb      	cmp	r3, r7
 800d438:	460e      	mov	r6, r1
 800d43a:	d9f4      	bls.n	800d426 <_printf_i+0x116>
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d10b      	bne.n	800d458 <_printf_i+0x148>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	07de      	lsls	r6, r3, #31
 800d444:	d508      	bpl.n	800d458 <_printf_i+0x148>
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	6861      	ldr	r1, [r4, #4]
 800d44a:	4299      	cmp	r1, r3
 800d44c:	bfde      	ittt	le
 800d44e:	2330      	movle	r3, #48	; 0x30
 800d450:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d454:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d458:	1b52      	subs	r2, r2, r5
 800d45a:	6122      	str	r2, [r4, #16]
 800d45c:	f8cd a000 	str.w	sl, [sp]
 800d460:	464b      	mov	r3, r9
 800d462:	aa03      	add	r2, sp, #12
 800d464:	4621      	mov	r1, r4
 800d466:	4640      	mov	r0, r8
 800d468:	f7ff fee4 	bl	800d234 <_printf_common>
 800d46c:	3001      	adds	r0, #1
 800d46e:	d14a      	bne.n	800d506 <_printf_i+0x1f6>
 800d470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d474:	b004      	add	sp, #16
 800d476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	f043 0320 	orr.w	r3, r3, #32
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	4833      	ldr	r0, [pc, #204]	; (800d550 <_printf_i+0x240>)
 800d484:	2778      	movs	r7, #120	; 0x78
 800d486:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	6829      	ldr	r1, [r5, #0]
 800d48e:	061f      	lsls	r7, r3, #24
 800d490:	f851 6b04 	ldr.w	r6, [r1], #4
 800d494:	d402      	bmi.n	800d49c <_printf_i+0x18c>
 800d496:	065f      	lsls	r7, r3, #25
 800d498:	bf48      	it	mi
 800d49a:	b2b6      	uxthmi	r6, r6
 800d49c:	07df      	lsls	r7, r3, #31
 800d49e:	bf48      	it	mi
 800d4a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d4a4:	6029      	str	r1, [r5, #0]
 800d4a6:	bf48      	it	mi
 800d4a8:	6023      	strmi	r3, [r4, #0]
 800d4aa:	b91e      	cbnz	r6, 800d4b4 <_printf_i+0x1a4>
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	f023 0320 	bic.w	r3, r3, #32
 800d4b2:	6023      	str	r3, [r4, #0]
 800d4b4:	2310      	movs	r3, #16
 800d4b6:	e7a7      	b.n	800d408 <_printf_i+0xf8>
 800d4b8:	4824      	ldr	r0, [pc, #144]	; (800d54c <_printf_i+0x23c>)
 800d4ba:	e7e4      	b.n	800d486 <_printf_i+0x176>
 800d4bc:	4615      	mov	r5, r2
 800d4be:	e7bd      	b.n	800d43c <_printf_i+0x12c>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	6826      	ldr	r6, [r4, #0]
 800d4c4:	6961      	ldr	r1, [r4, #20]
 800d4c6:	1d18      	adds	r0, r3, #4
 800d4c8:	6028      	str	r0, [r5, #0]
 800d4ca:	0635      	lsls	r5, r6, #24
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	d501      	bpl.n	800d4d4 <_printf_i+0x1c4>
 800d4d0:	6019      	str	r1, [r3, #0]
 800d4d2:	e002      	b.n	800d4da <_printf_i+0x1ca>
 800d4d4:	0670      	lsls	r0, r6, #25
 800d4d6:	d5fb      	bpl.n	800d4d0 <_printf_i+0x1c0>
 800d4d8:	8019      	strh	r1, [r3, #0]
 800d4da:	2300      	movs	r3, #0
 800d4dc:	6123      	str	r3, [r4, #16]
 800d4de:	4615      	mov	r5, r2
 800d4e0:	e7bc      	b.n	800d45c <_printf_i+0x14c>
 800d4e2:	682b      	ldr	r3, [r5, #0]
 800d4e4:	1d1a      	adds	r2, r3, #4
 800d4e6:	602a      	str	r2, [r5, #0]
 800d4e8:	681d      	ldr	r5, [r3, #0]
 800d4ea:	6862      	ldr	r2, [r4, #4]
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f7f2 fe46 	bl	8000180 <memchr>
 800d4f4:	b108      	cbz	r0, 800d4fa <_printf_i+0x1ea>
 800d4f6:	1b40      	subs	r0, r0, r5
 800d4f8:	6060      	str	r0, [r4, #4]
 800d4fa:	6863      	ldr	r3, [r4, #4]
 800d4fc:	6123      	str	r3, [r4, #16]
 800d4fe:	2300      	movs	r3, #0
 800d500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d504:	e7aa      	b.n	800d45c <_printf_i+0x14c>
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	462a      	mov	r2, r5
 800d50a:	4649      	mov	r1, r9
 800d50c:	4640      	mov	r0, r8
 800d50e:	47d0      	blx	sl
 800d510:	3001      	adds	r0, #1
 800d512:	d0ad      	beq.n	800d470 <_printf_i+0x160>
 800d514:	6823      	ldr	r3, [r4, #0]
 800d516:	079b      	lsls	r3, r3, #30
 800d518:	d413      	bmi.n	800d542 <_printf_i+0x232>
 800d51a:	68e0      	ldr	r0, [r4, #12]
 800d51c:	9b03      	ldr	r3, [sp, #12]
 800d51e:	4298      	cmp	r0, r3
 800d520:	bfb8      	it	lt
 800d522:	4618      	movlt	r0, r3
 800d524:	e7a6      	b.n	800d474 <_printf_i+0x164>
 800d526:	2301      	movs	r3, #1
 800d528:	4632      	mov	r2, r6
 800d52a:	4649      	mov	r1, r9
 800d52c:	4640      	mov	r0, r8
 800d52e:	47d0      	blx	sl
 800d530:	3001      	adds	r0, #1
 800d532:	d09d      	beq.n	800d470 <_printf_i+0x160>
 800d534:	3501      	adds	r5, #1
 800d536:	68e3      	ldr	r3, [r4, #12]
 800d538:	9903      	ldr	r1, [sp, #12]
 800d53a:	1a5b      	subs	r3, r3, r1
 800d53c:	42ab      	cmp	r3, r5
 800d53e:	dcf2      	bgt.n	800d526 <_printf_i+0x216>
 800d540:	e7eb      	b.n	800d51a <_printf_i+0x20a>
 800d542:	2500      	movs	r5, #0
 800d544:	f104 0619 	add.w	r6, r4, #25
 800d548:	e7f5      	b.n	800d536 <_printf_i+0x226>
 800d54a:	bf00      	nop
 800d54c:	08011658 	.word	0x08011658
 800d550:	08011669 	.word	0x08011669

0800d554 <sniprintf>:
 800d554:	b40c      	push	{r2, r3}
 800d556:	b530      	push	{r4, r5, lr}
 800d558:	4b17      	ldr	r3, [pc, #92]	; (800d5b8 <sniprintf+0x64>)
 800d55a:	1e0c      	subs	r4, r1, #0
 800d55c:	681d      	ldr	r5, [r3, #0]
 800d55e:	b09d      	sub	sp, #116	; 0x74
 800d560:	da08      	bge.n	800d574 <sniprintf+0x20>
 800d562:	238b      	movs	r3, #139	; 0x8b
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d56a:	b01d      	add	sp, #116	; 0x74
 800d56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d570:	b002      	add	sp, #8
 800d572:	4770      	bx	lr
 800d574:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d578:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d57c:	bf14      	ite	ne
 800d57e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d582:	4623      	moveq	r3, r4
 800d584:	9304      	str	r3, [sp, #16]
 800d586:	9307      	str	r3, [sp, #28]
 800d588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d58c:	9002      	str	r0, [sp, #8]
 800d58e:	9006      	str	r0, [sp, #24]
 800d590:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d594:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d596:	ab21      	add	r3, sp, #132	; 0x84
 800d598:	a902      	add	r1, sp, #8
 800d59a:	4628      	mov	r0, r5
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	f001 ffa9 	bl	800f4f4 <_svfiprintf_r>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	bfbc      	itt	lt
 800d5a6:	238b      	movlt	r3, #139	; 0x8b
 800d5a8:	602b      	strlt	r3, [r5, #0]
 800d5aa:	2c00      	cmp	r4, #0
 800d5ac:	d0dd      	beq.n	800d56a <sniprintf+0x16>
 800d5ae:	9b02      	ldr	r3, [sp, #8]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	701a      	strb	r2, [r3, #0]
 800d5b4:	e7d9      	b.n	800d56a <sniprintf+0x16>
 800d5b6:	bf00      	nop
 800d5b8:	20000088 	.word	0x20000088

0800d5bc <std>:
 800d5bc:	2300      	movs	r3, #0
 800d5be:	b510      	push	{r4, lr}
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	e9c0 3300 	strd	r3, r3, [r0]
 800d5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5ca:	6083      	str	r3, [r0, #8]
 800d5cc:	8181      	strh	r1, [r0, #12]
 800d5ce:	6643      	str	r3, [r0, #100]	; 0x64
 800d5d0:	81c2      	strh	r2, [r0, #14]
 800d5d2:	6183      	str	r3, [r0, #24]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	2208      	movs	r2, #8
 800d5d8:	305c      	adds	r0, #92	; 0x5c
 800d5da:	f000 f99d 	bl	800d918 <memset>
 800d5de:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <std+0x58>)
 800d5e0:	6263      	str	r3, [r4, #36]	; 0x24
 800d5e2:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <std+0x5c>)
 800d5e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d5e6:	4b0d      	ldr	r3, [pc, #52]	; (800d61c <std+0x60>)
 800d5e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d5ea:	4b0d      	ldr	r3, [pc, #52]	; (800d620 <std+0x64>)
 800d5ec:	6323      	str	r3, [r4, #48]	; 0x30
 800d5ee:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <std+0x68>)
 800d5f0:	6224      	str	r4, [r4, #32]
 800d5f2:	429c      	cmp	r4, r3
 800d5f4:	d006      	beq.n	800d604 <std+0x48>
 800d5f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d5fa:	4294      	cmp	r4, r2
 800d5fc:	d002      	beq.n	800d604 <std+0x48>
 800d5fe:	33d0      	adds	r3, #208	; 0xd0
 800d600:	429c      	cmp	r4, r3
 800d602:	d105      	bne.n	800d610 <std+0x54>
 800d604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d60c:	f001 b81e 	b.w	800e64c <__retarget_lock_init_recursive>
 800d610:	bd10      	pop	{r4, pc}
 800d612:	bf00      	nop
 800d614:	08010381 	.word	0x08010381
 800d618:	080103a7 	.word	0x080103a7
 800d61c:	080103df 	.word	0x080103df
 800d620:	08010403 	.word	0x08010403
 800d624:	200004bc 	.word	0x200004bc

0800d628 <stdio_exit_handler>:
 800d628:	4a02      	ldr	r2, [pc, #8]	; (800d634 <stdio_exit_handler+0xc>)
 800d62a:	4903      	ldr	r1, [pc, #12]	; (800d638 <stdio_exit_handler+0x10>)
 800d62c:	4803      	ldr	r0, [pc, #12]	; (800d63c <stdio_exit_handler+0x14>)
 800d62e:	f000 b8e7 	b.w	800d800 <_fwalk_sglue>
 800d632:	bf00      	nop
 800d634:	20000028 	.word	0x20000028
 800d638:	0800fbd9 	.word	0x0800fbd9
 800d63c:	2000003c 	.word	0x2000003c

0800d640 <cleanup_stdio>:
 800d640:	6841      	ldr	r1, [r0, #4]
 800d642:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <cleanup_stdio+0x34>)
 800d644:	4299      	cmp	r1, r3
 800d646:	b510      	push	{r4, lr}
 800d648:	4604      	mov	r4, r0
 800d64a:	d001      	beq.n	800d650 <cleanup_stdio+0x10>
 800d64c:	f002 fac4 	bl	800fbd8 <_fflush_r>
 800d650:	68a1      	ldr	r1, [r4, #8]
 800d652:	4b09      	ldr	r3, [pc, #36]	; (800d678 <cleanup_stdio+0x38>)
 800d654:	4299      	cmp	r1, r3
 800d656:	d002      	beq.n	800d65e <cleanup_stdio+0x1e>
 800d658:	4620      	mov	r0, r4
 800d65a:	f002 fabd 	bl	800fbd8 <_fflush_r>
 800d65e:	68e1      	ldr	r1, [r4, #12]
 800d660:	4b06      	ldr	r3, [pc, #24]	; (800d67c <cleanup_stdio+0x3c>)
 800d662:	4299      	cmp	r1, r3
 800d664:	d004      	beq.n	800d670 <cleanup_stdio+0x30>
 800d666:	4620      	mov	r0, r4
 800d668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d66c:	f002 bab4 	b.w	800fbd8 <_fflush_r>
 800d670:	bd10      	pop	{r4, pc}
 800d672:	bf00      	nop
 800d674:	200004bc 	.word	0x200004bc
 800d678:	20000524 	.word	0x20000524
 800d67c:	2000058c 	.word	0x2000058c

0800d680 <global_stdio_init.part.0>:
 800d680:	b510      	push	{r4, lr}
 800d682:	4b0b      	ldr	r3, [pc, #44]	; (800d6b0 <global_stdio_init.part.0+0x30>)
 800d684:	4c0b      	ldr	r4, [pc, #44]	; (800d6b4 <global_stdio_init.part.0+0x34>)
 800d686:	4a0c      	ldr	r2, [pc, #48]	; (800d6b8 <global_stdio_init.part.0+0x38>)
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	4620      	mov	r0, r4
 800d68c:	2200      	movs	r2, #0
 800d68e:	2104      	movs	r1, #4
 800d690:	f7ff ff94 	bl	800d5bc <std>
 800d694:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d698:	2201      	movs	r2, #1
 800d69a:	2109      	movs	r1, #9
 800d69c:	f7ff ff8e 	bl	800d5bc <std>
 800d6a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6aa:	2112      	movs	r1, #18
 800d6ac:	f7ff bf86 	b.w	800d5bc <std>
 800d6b0:	200005f4 	.word	0x200005f4
 800d6b4:	200004bc 	.word	0x200004bc
 800d6b8:	0800d629 	.word	0x0800d629

0800d6bc <__sfp_lock_acquire>:
 800d6bc:	4801      	ldr	r0, [pc, #4]	; (800d6c4 <__sfp_lock_acquire+0x8>)
 800d6be:	f000 bfc7 	b.w	800e650 <__retarget_lock_acquire_recursive>
 800d6c2:	bf00      	nop
 800d6c4:	2000061e 	.word	0x2000061e

0800d6c8 <__sfp_lock_release>:
 800d6c8:	4801      	ldr	r0, [pc, #4]	; (800d6d0 <__sfp_lock_release+0x8>)
 800d6ca:	f000 bfc3 	b.w	800e654 <__retarget_lock_release_recursive>
 800d6ce:	bf00      	nop
 800d6d0:	2000061e 	.word	0x2000061e

0800d6d4 <__sinit>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	f7ff fff0 	bl	800d6bc <__sfp_lock_acquire>
 800d6dc:	6a23      	ldr	r3, [r4, #32]
 800d6de:	b11b      	cbz	r3, 800d6e8 <__sinit+0x14>
 800d6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e4:	f7ff bff0 	b.w	800d6c8 <__sfp_lock_release>
 800d6e8:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <__sinit+0x28>)
 800d6ea:	6223      	str	r3, [r4, #32]
 800d6ec:	4b04      	ldr	r3, [pc, #16]	; (800d700 <__sinit+0x2c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1f5      	bne.n	800d6e0 <__sinit+0xc>
 800d6f4:	f7ff ffc4 	bl	800d680 <global_stdio_init.part.0>
 800d6f8:	e7f2      	b.n	800d6e0 <__sinit+0xc>
 800d6fa:	bf00      	nop
 800d6fc:	0800d641 	.word	0x0800d641
 800d700:	200005f4 	.word	0x200005f4

0800d704 <_strtoul_l.constprop.0>:
 800d704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d708:	4f36      	ldr	r7, [pc, #216]	; (800d7e4 <_strtoul_l.constprop.0+0xe0>)
 800d70a:	4686      	mov	lr, r0
 800d70c:	460d      	mov	r5, r1
 800d70e:	4628      	mov	r0, r5
 800d710:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d714:	5d3e      	ldrb	r6, [r7, r4]
 800d716:	f016 0608 	ands.w	r6, r6, #8
 800d71a:	d1f8      	bne.n	800d70e <_strtoul_l.constprop.0+0xa>
 800d71c:	2c2d      	cmp	r4, #45	; 0x2d
 800d71e:	d130      	bne.n	800d782 <_strtoul_l.constprop.0+0x7e>
 800d720:	782c      	ldrb	r4, [r5, #0]
 800d722:	2601      	movs	r6, #1
 800d724:	1c85      	adds	r5, r0, #2
 800d726:	2b00      	cmp	r3, #0
 800d728:	d057      	beq.n	800d7da <_strtoul_l.constprop.0+0xd6>
 800d72a:	2b10      	cmp	r3, #16
 800d72c:	d109      	bne.n	800d742 <_strtoul_l.constprop.0+0x3e>
 800d72e:	2c30      	cmp	r4, #48	; 0x30
 800d730:	d107      	bne.n	800d742 <_strtoul_l.constprop.0+0x3e>
 800d732:	7828      	ldrb	r0, [r5, #0]
 800d734:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d738:	2858      	cmp	r0, #88	; 0x58
 800d73a:	d149      	bne.n	800d7d0 <_strtoul_l.constprop.0+0xcc>
 800d73c:	786c      	ldrb	r4, [r5, #1]
 800d73e:	2310      	movs	r3, #16
 800d740:	3502      	adds	r5, #2
 800d742:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d746:	2700      	movs	r7, #0
 800d748:	fbb8 f8f3 	udiv	r8, r8, r3
 800d74c:	fb03 f908 	mul.w	r9, r3, r8
 800d750:	ea6f 0909 	mvn.w	r9, r9
 800d754:	4638      	mov	r0, r7
 800d756:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d75a:	f1bc 0f09 	cmp.w	ip, #9
 800d75e:	d815      	bhi.n	800d78c <_strtoul_l.constprop.0+0x88>
 800d760:	4664      	mov	r4, ip
 800d762:	42a3      	cmp	r3, r4
 800d764:	dd23      	ble.n	800d7ae <_strtoul_l.constprop.0+0xaa>
 800d766:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800d76a:	d007      	beq.n	800d77c <_strtoul_l.constprop.0+0x78>
 800d76c:	4580      	cmp	r8, r0
 800d76e:	d31b      	bcc.n	800d7a8 <_strtoul_l.constprop.0+0xa4>
 800d770:	d101      	bne.n	800d776 <_strtoul_l.constprop.0+0x72>
 800d772:	45a1      	cmp	r9, r4
 800d774:	db18      	blt.n	800d7a8 <_strtoul_l.constprop.0+0xa4>
 800d776:	fb00 4003 	mla	r0, r0, r3, r4
 800d77a:	2701      	movs	r7, #1
 800d77c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d780:	e7e9      	b.n	800d756 <_strtoul_l.constprop.0+0x52>
 800d782:	2c2b      	cmp	r4, #43	; 0x2b
 800d784:	bf04      	itt	eq
 800d786:	782c      	ldrbeq	r4, [r5, #0]
 800d788:	1c85      	addeq	r5, r0, #2
 800d78a:	e7cc      	b.n	800d726 <_strtoul_l.constprop.0+0x22>
 800d78c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d790:	f1bc 0f19 	cmp.w	ip, #25
 800d794:	d801      	bhi.n	800d79a <_strtoul_l.constprop.0+0x96>
 800d796:	3c37      	subs	r4, #55	; 0x37
 800d798:	e7e3      	b.n	800d762 <_strtoul_l.constprop.0+0x5e>
 800d79a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d79e:	f1bc 0f19 	cmp.w	ip, #25
 800d7a2:	d804      	bhi.n	800d7ae <_strtoul_l.constprop.0+0xaa>
 800d7a4:	3c57      	subs	r4, #87	; 0x57
 800d7a6:	e7dc      	b.n	800d762 <_strtoul_l.constprop.0+0x5e>
 800d7a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d7ac:	e7e6      	b.n	800d77c <_strtoul_l.constprop.0+0x78>
 800d7ae:	1c7b      	adds	r3, r7, #1
 800d7b0:	d106      	bne.n	800d7c0 <_strtoul_l.constprop.0+0xbc>
 800d7b2:	2322      	movs	r3, #34	; 0x22
 800d7b4:	f8ce 3000 	str.w	r3, [lr]
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	b932      	cbnz	r2, 800d7ca <_strtoul_l.constprop.0+0xc6>
 800d7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c0:	b106      	cbz	r6, 800d7c4 <_strtoul_l.constprop.0+0xc0>
 800d7c2:	4240      	negs	r0, r0
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	d0f9      	beq.n	800d7bc <_strtoul_l.constprop.0+0xb8>
 800d7c8:	b107      	cbz	r7, 800d7cc <_strtoul_l.constprop.0+0xc8>
 800d7ca:	1e69      	subs	r1, r5, #1
 800d7cc:	6011      	str	r1, [r2, #0]
 800d7ce:	e7f5      	b.n	800d7bc <_strtoul_l.constprop.0+0xb8>
 800d7d0:	2430      	movs	r4, #48	; 0x30
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1b5      	bne.n	800d742 <_strtoul_l.constprop.0+0x3e>
 800d7d6:	2308      	movs	r3, #8
 800d7d8:	e7b3      	b.n	800d742 <_strtoul_l.constprop.0+0x3e>
 800d7da:	2c30      	cmp	r4, #48	; 0x30
 800d7dc:	d0a9      	beq.n	800d732 <_strtoul_l.constprop.0+0x2e>
 800d7de:	230a      	movs	r3, #10
 800d7e0:	e7af      	b.n	800d742 <_strtoul_l.constprop.0+0x3e>
 800d7e2:	bf00      	nop
 800d7e4:	080117fb 	.word	0x080117fb

0800d7e8 <_strtoul_r>:
 800d7e8:	f7ff bf8c 	b.w	800d704 <_strtoul_l.constprop.0>

0800d7ec <strtoul>:
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	460a      	mov	r2, r1
 800d7f0:	4601      	mov	r1, r0
 800d7f2:	4802      	ldr	r0, [pc, #8]	; (800d7fc <strtoul+0x10>)
 800d7f4:	6800      	ldr	r0, [r0, #0]
 800d7f6:	f7ff bf85 	b.w	800d704 <_strtoul_l.constprop.0>
 800d7fa:	bf00      	nop
 800d7fc:	20000088 	.word	0x20000088

0800d800 <_fwalk_sglue>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	4607      	mov	r7, r0
 800d806:	4688      	mov	r8, r1
 800d808:	4614      	mov	r4, r2
 800d80a:	2600      	movs	r6, #0
 800d80c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d810:	f1b9 0901 	subs.w	r9, r9, #1
 800d814:	d505      	bpl.n	800d822 <_fwalk_sglue+0x22>
 800d816:	6824      	ldr	r4, [r4, #0]
 800d818:	2c00      	cmp	r4, #0
 800d81a:	d1f7      	bne.n	800d80c <_fwalk_sglue+0xc>
 800d81c:	4630      	mov	r0, r6
 800d81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d907      	bls.n	800d838 <_fwalk_sglue+0x38>
 800d828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d82c:	3301      	adds	r3, #1
 800d82e:	d003      	beq.n	800d838 <_fwalk_sglue+0x38>
 800d830:	4629      	mov	r1, r5
 800d832:	4638      	mov	r0, r7
 800d834:	47c0      	blx	r8
 800d836:	4306      	orrs	r6, r0
 800d838:	3568      	adds	r5, #104	; 0x68
 800d83a:	e7e9      	b.n	800d810 <_fwalk_sglue+0x10>

0800d83c <iprintf>:
 800d83c:	b40f      	push	{r0, r1, r2, r3}
 800d83e:	b507      	push	{r0, r1, r2, lr}
 800d840:	4906      	ldr	r1, [pc, #24]	; (800d85c <iprintf+0x20>)
 800d842:	ab04      	add	r3, sp, #16
 800d844:	6808      	ldr	r0, [r1, #0]
 800d846:	f853 2b04 	ldr.w	r2, [r3], #4
 800d84a:	6881      	ldr	r1, [r0, #8]
 800d84c:	9301      	str	r3, [sp, #4]
 800d84e:	f001 ff77 	bl	800f740 <_vfiprintf_r>
 800d852:	b003      	add	sp, #12
 800d854:	f85d eb04 	ldr.w	lr, [sp], #4
 800d858:	b004      	add	sp, #16
 800d85a:	4770      	bx	lr
 800d85c:	20000088 	.word	0x20000088

0800d860 <_puts_r>:
 800d860:	6a03      	ldr	r3, [r0, #32]
 800d862:	b570      	push	{r4, r5, r6, lr}
 800d864:	6884      	ldr	r4, [r0, #8]
 800d866:	4605      	mov	r5, r0
 800d868:	460e      	mov	r6, r1
 800d86a:	b90b      	cbnz	r3, 800d870 <_puts_r+0x10>
 800d86c:	f7ff ff32 	bl	800d6d4 <__sinit>
 800d870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d872:	07db      	lsls	r3, r3, #31
 800d874:	d405      	bmi.n	800d882 <_puts_r+0x22>
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	0598      	lsls	r0, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_puts_r+0x22>
 800d87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87e:	f000 fee7 	bl	800e650 <__retarget_lock_acquire_recursive>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	0719      	lsls	r1, r3, #28
 800d886:	d513      	bpl.n	800d8b0 <_puts_r+0x50>
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	b18b      	cbz	r3, 800d8b0 <_puts_r+0x50>
 800d88c:	3e01      	subs	r6, #1
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d894:	3b01      	subs	r3, #1
 800d896:	60a3      	str	r3, [r4, #8]
 800d898:	b9e9      	cbnz	r1, 800d8d6 <_puts_r+0x76>
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	da2e      	bge.n	800d8fc <_puts_r+0x9c>
 800d89e:	4622      	mov	r2, r4
 800d8a0:	210a      	movs	r1, #10
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f002 fdf3 	bl	801048e <__swbuf_r>
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d007      	beq.n	800d8bc <_puts_r+0x5c>
 800d8ac:	250a      	movs	r5, #10
 800d8ae:	e007      	b.n	800d8c0 <_puts_r+0x60>
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	f002 fe28 	bl	8010508 <__swsetup_r>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d0e7      	beq.n	800d88c <_puts_r+0x2c>
 800d8bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d8c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c2:	07da      	lsls	r2, r3, #31
 800d8c4:	d405      	bmi.n	800d8d2 <_puts_r+0x72>
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	059b      	lsls	r3, r3, #22
 800d8ca:	d402      	bmi.n	800d8d2 <_puts_r+0x72>
 800d8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ce:	f000 fec1 	bl	800e654 <__retarget_lock_release_recursive>
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	bd70      	pop	{r4, r5, r6, pc}
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	da04      	bge.n	800d8e4 <_puts_r+0x84>
 800d8da:	69a2      	ldr	r2, [r4, #24]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	dc06      	bgt.n	800d8ee <_puts_r+0x8e>
 800d8e0:	290a      	cmp	r1, #10
 800d8e2:	d004      	beq.n	800d8ee <_puts_r+0x8e>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	6022      	str	r2, [r4, #0]
 800d8ea:	7019      	strb	r1, [r3, #0]
 800d8ec:	e7cf      	b.n	800d88e <_puts_r+0x2e>
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f002 fdcc 	bl	801048e <__swbuf_r>
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	d1c9      	bne.n	800d88e <_puts_r+0x2e>
 800d8fa:	e7df      	b.n	800d8bc <_puts_r+0x5c>
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	250a      	movs	r5, #10
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	6022      	str	r2, [r4, #0]
 800d904:	701d      	strb	r5, [r3, #0]
 800d906:	e7db      	b.n	800d8c0 <_puts_r+0x60>

0800d908 <puts>:
 800d908:	4b02      	ldr	r3, [pc, #8]	; (800d914 <puts+0xc>)
 800d90a:	4601      	mov	r1, r0
 800d90c:	6818      	ldr	r0, [r3, #0]
 800d90e:	f7ff bfa7 	b.w	800d860 <_puts_r>
 800d912:	bf00      	nop
 800d914:	20000088 	.word	0x20000088

0800d918 <memset>:
 800d918:	4402      	add	r2, r0
 800d91a:	4603      	mov	r3, r0
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d100      	bne.n	800d922 <memset+0xa>
 800d920:	4770      	bx	lr
 800d922:	f803 1b01 	strb.w	r1, [r3], #1
 800d926:	e7f9      	b.n	800d91c <memset+0x4>

0800d928 <localtime>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <localtime+0x30>)
 800d92c:	681d      	ldr	r5, [r3, #0]
 800d92e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d930:	4604      	mov	r4, r0
 800d932:	b953      	cbnz	r3, 800d94a <localtime+0x22>
 800d934:	2024      	movs	r0, #36	; 0x24
 800d936:	f002 f81d 	bl	800f974 <malloc>
 800d93a:	4602      	mov	r2, r0
 800d93c:	6368      	str	r0, [r5, #52]	; 0x34
 800d93e:	b920      	cbnz	r0, 800d94a <localtime+0x22>
 800d940:	4b06      	ldr	r3, [pc, #24]	; (800d95c <localtime+0x34>)
 800d942:	4807      	ldr	r0, [pc, #28]	; (800d960 <localtime+0x38>)
 800d944:	2132      	movs	r1, #50	; 0x32
 800d946:	f000 fe9d 	bl	800e684 <__assert_func>
 800d94a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800d94c:	4620      	mov	r0, r4
 800d94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d952:	f000 b807 	b.w	800d964 <localtime_r>
 800d956:	bf00      	nop
 800d958:	20000088 	.word	0x20000088
 800d95c:	0801167a 	.word	0x0801167a
 800d960:	08011691 	.word	0x08011691

0800d964 <localtime_r>:
 800d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d968:	460c      	mov	r4, r1
 800d96a:	4680      	mov	r8, r0
 800d96c:	f000 fe40 	bl	800e5f0 <__gettzinfo>
 800d970:	4621      	mov	r1, r4
 800d972:	4605      	mov	r5, r0
 800d974:	4640      	mov	r0, r8
 800d976:	f002 fead 	bl	80106d4 <gmtime_r>
 800d97a:	6943      	ldr	r3, [r0, #20]
 800d97c:	0799      	lsls	r1, r3, #30
 800d97e:	4604      	mov	r4, r0
 800d980:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800d984:	d105      	bne.n	800d992 <localtime_r+0x2e>
 800d986:	2264      	movs	r2, #100	; 0x64
 800d988:	fb97 f3f2 	sdiv	r3, r7, r2
 800d98c:	fb02 7313 	mls	r3, r2, r3, r7
 800d990:	bb7b      	cbnz	r3, 800d9f2 <localtime_r+0x8e>
 800d992:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d996:	fb97 f3f2 	sdiv	r3, r7, r2
 800d99a:	fb02 7313 	mls	r3, r2, r3, r7
 800d99e:	fab3 f383 	clz	r3, r3
 800d9a2:	095b      	lsrs	r3, r3, #5
 800d9a4:	4e67      	ldr	r6, [pc, #412]	; (800db44 <localtime_r+0x1e0>)
 800d9a6:	2230      	movs	r2, #48	; 0x30
 800d9a8:	fb02 6603 	mla	r6, r2, r3, r6
 800d9ac:	f000 fbe8 	bl	800e180 <__tz_lock>
 800d9b0:	f000 fbf2 	bl	800e198 <_tzset_unlocked>
 800d9b4:	4b64      	ldr	r3, [pc, #400]	; (800db48 <localtime_r+0x1e4>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	b353      	cbz	r3, 800da10 <localtime_r+0xac>
 800d9ba:	686b      	ldr	r3, [r5, #4]
 800d9bc:	42bb      	cmp	r3, r7
 800d9be:	d11a      	bne.n	800d9f6 <localtime_r+0x92>
 800d9c0:	682f      	ldr	r7, [r5, #0]
 800d9c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d9c6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800d9ca:	b9e7      	cbnz	r7, 800da06 <localtime_r+0xa2>
 800d9cc:	4282      	cmp	r2, r0
 800d9ce:	eb73 0101 	sbcs.w	r1, r3, r1
 800d9d2:	da25      	bge.n	800da20 <localtime_r+0xbc>
 800d9d4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800d9d8:	4282      	cmp	r2, r0
 800d9da:	eb73 0701 	sbcs.w	r7, r3, r1
 800d9de:	bfb4      	ite	lt
 800d9e0:	2701      	movlt	r7, #1
 800d9e2:	2700      	movge	r7, #0
 800d9e4:	4282      	cmp	r2, r0
 800d9e6:	eb73 0101 	sbcs.w	r1, r3, r1
 800d9ea:	6227      	str	r7, [r4, #32]
 800d9ec:	db1a      	blt.n	800da24 <localtime_r+0xc0>
 800d9ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d9f0:	e019      	b.n	800da26 <localtime_r+0xc2>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e7d6      	b.n	800d9a4 <localtime_r+0x40>
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	f000 fb1a 	bl	800e030 <__tzcalc_limits>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d1df      	bne.n	800d9c0 <localtime_r+0x5c>
 800da00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da04:	e004      	b.n	800da10 <localtime_r+0xac>
 800da06:	4282      	cmp	r2, r0
 800da08:	eb73 0101 	sbcs.w	r1, r3, r1
 800da0c:	da02      	bge.n	800da14 <localtime_r+0xb0>
 800da0e:	2300      	movs	r3, #0
 800da10:	6223      	str	r3, [r4, #32]
 800da12:	e7ec      	b.n	800d9ee <localtime_r+0x8a>
 800da14:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800da18:	4282      	cmp	r2, r0
 800da1a:	eb73 0101 	sbcs.w	r1, r3, r1
 800da1e:	daf6      	bge.n	800da0e <localtime_r+0xaa>
 800da20:	2301      	movs	r3, #1
 800da22:	6223      	str	r3, [r4, #32]
 800da24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800da26:	6861      	ldr	r1, [r4, #4]
 800da28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800da2c:	fb93 f0f2 	sdiv	r0, r3, r2
 800da30:	fb02 3310 	mls	r3, r2, r0, r3
 800da34:	223c      	movs	r2, #60	; 0x3c
 800da36:	fb93 f5f2 	sdiv	r5, r3, r2
 800da3a:	fb02 3215 	mls	r2, r2, r5, r3
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	68a2      	ldr	r2, [r4, #8]
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	1b49      	subs	r1, r1, r5
 800da48:	1a12      	subs	r2, r2, r0
 800da4a:	2b3b      	cmp	r3, #59	; 0x3b
 800da4c:	6061      	str	r1, [r4, #4]
 800da4e:	60a2      	str	r2, [r4, #8]
 800da50:	dd34      	ble.n	800dabc <localtime_r+0x158>
 800da52:	3101      	adds	r1, #1
 800da54:	6061      	str	r1, [r4, #4]
 800da56:	3b3c      	subs	r3, #60	; 0x3c
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	6863      	ldr	r3, [r4, #4]
 800da5c:	2b3b      	cmp	r3, #59	; 0x3b
 800da5e:	dd33      	ble.n	800dac8 <localtime_r+0x164>
 800da60:	3201      	adds	r2, #1
 800da62:	60a2      	str	r2, [r4, #8]
 800da64:	3b3c      	subs	r3, #60	; 0x3c
 800da66:	6063      	str	r3, [r4, #4]
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	2b17      	cmp	r3, #23
 800da6c:	dd32      	ble.n	800dad4 <localtime_r+0x170>
 800da6e:	69e2      	ldr	r2, [r4, #28]
 800da70:	3201      	adds	r2, #1
 800da72:	61e2      	str	r2, [r4, #28]
 800da74:	69a2      	ldr	r2, [r4, #24]
 800da76:	3201      	adds	r2, #1
 800da78:	2a07      	cmp	r2, #7
 800da7a:	bfa8      	it	ge
 800da7c:	2200      	movge	r2, #0
 800da7e:	61a2      	str	r2, [r4, #24]
 800da80:	68e2      	ldr	r2, [r4, #12]
 800da82:	3b18      	subs	r3, #24
 800da84:	3201      	adds	r2, #1
 800da86:	60a3      	str	r3, [r4, #8]
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	60e2      	str	r2, [r4, #12]
 800da8c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800da90:	428a      	cmp	r2, r1
 800da92:	dd0e      	ble.n	800dab2 <localtime_r+0x14e>
 800da94:	2b0b      	cmp	r3, #11
 800da96:	eba2 0201 	sub.w	r2, r2, r1
 800da9a:	60e2      	str	r2, [r4, #12]
 800da9c:	f103 0201 	add.w	r2, r3, #1
 800daa0:	bf09      	itett	eq
 800daa2:	6963      	ldreq	r3, [r4, #20]
 800daa4:	6122      	strne	r2, [r4, #16]
 800daa6:	2200      	moveq	r2, #0
 800daa8:	3301      	addeq	r3, #1
 800daaa:	bf02      	ittt	eq
 800daac:	6122      	streq	r2, [r4, #16]
 800daae:	6163      	streq	r3, [r4, #20]
 800dab0:	61e2      	streq	r2, [r4, #28]
 800dab2:	f000 fb6b 	bl	800e18c <__tz_unlock>
 800dab6:	4620      	mov	r0, r4
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	dacc      	bge.n	800da5a <localtime_r+0xf6>
 800dac0:	3901      	subs	r1, #1
 800dac2:	6061      	str	r1, [r4, #4]
 800dac4:	333c      	adds	r3, #60	; 0x3c
 800dac6:	e7c7      	b.n	800da58 <localtime_r+0xf4>
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dacd      	bge.n	800da68 <localtime_r+0x104>
 800dacc:	3a01      	subs	r2, #1
 800dace:	60a2      	str	r2, [r4, #8]
 800dad0:	333c      	adds	r3, #60	; 0x3c
 800dad2:	e7c8      	b.n	800da66 <localtime_r+0x102>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	daec      	bge.n	800dab2 <localtime_r+0x14e>
 800dad8:	69e2      	ldr	r2, [r4, #28]
 800dada:	3a01      	subs	r2, #1
 800dadc:	61e2      	str	r2, [r4, #28]
 800dade:	69a2      	ldr	r2, [r4, #24]
 800dae0:	3a01      	subs	r2, #1
 800dae2:	bf48      	it	mi
 800dae4:	2206      	movmi	r2, #6
 800dae6:	61a2      	str	r2, [r4, #24]
 800dae8:	68e2      	ldr	r2, [r4, #12]
 800daea:	3318      	adds	r3, #24
 800daec:	3a01      	subs	r2, #1
 800daee:	60e2      	str	r2, [r4, #12]
 800daf0:	60a3      	str	r3, [r4, #8]
 800daf2:	2a00      	cmp	r2, #0
 800daf4:	d1dd      	bne.n	800dab2 <localtime_r+0x14e>
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	d405      	bmi.n	800db08 <localtime_r+0x1a4>
 800dafc:	6123      	str	r3, [r4, #16]
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800db04:	60e3      	str	r3, [r4, #12]
 800db06:	e7d4      	b.n	800dab2 <localtime_r+0x14e>
 800db08:	230b      	movs	r3, #11
 800db0a:	6123      	str	r3, [r4, #16]
 800db0c:	6963      	ldr	r3, [r4, #20]
 800db0e:	1e5a      	subs	r2, r3, #1
 800db10:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800db14:	6162      	str	r2, [r4, #20]
 800db16:	079a      	lsls	r2, r3, #30
 800db18:	d105      	bne.n	800db26 <localtime_r+0x1c2>
 800db1a:	2164      	movs	r1, #100	; 0x64
 800db1c:	fb93 f2f1 	sdiv	r2, r3, r1
 800db20:	fb01 3212 	mls	r2, r1, r2, r3
 800db24:	b962      	cbnz	r2, 800db40 <localtime_r+0x1dc>
 800db26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800db2a:	fb93 f1f2 	sdiv	r1, r3, r2
 800db2e:	fb02 3311 	mls	r3, r2, r1, r3
 800db32:	fab3 f383 	clz	r3, r3
 800db36:	095b      	lsrs	r3, r3, #5
 800db38:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800db3c:	61e3      	str	r3, [r4, #28]
 800db3e:	e7de      	b.n	800dafe <localtime_r+0x19a>
 800db40:	2301      	movs	r3, #1
 800db42:	e7f9      	b.n	800db38 <localtime_r+0x1d4>
 800db44:	0801174c 	.word	0x0801174c
 800db48:	20000614 	.word	0x20000614

0800db4c <validate_structure>:
 800db4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db4e:	6801      	ldr	r1, [r0, #0]
 800db50:	293b      	cmp	r1, #59	; 0x3b
 800db52:	4604      	mov	r4, r0
 800db54:	d911      	bls.n	800db7a <validate_structure+0x2e>
 800db56:	223c      	movs	r2, #60	; 0x3c
 800db58:	4668      	mov	r0, sp
 800db5a:	f000 fdb1 	bl	800e6c0 <div>
 800db5e:	9a01      	ldr	r2, [sp, #4]
 800db60:	6863      	ldr	r3, [r4, #4]
 800db62:	9900      	ldr	r1, [sp, #0]
 800db64:	2a00      	cmp	r2, #0
 800db66:	440b      	add	r3, r1
 800db68:	6063      	str	r3, [r4, #4]
 800db6a:	bfbb      	ittet	lt
 800db6c:	323c      	addlt	r2, #60	; 0x3c
 800db6e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800db72:	6022      	strge	r2, [r4, #0]
 800db74:	6022      	strlt	r2, [r4, #0]
 800db76:	bfb8      	it	lt
 800db78:	6063      	strlt	r3, [r4, #4]
 800db7a:	6861      	ldr	r1, [r4, #4]
 800db7c:	293b      	cmp	r1, #59	; 0x3b
 800db7e:	d911      	bls.n	800dba4 <validate_structure+0x58>
 800db80:	223c      	movs	r2, #60	; 0x3c
 800db82:	4668      	mov	r0, sp
 800db84:	f000 fd9c 	bl	800e6c0 <div>
 800db88:	9a01      	ldr	r2, [sp, #4]
 800db8a:	68a3      	ldr	r3, [r4, #8]
 800db8c:	9900      	ldr	r1, [sp, #0]
 800db8e:	2a00      	cmp	r2, #0
 800db90:	440b      	add	r3, r1
 800db92:	60a3      	str	r3, [r4, #8]
 800db94:	bfbb      	ittet	lt
 800db96:	323c      	addlt	r2, #60	; 0x3c
 800db98:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800db9c:	6062      	strge	r2, [r4, #4]
 800db9e:	6062      	strlt	r2, [r4, #4]
 800dba0:	bfb8      	it	lt
 800dba2:	60a3      	strlt	r3, [r4, #8]
 800dba4:	68a1      	ldr	r1, [r4, #8]
 800dba6:	2917      	cmp	r1, #23
 800dba8:	d911      	bls.n	800dbce <validate_structure+0x82>
 800dbaa:	2218      	movs	r2, #24
 800dbac:	4668      	mov	r0, sp
 800dbae:	f000 fd87 	bl	800e6c0 <div>
 800dbb2:	9a01      	ldr	r2, [sp, #4]
 800dbb4:	68e3      	ldr	r3, [r4, #12]
 800dbb6:	9900      	ldr	r1, [sp, #0]
 800dbb8:	2a00      	cmp	r2, #0
 800dbba:	440b      	add	r3, r1
 800dbbc:	60e3      	str	r3, [r4, #12]
 800dbbe:	bfbb      	ittet	lt
 800dbc0:	3218      	addlt	r2, #24
 800dbc2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800dbc6:	60a2      	strge	r2, [r4, #8]
 800dbc8:	60a2      	strlt	r2, [r4, #8]
 800dbca:	bfb8      	it	lt
 800dbcc:	60e3      	strlt	r3, [r4, #12]
 800dbce:	6921      	ldr	r1, [r4, #16]
 800dbd0:	290b      	cmp	r1, #11
 800dbd2:	d911      	bls.n	800dbf8 <validate_structure+0xac>
 800dbd4:	220c      	movs	r2, #12
 800dbd6:	4668      	mov	r0, sp
 800dbd8:	f000 fd72 	bl	800e6c0 <div>
 800dbdc:	9a01      	ldr	r2, [sp, #4]
 800dbde:	6963      	ldr	r3, [r4, #20]
 800dbe0:	9900      	ldr	r1, [sp, #0]
 800dbe2:	2a00      	cmp	r2, #0
 800dbe4:	440b      	add	r3, r1
 800dbe6:	6163      	str	r3, [r4, #20]
 800dbe8:	bfbb      	ittet	lt
 800dbea:	320c      	addlt	r2, #12
 800dbec:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800dbf0:	6122      	strge	r2, [r4, #16]
 800dbf2:	6122      	strlt	r2, [r4, #16]
 800dbf4:	bfb8      	it	lt
 800dbf6:	6163      	strlt	r3, [r4, #20]
 800dbf8:	6963      	ldr	r3, [r4, #20]
 800dbfa:	079a      	lsls	r2, r3, #30
 800dbfc:	d11e      	bne.n	800dc3c <validate_structure+0xf0>
 800dbfe:	2164      	movs	r1, #100	; 0x64
 800dc00:	fb93 f2f1 	sdiv	r2, r3, r1
 800dc04:	fb01 3212 	mls	r2, r1, r2, r3
 800dc08:	b9d2      	cbnz	r2, 800dc40 <validate_structure+0xf4>
 800dc0a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800dc0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800dc12:	fb93 f1f2 	sdiv	r1, r3, r2
 800dc16:	fb02 3311 	mls	r3, r2, r1, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	bf14      	ite	ne
 800dc1e:	231c      	movne	r3, #28
 800dc20:	231d      	moveq	r3, #29
 800dc22:	68e2      	ldr	r2, [r4, #12]
 800dc24:	2a00      	cmp	r2, #0
 800dc26:	dc0d      	bgt.n	800dc44 <validate_structure+0xf8>
 800dc28:	4e32      	ldr	r6, [pc, #200]	; (800dcf4 <validate_structure+0x1a8>)
 800dc2a:	250b      	movs	r5, #11
 800dc2c:	2164      	movs	r1, #100	; 0x64
 800dc2e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dc32:	68e7      	ldr	r7, [r4, #12]
 800dc34:	2f00      	cmp	r7, #0
 800dc36:	dd31      	ble.n	800dc9c <validate_structure+0x150>
 800dc38:	b003      	add	sp, #12
 800dc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc3c:	231c      	movs	r3, #28
 800dc3e:	e7f0      	b.n	800dc22 <validate_structure+0xd6>
 800dc40:	231d      	movs	r3, #29
 800dc42:	e7ee      	b.n	800dc22 <validate_structure+0xd6>
 800dc44:	4e2b      	ldr	r6, [pc, #172]	; (800dcf4 <validate_structure+0x1a8>)
 800dc46:	2700      	movs	r7, #0
 800dc48:	2064      	movs	r0, #100	; 0x64
 800dc4a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800dc4e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800dc52:	2a01      	cmp	r2, #1
 800dc54:	bf14      	ite	ne
 800dc56:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800dc5a:	469c      	moveq	ip, r3
 800dc5c:	4561      	cmp	r1, ip
 800dc5e:	ddeb      	ble.n	800dc38 <validate_structure+0xec>
 800dc60:	3201      	adds	r2, #1
 800dc62:	eba1 010c 	sub.w	r1, r1, ip
 800dc66:	2a0c      	cmp	r2, #12
 800dc68:	60e1      	str	r1, [r4, #12]
 800dc6a:	6122      	str	r2, [r4, #16]
 800dc6c:	d1ef      	bne.n	800dc4e <validate_structure+0x102>
 800dc6e:	6963      	ldr	r3, [r4, #20]
 800dc70:	1c5a      	adds	r2, r3, #1
 800dc72:	0791      	lsls	r1, r2, #30
 800dc74:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800dc78:	d138      	bne.n	800dcec <validate_structure+0x1a0>
 800dc7a:	fb92 f1f0 	sdiv	r1, r2, r0
 800dc7e:	fb00 2211 	mls	r2, r0, r1, r2
 800dc82:	2a00      	cmp	r2, #0
 800dc84:	d134      	bne.n	800dcf0 <validate_structure+0x1a4>
 800dc86:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800dc8a:	fb93 f2f5 	sdiv	r2, r3, r5
 800dc8e:	fb05 3312 	mls	r3, r5, r2, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	bf14      	ite	ne
 800dc96:	231c      	movne	r3, #28
 800dc98:	231d      	moveq	r3, #29
 800dc9a:	e7d8      	b.n	800dc4e <validate_structure+0x102>
 800dc9c:	6922      	ldr	r2, [r4, #16]
 800dc9e:	3a01      	subs	r2, #1
 800dca0:	6122      	str	r2, [r4, #16]
 800dca2:	3201      	adds	r2, #1
 800dca4:	d115      	bne.n	800dcd2 <validate_structure+0x186>
 800dca6:	6963      	ldr	r3, [r4, #20]
 800dca8:	1e5a      	subs	r2, r3, #1
 800dcaa:	f012 0f03 	tst.w	r2, #3
 800dcae:	e9c4 5204 	strd	r5, r2, [r4, #16]
 800dcb2:	d117      	bne.n	800dce4 <validate_structure+0x198>
 800dcb4:	fb92 fcf1 	sdiv	ip, r2, r1
 800dcb8:	fb01 221c 	mls	r2, r1, ip, r2
 800dcbc:	b9a2      	cbnz	r2, 800dce8 <validate_structure+0x19c>
 800dcbe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800dcc2:	fb93 f2f0 	sdiv	r2, r3, r0
 800dcc6:	fb00 3312 	mls	r3, r0, r2, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	bf14      	ite	ne
 800dcce:	231c      	movne	r3, #28
 800dcd0:	231d      	moveq	r3, #29
 800dcd2:	6922      	ldr	r2, [r4, #16]
 800dcd4:	2a01      	cmp	r2, #1
 800dcd6:	bf14      	ite	ne
 800dcd8:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800dcdc:	461a      	moveq	r2, r3
 800dcde:	443a      	add	r2, r7
 800dce0:	60e2      	str	r2, [r4, #12]
 800dce2:	e7a6      	b.n	800dc32 <validate_structure+0xe6>
 800dce4:	231c      	movs	r3, #28
 800dce6:	e7f4      	b.n	800dcd2 <validate_structure+0x186>
 800dce8:	231d      	movs	r3, #29
 800dcea:	e7f2      	b.n	800dcd2 <validate_structure+0x186>
 800dcec:	231c      	movs	r3, #28
 800dcee:	e7ae      	b.n	800dc4e <validate_structure+0x102>
 800dcf0:	231d      	movs	r3, #29
 800dcf2:	e7ac      	b.n	800dc4e <validate_structure+0x102>
 800dcf4:	080116ec 	.word	0x080116ec

0800dcf8 <mktime>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	b085      	sub	sp, #20
 800dcfe:	4607      	mov	r7, r0
 800dd00:	f000 fc76 	bl	800e5f0 <__gettzinfo>
 800dd04:	4681      	mov	r9, r0
 800dd06:	4638      	mov	r0, r7
 800dd08:	f7ff ff20 	bl	800db4c <validate_structure>
 800dd0c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800dd10:	223c      	movs	r2, #60	; 0x3c
 800dd12:	fb02 4403 	mla	r4, r2, r3, r4
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	697e      	ldr	r6, [r7, #20]
 800dd1a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dd1e:	fb02 4403 	mla	r4, r2, r3, r4
 800dd22:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800dd26:	4abb      	ldr	r2, [pc, #748]	; (800e014 <mktime+0x31c>)
 800dd28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dd2c:	3d01      	subs	r5, #1
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	4415      	add	r5, r2
 800dd32:	dd11      	ble.n	800dd58 <mktime+0x60>
 800dd34:	07b1      	lsls	r1, r6, #30
 800dd36:	d10f      	bne.n	800dd58 <mktime+0x60>
 800dd38:	2264      	movs	r2, #100	; 0x64
 800dd3a:	fb96 f3f2 	sdiv	r3, r6, r2
 800dd3e:	fb02 6313 	mls	r3, r2, r3, r6
 800dd42:	b943      	cbnz	r3, 800dd56 <mktime+0x5e>
 800dd44:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800dd48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800dd4c:	fb93 f1f2 	sdiv	r1, r3, r2
 800dd50:	fb02 3311 	mls	r3, r2, r1, r3
 800dd54:	b903      	cbnz	r3, 800dd58 <mktime+0x60>
 800dd56:	3501      	adds	r5, #1
 800dd58:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800dd5c:	3310      	adds	r3, #16
 800dd5e:	f644 6220 	movw	r2, #20000	; 0x4e20
 800dd62:	4293      	cmp	r3, r2
 800dd64:	61fd      	str	r5, [r7, #28]
 800dd66:	f200 815e 	bhi.w	800e026 <mktime+0x32e>
 800dd6a:	2e46      	cmp	r6, #70	; 0x46
 800dd6c:	dd72      	ble.n	800de54 <mktime+0x15c>
 800dd6e:	2346      	movs	r3, #70	; 0x46
 800dd70:	f240 1c6d 	movw	ip, #365	; 0x16d
 800dd74:	2164      	movs	r1, #100	; 0x64
 800dd76:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dd7a:	079a      	lsls	r2, r3, #30
 800dd7c:	d164      	bne.n	800de48 <mktime+0x150>
 800dd7e:	fb93 f2f1 	sdiv	r2, r3, r1
 800dd82:	fb01 3212 	mls	r2, r1, r2, r3
 800dd86:	2a00      	cmp	r2, #0
 800dd88:	d161      	bne.n	800de4e <mktime+0x156>
 800dd8a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800dd8e:	fb92 fef0 	sdiv	lr, r2, r0
 800dd92:	fb00 221e 	mls	r2, r0, lr, r2
 800dd96:	2a00      	cmp	r2, #0
 800dd98:	bf14      	ite	ne
 800dd9a:	4662      	movne	r2, ip
 800dd9c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800dda0:	3301      	adds	r3, #1
 800dda2:	429e      	cmp	r6, r3
 800dda4:	4415      	add	r5, r2
 800dda6:	d1e8      	bne.n	800dd7a <mktime+0x82>
 800dda8:	4b9b      	ldr	r3, [pc, #620]	; (800e018 <mktime+0x320>)
 800ddaa:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800ddae:	fbc5 4803 	smlal	r4, r8, r5, r3
 800ddb2:	f000 f9e5 	bl	800e180 <__tz_lock>
 800ddb6:	f000 f9ef 	bl	800e198 <_tzset_unlocked>
 800ddba:	4b98      	ldr	r3, [pc, #608]	; (800e01c <mktime+0x324>)
 800ddbc:	f8d3 b000 	ldr.w	fp, [r3]
 800ddc0:	f1bb 0f00 	cmp.w	fp, #0
 800ddc4:	d03a      	beq.n	800de3c <mktime+0x144>
 800ddc6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800ddca:	6978      	ldr	r0, [r7, #20]
 800ddcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ddd0:	f1bb 0f01 	cmp.w	fp, #1
 800ddd4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ddd8:	46da      	mov	sl, fp
 800ddda:	bfa8      	it	ge
 800dddc:	f04f 0a01 	movge.w	sl, #1
 800dde0:	4283      	cmp	r3, r0
 800dde2:	d179      	bne.n	800ded8 <mktime+0x1e0>
 800dde4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800dde8:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 800ddec:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 800ddf0:	1a13      	subs	r3, r2, r0
 800ddf2:	9302      	str	r3, [sp, #8]
 800ddf4:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 800ddf8:	9303      	str	r3, [sp, #12]
 800ddfa:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	9a01      	ldr	r2, [sp, #4]
 800de02:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800de06:	ebb2 0e03 	subs.w	lr, r2, r3
 800de0a:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800de0e:	4574      	cmp	r4, lr
 800de10:	eb78 0201 	sbcs.w	r2, r8, r1
 800de14:	da66      	bge.n	800dee4 <mktime+0x1ec>
 800de16:	f8d9 2000 	ldr.w	r2, [r9]
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	d06f      	beq.n	800defe <mktime+0x206>
 800de1e:	9a02      	ldr	r2, [sp, #8]
 800de20:	4294      	cmp	r4, r2
 800de22:	9a03      	ldr	r2, [sp, #12]
 800de24:	eb78 0202 	sbcs.w	r2, r8, r2
 800de28:	db03      	blt.n	800de32 <mktime+0x13a>
 800de2a:	4574      	cmp	r4, lr
 800de2c:	eb78 0101 	sbcs.w	r1, r8, r1
 800de30:	db6b      	blt.n	800df0a <mktime+0x212>
 800de32:	f1bb 0f00 	cmp.w	fp, #0
 800de36:	f04f 0b00 	mov.w	fp, #0
 800de3a:	da6b      	bge.n	800df14 <mktime+0x21c>
 800de3c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800de40:	191c      	adds	r4, r3, r4
 800de42:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800de46:	e0a9      	b.n	800df9c <mktime+0x2a4>
 800de48:	f240 126d 	movw	r2, #365	; 0x16d
 800de4c:	e7a8      	b.n	800dda0 <mktime+0xa8>
 800de4e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800de52:	e7a5      	b.n	800dda0 <mktime+0xa8>
 800de54:	d0a8      	beq.n	800dda8 <mktime+0xb0>
 800de56:	2345      	movs	r3, #69	; 0x45
 800de58:	f240 1c6d 	movw	ip, #365	; 0x16d
 800de5c:	2164      	movs	r1, #100	; 0x64
 800de5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800de62:	e012      	b.n	800de8a <mktime+0x192>
 800de64:	bb62      	cbnz	r2, 800dec0 <mktime+0x1c8>
 800de66:	fb93 f2f1 	sdiv	r2, r3, r1
 800de6a:	fb01 3212 	mls	r2, r1, r2, r3
 800de6e:	bb52      	cbnz	r2, 800dec6 <mktime+0x1ce>
 800de70:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800de74:	fb92 fef0 	sdiv	lr, r2, r0
 800de78:	fb00 221e 	mls	r2, r0, lr, r2
 800de7c:	2a00      	cmp	r2, #0
 800de7e:	bf14      	ite	ne
 800de80:	4662      	movne	r2, ip
 800de82:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800de86:	1aad      	subs	r5, r5, r2
 800de88:	3b01      	subs	r3, #1
 800de8a:	429e      	cmp	r6, r3
 800de8c:	f003 0203 	and.w	r2, r3, #3
 800de90:	dbe8      	blt.n	800de64 <mktime+0x16c>
 800de92:	b9da      	cbnz	r2, 800decc <mktime+0x1d4>
 800de94:	2264      	movs	r2, #100	; 0x64
 800de96:	fb96 f3f2 	sdiv	r3, r6, r2
 800de9a:	fb02 6313 	mls	r3, r2, r3, r6
 800de9e:	b9c3      	cbnz	r3, 800ded2 <mktime+0x1da>
 800dea0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800dea4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800dea8:	fb93 f1f2 	sdiv	r1, r3, r2
 800deac:	fb02 3311 	mls	r3, r2, r1, r3
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f240 136d 	movw	r3, #365	; 0x16d
 800deb6:	bf08      	it	eq
 800deb8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800debc:	1aed      	subs	r5, r5, r3
 800debe:	e773      	b.n	800dda8 <mktime+0xb0>
 800dec0:	f240 126d 	movw	r2, #365	; 0x16d
 800dec4:	e7df      	b.n	800de86 <mktime+0x18e>
 800dec6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800deca:	e7dc      	b.n	800de86 <mktime+0x18e>
 800decc:	f240 136d 	movw	r3, #365	; 0x16d
 800ded0:	e7f4      	b.n	800debc <mktime+0x1c4>
 800ded2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800ded6:	e7f1      	b.n	800debc <mktime+0x1c4>
 800ded8:	f000 f8aa 	bl	800e030 <__tzcalc_limits>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d181      	bne.n	800dde4 <mktime+0xec>
 800dee0:	46d3      	mov	fp, sl
 800dee2:	e050      	b.n	800df86 <mktime+0x28e>
 800dee4:	9a01      	ldr	r2, [sp, #4]
 800dee6:	1a12      	subs	r2, r2, r0
 800dee8:	9201      	str	r2, [sp, #4]
 800deea:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800deee:	eb6c 0c02 	sbc.w	ip, ip, r2
 800def2:	9a01      	ldr	r2, [sp, #4]
 800def4:	4294      	cmp	r4, r2
 800def6:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800defa:	dbf1      	blt.n	800dee0 <mktime+0x1e8>
 800defc:	e78b      	b.n	800de16 <mktime+0x11e>
 800defe:	9a02      	ldr	r2, [sp, #8]
 800df00:	4294      	cmp	r4, r2
 800df02:	9a03      	ldr	r2, [sp, #12]
 800df04:	eb78 0202 	sbcs.w	r2, r8, r2
 800df08:	db8f      	blt.n	800de2a <mktime+0x132>
 800df0a:	f1bb 0f00 	cmp.w	fp, #0
 800df0e:	db3e      	blt.n	800df8e <mktime+0x296>
 800df10:	f04f 0b01 	mov.w	fp, #1
 800df14:	ea8a 0a0b 	eor.w	sl, sl, fp
 800df18:	f1ba 0f01 	cmp.w	sl, #1
 800df1c:	d133      	bne.n	800df86 <mktime+0x28e>
 800df1e:	f1bb 0f00 	cmp.w	fp, #0
 800df22:	d04e      	beq.n	800dfc2 <mktime+0x2ca>
 800df24:	1a1b      	subs	r3, r3, r0
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800df2c:	441a      	add	r2, r3
 800df2e:	191c      	adds	r4, r3, r4
 800df30:	603a      	str	r2, [r7, #0]
 800df32:	4638      	mov	r0, r7
 800df34:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800df38:	f7ff fe08 	bl	800db4c <validate_structure>
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	ebb2 020a 	subs.w	r2, r2, sl
 800df42:	d020      	beq.n	800df86 <mktime+0x28e>
 800df44:	2a01      	cmp	r2, #1
 800df46:	dc3e      	bgt.n	800dfc6 <mktime+0x2ce>
 800df48:	1c91      	adds	r1, r2, #2
 800df4a:	bfd8      	it	le
 800df4c:	2201      	movle	r2, #1
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	4415      	add	r5, r2
 800df52:	18d2      	adds	r2, r2, r3
 800df54:	d540      	bpl.n	800dfd8 <mktime+0x2e0>
 800df56:	1e73      	subs	r3, r6, #1
 800df58:	079a      	lsls	r2, r3, #30
 800df5a:	d137      	bne.n	800dfcc <mktime+0x2d4>
 800df5c:	2264      	movs	r2, #100	; 0x64
 800df5e:	fb93 f1f2 	sdiv	r1, r3, r2
 800df62:	fb02 3311 	mls	r3, r2, r1, r3
 800df66:	bba3      	cbnz	r3, 800dfd2 <mktime+0x2da>
 800df68:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800df6c:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800df70:	fb96 f2f3 	sdiv	r2, r6, r3
 800df74:	fb03 6612 	mls	r6, r3, r2, r6
 800df78:	2e00      	cmp	r6, #0
 800df7a:	f240 136d 	movw	r3, #365	; 0x16d
 800df7e:	bf18      	it	ne
 800df80:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800df84:	61fb      	str	r3, [r7, #28]
 800df86:	f1bb 0f01 	cmp.w	fp, #1
 800df8a:	f47f af57 	bne.w	800de3c <mktime+0x144>
 800df8e:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 800df92:	191c      	adds	r4, r3, r4
 800df94:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800df98:	f04f 0b01 	mov.w	fp, #1
 800df9c:	f000 f8f6 	bl	800e18c <__tz_unlock>
 800dfa0:	3504      	adds	r5, #4
 800dfa2:	2307      	movs	r3, #7
 800dfa4:	fb95 f3f3 	sdiv	r3, r5, r3
 800dfa8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800dfac:	1aed      	subs	r5, r5, r3
 800dfae:	bf48      	it	mi
 800dfb0:	3507      	addmi	r5, #7
 800dfb2:	f8c7 b020 	str.w	fp, [r7, #32]
 800dfb6:	61bd      	str	r5, [r7, #24]
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4641      	mov	r1, r8
 800dfbc:	b005      	add	sp, #20
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc2:	1ac3      	subs	r3, r0, r3
 800dfc4:	e7af      	b.n	800df26 <mktime+0x22e>
 800dfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfca:	e7c0      	b.n	800df4e <mktime+0x256>
 800dfcc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800dfd0:	e7d8      	b.n	800df84 <mktime+0x28c>
 800dfd2:	f240 136d 	movw	r3, #365	; 0x16d
 800dfd6:	e7d5      	b.n	800df84 <mktime+0x28c>
 800dfd8:	07b3      	lsls	r3, r6, #30
 800dfda:	d118      	bne.n	800e00e <mktime+0x316>
 800dfdc:	2164      	movs	r1, #100	; 0x64
 800dfde:	fb96 f3f1 	sdiv	r3, r6, r1
 800dfe2:	fb01 6313 	mls	r3, r1, r3, r6
 800dfe6:	b9db      	cbnz	r3, 800e020 <mktime+0x328>
 800dfe8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800dfec:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800dff0:	fb96 f1f3 	sdiv	r1, r6, r3
 800dff4:	fb03 6611 	mls	r6, r3, r1, r6
 800dff8:	2e00      	cmp	r6, #0
 800dffa:	f240 136d 	movw	r3, #365	; 0x16d
 800dffe:	bf08      	it	eq
 800e000:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800e004:	429a      	cmp	r2, r3
 800e006:	bfa8      	it	ge
 800e008:	1ad2      	subge	r2, r2, r3
 800e00a:	61fa      	str	r2, [r7, #28]
 800e00c:	e7bb      	b.n	800df86 <mktime+0x28e>
 800e00e:	f240 136d 	movw	r3, #365	; 0x16d
 800e012:	e7f7      	b.n	800e004 <mktime+0x30c>
 800e014:	0801171c 	.word	0x0801171c
 800e018:	00015180 	.word	0x00015180
 800e01c:	20000614 	.word	0x20000614
 800e020:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800e024:	e7ee      	b.n	800e004 <mktime+0x30c>
 800e026:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e02a:	46a0      	mov	r8, r4
 800e02c:	e7c4      	b.n	800dfb8 <mktime+0x2c0>
 800e02e:	bf00      	nop

0800e030 <__tzcalc_limits>:
 800e030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	4605      	mov	r5, r0
 800e036:	f000 fadb 	bl	800e5f0 <__gettzinfo>
 800e03a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800e03e:	429d      	cmp	r5, r3
 800e040:	f340 8097 	ble.w	800e172 <__tzcalc_limits+0x142>
 800e044:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800e048:	18ac      	adds	r4, r5, r2
 800e04a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800e04e:	f240 126d 	movw	r2, #365	; 0x16d
 800e052:	10a4      	asrs	r4, r4, #2
 800e054:	fb02 4403 	mla	r4, r2, r3, r4
 800e058:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800e05c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800e060:	fb93 f3f2 	sdiv	r3, r3, r2
 800e064:	441c      	add	r4, r3
 800e066:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e06a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800e06e:	fb95 fcf3 	sdiv	ip, r5, r3
 800e072:	fb03 5c1c 	mls	ip, r3, ip, r5
 800e076:	186a      	adds	r2, r5, r1
 800e078:	fabc f68c 	clz	r6, ip
 800e07c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e080:	4414      	add	r4, r2
 800e082:	2264      	movs	r2, #100	; 0x64
 800e084:	6045      	str	r5, [r0, #4]
 800e086:	fb95 f7f2 	sdiv	r7, r5, r2
 800e08a:	0976      	lsrs	r6, r6, #5
 800e08c:	fb02 5717 	mls	r7, r2, r7, r5
 800e090:	4601      	mov	r1, r0
 800e092:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800e096:	f005 0203 	and.w	r2, r5, #3
 800e09a:	7a0d      	ldrb	r5, [r1, #8]
 800e09c:	694b      	ldr	r3, [r1, #20]
 800e09e:	2d4a      	cmp	r5, #74	; 0x4a
 800e0a0:	d12b      	bne.n	800e0fa <__tzcalc_limits+0xca>
 800e0a2:	18e5      	adds	r5, r4, r3
 800e0a4:	b902      	cbnz	r2, 800e0a8 <__tzcalc_limits+0x78>
 800e0a6:	b917      	cbnz	r7, 800e0ae <__tzcalc_limits+0x7e>
 800e0a8:	f1bc 0f00 	cmp.w	ip, #0
 800e0ac:	d123      	bne.n	800e0f6 <__tzcalc_limits+0xc6>
 800e0ae:	2b3b      	cmp	r3, #59	; 0x3b
 800e0b0:	bfd4      	ite	le
 800e0b2:	2300      	movle	r3, #0
 800e0b4:	2301      	movgt	r3, #1
 800e0b6:	442b      	add	r3, r5
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	698d      	ldr	r5, [r1, #24]
 800e0bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800e178 <__tzcalc_limits+0x148>
 800e0c0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800e0c4:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800e0c8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e0ca:	18ed      	adds	r5, r5, r3
 800e0cc:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800e0d0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800e0d4:	3128      	adds	r1, #40	; 0x28
 800e0d6:	458b      	cmp	fp, r1
 800e0d8:	d1df      	bne.n	800e09a <__tzcalc_limits+0x6a>
 800e0da:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800e0de:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 800e0e2:	428c      	cmp	r4, r1
 800e0e4:	4193      	sbcs	r3, r2
 800e0e6:	bfb4      	ite	lt
 800e0e8:	2301      	movlt	r3, #1
 800e0ea:	2300      	movge	r3, #0
 800e0ec:	6003      	str	r3, [r0, #0]
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	b003      	add	sp, #12
 800e0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e7dd      	b.n	800e0b6 <__tzcalc_limits+0x86>
 800e0fa:	2d44      	cmp	r5, #68	; 0x44
 800e0fc:	d101      	bne.n	800e102 <__tzcalc_limits+0xd2>
 800e0fe:	4423      	add	r3, r4
 800e100:	e7db      	b.n	800e0ba <__tzcalc_limits+0x8a>
 800e102:	bb82      	cbnz	r2, 800e166 <__tzcalc_limits+0x136>
 800e104:	2f00      	cmp	r7, #0
 800e106:	bf0c      	ite	eq
 800e108:	4635      	moveq	r5, r6
 800e10a:	2501      	movne	r5, #1
 800e10c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800e17c <__tzcalc_limits+0x14c>
 800e110:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800e114:	f8cd e004 	str.w	lr, [sp, #4]
 800e118:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800e11c:	fb0a 9505 	mla	r5, sl, r5, r9
 800e120:	46a6      	mov	lr, r4
 800e122:	f04f 0800 	mov.w	r8, #0
 800e126:	3d04      	subs	r5, #4
 800e128:	f8dd a004 	ldr.w	sl, [sp, #4]
 800e12c:	f108 0801 	add.w	r8, r8, #1
 800e130:	45c2      	cmp	sl, r8
 800e132:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800e136:	dc18      	bgt.n	800e16a <__tzcalc_limits+0x13a>
 800e138:	f10e 0504 	add.w	r5, lr, #4
 800e13c:	f04f 0807 	mov.w	r8, #7
 800e140:	fb95 f8f8 	sdiv	r8, r5, r8
 800e144:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800e148:	eba5 0508 	sub.w	r5, r5, r8
 800e14c:	1b5d      	subs	r5, r3, r5
 800e14e:	690b      	ldr	r3, [r1, #16]
 800e150:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e154:	bf48      	it	mi
 800e156:	3507      	addmi	r5, #7
 800e158:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e15c:	442b      	add	r3, r5
 800e15e:	454b      	cmp	r3, r9
 800e160:	da05      	bge.n	800e16e <__tzcalc_limits+0x13e>
 800e162:	4473      	add	r3, lr
 800e164:	e7a9      	b.n	800e0ba <__tzcalc_limits+0x8a>
 800e166:	4635      	mov	r5, r6
 800e168:	e7d0      	b.n	800e10c <__tzcalc_limits+0xdc>
 800e16a:	44ce      	add	lr, r9
 800e16c:	e7dc      	b.n	800e128 <__tzcalc_limits+0xf8>
 800e16e:	3b07      	subs	r3, #7
 800e170:	e7f5      	b.n	800e15e <__tzcalc_limits+0x12e>
 800e172:	2000      	movs	r0, #0
 800e174:	e7bc      	b.n	800e0f0 <__tzcalc_limits+0xc0>
 800e176:	bf00      	nop
 800e178:	00015180 	.word	0x00015180
 800e17c:	0801174c 	.word	0x0801174c

0800e180 <__tz_lock>:
 800e180:	4801      	ldr	r0, [pc, #4]	; (800e188 <__tz_lock+0x8>)
 800e182:	f000 ba64 	b.w	800e64e <__retarget_lock_acquire>
 800e186:	bf00      	nop
 800e188:	2000061f 	.word	0x2000061f

0800e18c <__tz_unlock>:
 800e18c:	4801      	ldr	r0, [pc, #4]	; (800e194 <__tz_unlock+0x8>)
 800e18e:	f000 ba60 	b.w	800e652 <__retarget_lock_release>
 800e192:	bf00      	nop
 800e194:	2000061f 	.word	0x2000061f

0800e198 <_tzset_unlocked>:
 800e198:	4b01      	ldr	r3, [pc, #4]	; (800e1a0 <_tzset_unlocked+0x8>)
 800e19a:	6818      	ldr	r0, [r3, #0]
 800e19c:	f000 b802 	b.w	800e1a4 <_tzset_unlocked_r>
 800e1a0:	20000088 	.word	0x20000088

0800e1a4 <_tzset_unlocked_r>:
 800e1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a8:	b08d      	sub	sp, #52	; 0x34
 800e1aa:	4607      	mov	r7, r0
 800e1ac:	f000 fa20 	bl	800e5f0 <__gettzinfo>
 800e1b0:	496d      	ldr	r1, [pc, #436]	; (800e368 <_tzset_unlocked_r+0x1c4>)
 800e1b2:	4d6e      	ldr	r5, [pc, #440]	; (800e36c <_tzset_unlocked_r+0x1c8>)
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	f001 f93a 	bl	800f430 <_getenv_r>
 800e1bc:	4606      	mov	r6, r0
 800e1be:	bb10      	cbnz	r0, 800e206 <_tzset_unlocked_r+0x62>
 800e1c0:	4b6b      	ldr	r3, [pc, #428]	; (800e370 <_tzset_unlocked_r+0x1cc>)
 800e1c2:	4a6c      	ldr	r2, [pc, #432]	; (800e374 <_tzset_unlocked_r+0x1d0>)
 800e1c4:	6018      	str	r0, [r3, #0]
 800e1c6:	4b6c      	ldr	r3, [pc, #432]	; (800e378 <_tzset_unlocked_r+0x1d4>)
 800e1c8:	62a0      	str	r0, [r4, #40]	; 0x28
 800e1ca:	6018      	str	r0, [r3, #0]
 800e1cc:	4b6b      	ldr	r3, [pc, #428]	; (800e37c <_tzset_unlocked_r+0x1d8>)
 800e1ce:	6520      	str	r0, [r4, #80]	; 0x50
 800e1d0:	e9c3 2200 	strd	r2, r2, [r3]
 800e1d4:	214a      	movs	r1, #74	; 0x4a
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800e1de:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800e1e2:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 800e1e6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e1ea:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e1ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e1f2:	6828      	ldr	r0, [r5, #0]
 800e1f4:	7221      	strb	r1, [r4, #8]
 800e1f6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800e1fa:	f001 fbc3 	bl	800f984 <free>
 800e1fe:	602e      	str	r6, [r5, #0]
 800e200:	b00d      	add	sp, #52	; 0x34
 800e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e206:	6829      	ldr	r1, [r5, #0]
 800e208:	2900      	cmp	r1, #0
 800e20a:	f040 808e 	bne.w	800e32a <_tzset_unlocked_r+0x186>
 800e20e:	6828      	ldr	r0, [r5, #0]
 800e210:	f001 fbb8 	bl	800f984 <free>
 800e214:	4630      	mov	r0, r6
 800e216:	f7f2 f803 	bl	8000220 <strlen>
 800e21a:	1c41      	adds	r1, r0, #1
 800e21c:	4638      	mov	r0, r7
 800e21e:	f001 fbd9 	bl	800f9d4 <_malloc_r>
 800e222:	6028      	str	r0, [r5, #0]
 800e224:	2800      	cmp	r0, #0
 800e226:	f040 8086 	bne.w	800e336 <_tzset_unlocked_r+0x192>
 800e22a:	4a53      	ldr	r2, [pc, #332]	; (800e378 <_tzset_unlocked_r+0x1d4>)
 800e22c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800e37c <_tzset_unlocked_r+0x1d8>
 800e230:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800e370 <_tzset_unlocked_r+0x1cc>
 800e234:	2300      	movs	r3, #0
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	4a51      	ldr	r2, [pc, #324]	; (800e380 <_tzset_unlocked_r+0x1dc>)
 800e23a:	f8ca 3000 	str.w	r3, [sl]
 800e23e:	2000      	movs	r0, #0
 800e240:	2100      	movs	r1, #0
 800e242:	e9c8 2200 	strd	r2, r2, [r8]
 800e246:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800e24a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800e24e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e252:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e256:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800e25a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e25e:	224a      	movs	r2, #74	; 0x4a
 800e260:	7222      	strb	r2, [r4, #8]
 800e262:	62a3      	str	r3, [r4, #40]	; 0x28
 800e264:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800e268:	6523      	str	r3, [r4, #80]	; 0x50
 800e26a:	7833      	ldrb	r3, [r6, #0]
 800e26c:	2b3a      	cmp	r3, #58	; 0x3a
 800e26e:	bf08      	it	eq
 800e270:	3601      	addeq	r6, #1
 800e272:	7833      	ldrb	r3, [r6, #0]
 800e274:	2b3c      	cmp	r3, #60	; 0x3c
 800e276:	d162      	bne.n	800e33e <_tzset_unlocked_r+0x19a>
 800e278:	1c75      	adds	r5, r6, #1
 800e27a:	4a42      	ldr	r2, [pc, #264]	; (800e384 <_tzset_unlocked_r+0x1e0>)
 800e27c:	4942      	ldr	r1, [pc, #264]	; (800e388 <_tzset_unlocked_r+0x1e4>)
 800e27e:	ab0a      	add	r3, sp, #40	; 0x28
 800e280:	4628      	mov	r0, r5
 800e282:	f002 f853 	bl	801032c <siscanf>
 800e286:	2800      	cmp	r0, #0
 800e288:	ddba      	ble.n	800e200 <_tzset_unlocked_r+0x5c>
 800e28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e28c:	1eda      	subs	r2, r3, #3
 800e28e:	2a07      	cmp	r2, #7
 800e290:	d8b6      	bhi.n	800e200 <_tzset_unlocked_r+0x5c>
 800e292:	5ceb      	ldrb	r3, [r5, r3]
 800e294:	2b3e      	cmp	r3, #62	; 0x3e
 800e296:	d1b3      	bne.n	800e200 <_tzset_unlocked_r+0x5c>
 800e298:	3602      	adds	r6, #2
 800e29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e29c:	18f5      	adds	r5, r6, r3
 800e29e:	5cf3      	ldrb	r3, [r6, r3]
 800e2a0:	2b2d      	cmp	r3, #45	; 0x2d
 800e2a2:	d15a      	bne.n	800e35a <_tzset_unlocked_r+0x1b6>
 800e2a4:	3501      	adds	r5, #1
 800e2a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e2b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e2b4:	af08      	add	r7, sp, #32
 800e2b6:	ab0a      	add	r3, sp, #40	; 0x28
 800e2b8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800e2bc:	9303      	str	r3, [sp, #12]
 800e2be:	f10d 031e 	add.w	r3, sp, #30
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	4931      	ldr	r1, [pc, #196]	; (800e38c <_tzset_unlocked_r+0x1e8>)
 800e2c6:	ab0a      	add	r3, sp, #40	; 0x28
 800e2c8:	aa07      	add	r2, sp, #28
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f002 f82e 	bl	801032c <siscanf>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	dd95      	ble.n	800e200 <_tzset_unlocked_r+0x5c>
 800e2d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e2d8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800e2dc:	223c      	movs	r2, #60	; 0x3c
 800e2de:	fb02 6603 	mla	r6, r2, r3, r6
 800e2e2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800e2e6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800e2ea:	fb02 6603 	mla	r6, r2, r3, r6
 800e2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f0:	fb09 f606 	mul.w	r6, r9, r6
 800e2f4:	eb05 0903 	add.w	r9, r5, r3
 800e2f8:	5ceb      	ldrb	r3, [r5, r3]
 800e2fa:	2b3c      	cmp	r3, #60	; 0x3c
 800e2fc:	f040 80e7 	bne.w	800e4ce <_tzset_unlocked_r+0x32a>
 800e300:	f109 0501 	add.w	r5, r9, #1
 800e304:	4a22      	ldr	r2, [pc, #136]	; (800e390 <_tzset_unlocked_r+0x1ec>)
 800e306:	4920      	ldr	r1, [pc, #128]	; (800e388 <_tzset_unlocked_r+0x1e4>)
 800e308:	ab0a      	add	r3, sp, #40	; 0x28
 800e30a:	4628      	mov	r0, r5
 800e30c:	f002 f80e 	bl	801032c <siscanf>
 800e310:	2800      	cmp	r0, #0
 800e312:	dc41      	bgt.n	800e398 <_tzset_unlocked_r+0x1f4>
 800e314:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e318:	2b3e      	cmp	r3, #62	; 0x3e
 800e31a:	d13d      	bne.n	800e398 <_tzset_unlocked_r+0x1f4>
 800e31c:	4b19      	ldr	r3, [pc, #100]	; (800e384 <_tzset_unlocked_r+0x1e0>)
 800e31e:	62a6      	str	r6, [r4, #40]	; 0x28
 800e320:	e9c8 3300 	strd	r3, r3, [r8]
 800e324:	f8ca 6000 	str.w	r6, [sl]
 800e328:	e76a      	b.n	800e200 <_tzset_unlocked_r+0x5c>
 800e32a:	f7f1 ff81 	bl	8000230 <strcmp>
 800e32e:	2800      	cmp	r0, #0
 800e330:	f47f af6d 	bne.w	800e20e <_tzset_unlocked_r+0x6a>
 800e334:	e764      	b.n	800e200 <_tzset_unlocked_r+0x5c>
 800e336:	4631      	mov	r1, r6
 800e338:	f000 f99b 	bl	800e672 <strcpy>
 800e33c:	e775      	b.n	800e22a <_tzset_unlocked_r+0x86>
 800e33e:	4a11      	ldr	r2, [pc, #68]	; (800e384 <_tzset_unlocked_r+0x1e0>)
 800e340:	4914      	ldr	r1, [pc, #80]	; (800e394 <_tzset_unlocked_r+0x1f0>)
 800e342:	ab0a      	add	r3, sp, #40	; 0x28
 800e344:	4630      	mov	r0, r6
 800e346:	f001 fff1 	bl	801032c <siscanf>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	f77f af58 	ble.w	800e200 <_tzset_unlocked_r+0x5c>
 800e350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e352:	3b03      	subs	r3, #3
 800e354:	2b07      	cmp	r3, #7
 800e356:	d9a0      	bls.n	800e29a <_tzset_unlocked_r+0xf6>
 800e358:	e752      	b.n	800e200 <_tzset_unlocked_r+0x5c>
 800e35a:	2b2b      	cmp	r3, #43	; 0x2b
 800e35c:	bf08      	it	eq
 800e35e:	3501      	addeq	r5, #1
 800e360:	f04f 0901 	mov.w	r9, #1
 800e364:	e7a1      	b.n	800e2aa <_tzset_unlocked_r+0x106>
 800e366:	bf00      	nop
 800e368:	080117ac 	.word	0x080117ac
 800e36c:	20000610 	.word	0x20000610
 800e370:	20000618 	.word	0x20000618
 800e374:	080117af 	.word	0x080117af
 800e378:	20000614 	.word	0x20000614
 800e37c:	20000034 	.word	0x20000034
 800e380:	08011936 	.word	0x08011936
 800e384:	20000604 	.word	0x20000604
 800e388:	080117b3 	.word	0x080117b3
 800e38c:	080117e8 	.word	0x080117e8
 800e390:	200005f8 	.word	0x200005f8
 800e394:	080117c6 	.word	0x080117c6
 800e398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e39a:	1eda      	subs	r2, r3, #3
 800e39c:	2a07      	cmp	r2, #7
 800e39e:	f63f af2f 	bhi.w	800e200 <_tzset_unlocked_r+0x5c>
 800e3a2:	5ceb      	ldrb	r3, [r5, r3]
 800e3a4:	2b3e      	cmp	r3, #62	; 0x3e
 800e3a6:	f47f af2b 	bne.w	800e200 <_tzset_unlocked_r+0x5c>
 800e3aa:	f109 0902 	add.w	r9, r9, #2
 800e3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b0:	eb09 0503 	add.w	r5, r9, r3
 800e3b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e3b8:	2b2d      	cmp	r3, #45	; 0x2d
 800e3ba:	f040 8097 	bne.w	800e4ec <_tzset_unlocked_r+0x348>
 800e3be:	3501      	adds	r5, #1
 800e3c0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e3ca:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e3ce:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800e3d4:	ab0a      	add	r3, sp, #40	; 0x28
 800e3d6:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800e3da:	9301      	str	r3, [sp, #4]
 800e3dc:	f10d 031e 	add.w	r3, sp, #30
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	497a      	ldr	r1, [pc, #488]	; (800e5cc <_tzset_unlocked_r+0x428>)
 800e3e4:	ab0a      	add	r3, sp, #40	; 0x28
 800e3e6:	aa07      	add	r2, sp, #28
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f001 ff9f 	bl	801032c <siscanf>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f300 8082 	bgt.w	800e4f8 <_tzset_unlocked_r+0x354>
 800e3f4:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 800e3f8:	9304      	str	r3, [sp, #16]
 800e3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3fc:	4627      	mov	r7, r4
 800e3fe:	441d      	add	r5, r3
 800e400:	f04f 0b00 	mov.w	fp, #0
 800e404:	782b      	ldrb	r3, [r5, #0]
 800e406:	2b2c      	cmp	r3, #44	; 0x2c
 800e408:	bf08      	it	eq
 800e40a:	3501      	addeq	r5, #1
 800e40c:	f895 9000 	ldrb.w	r9, [r5]
 800e410:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 800e414:	f040 8083 	bne.w	800e51e <_tzset_unlocked_r+0x37a>
 800e418:	ab0a      	add	r3, sp, #40	; 0x28
 800e41a:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800e41e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e422:	aa09      	add	r2, sp, #36	; 0x24
 800e424:	9200      	str	r2, [sp, #0]
 800e426:	496a      	ldr	r1, [pc, #424]	; (800e5d0 <_tzset_unlocked_r+0x42c>)
 800e428:	9303      	str	r3, [sp, #12]
 800e42a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800e42e:	4628      	mov	r0, r5
 800e430:	f001 ff7c 	bl	801032c <siscanf>
 800e434:	2803      	cmp	r0, #3
 800e436:	f47f aee3 	bne.w	800e200 <_tzset_unlocked_r+0x5c>
 800e43a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e43e:	1e4b      	subs	r3, r1, #1
 800e440:	2b0b      	cmp	r3, #11
 800e442:	f63f aedd 	bhi.w	800e200 <_tzset_unlocked_r+0x5c>
 800e446:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e44a:	1e53      	subs	r3, r2, #1
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	f63f aed7 	bhi.w	800e200 <_tzset_unlocked_r+0x5c>
 800e452:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e456:	2b06      	cmp	r3, #6
 800e458:	f63f aed2 	bhi.w	800e200 <_tzset_unlocked_r+0x5c>
 800e45c:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800e460:	f887 9008 	strb.w	r9, [r7, #8]
 800e464:	617b      	str	r3, [r7, #20]
 800e466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e468:	eb05 0903 	add.w	r9, r5, r3
 800e46c:	2500      	movs	r5, #0
 800e46e:	2302      	movs	r3, #2
 800e470:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e474:	f8ad 501e 	strh.w	r5, [sp, #30]
 800e478:	f8ad 5020 	strh.w	r5, [sp, #32]
 800e47c:	950a      	str	r5, [sp, #40]	; 0x28
 800e47e:	f899 3000 	ldrb.w	r3, [r9]
 800e482:	2b2f      	cmp	r3, #47	; 0x2f
 800e484:	d177      	bne.n	800e576 <_tzset_unlocked_r+0x3d2>
 800e486:	ab0a      	add	r3, sp, #40	; 0x28
 800e488:	aa08      	add	r2, sp, #32
 800e48a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e48e:	f10d 021e 	add.w	r2, sp, #30
 800e492:	9200      	str	r2, [sp, #0]
 800e494:	494f      	ldr	r1, [pc, #316]	; (800e5d4 <_tzset_unlocked_r+0x430>)
 800e496:	9303      	str	r3, [sp, #12]
 800e498:	aa07      	add	r2, sp, #28
 800e49a:	4648      	mov	r0, r9
 800e49c:	f001 ff46 	bl	801032c <siscanf>
 800e4a0:	42a8      	cmp	r0, r5
 800e4a2:	dc68      	bgt.n	800e576 <_tzset_unlocked_r+0x3d2>
 800e4a4:	214a      	movs	r1, #74	; 0x4a
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800e4ae:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e4b2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e4b6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4ba:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 800e4be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e4c2:	7221      	strb	r1, [r4, #8]
 800e4c4:	62a5      	str	r5, [r4, #40]	; 0x28
 800e4c6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800e4ca:	6525      	str	r5, [r4, #80]	; 0x50
 800e4cc:	e698      	b.n	800e200 <_tzset_unlocked_r+0x5c>
 800e4ce:	4a42      	ldr	r2, [pc, #264]	; (800e5d8 <_tzset_unlocked_r+0x434>)
 800e4d0:	4942      	ldr	r1, [pc, #264]	; (800e5dc <_tzset_unlocked_r+0x438>)
 800e4d2:	ab0a      	add	r3, sp, #40	; 0x28
 800e4d4:	4648      	mov	r0, r9
 800e4d6:	f001 ff29 	bl	801032c <siscanf>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	f77f af1e 	ble.w	800e31c <_tzset_unlocked_r+0x178>
 800e4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e2:	3b03      	subs	r3, #3
 800e4e4:	2b07      	cmp	r3, #7
 800e4e6:	f67f af62 	bls.w	800e3ae <_tzset_unlocked_r+0x20a>
 800e4ea:	e689      	b.n	800e200 <_tzset_unlocked_r+0x5c>
 800e4ec:	2b2b      	cmp	r3, #43	; 0x2b
 800e4ee:	bf08      	it	eq
 800e4f0:	3501      	addeq	r5, #1
 800e4f2:	f04f 0901 	mov.w	r9, #1
 800e4f6:	e765      	b.n	800e3c4 <_tzset_unlocked_r+0x220>
 800e4f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e4fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e500:	213c      	movs	r1, #60	; 0x3c
 800e502:	fb01 3302 	mla	r3, r1, r2, r3
 800e506:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e50a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e50e:	fb01 3302 	mla	r3, r1, r2, r3
 800e512:	fb09 f303 	mul.w	r3, r9, r3
 800e516:	e76f      	b.n	800e3f8 <_tzset_unlocked_r+0x254>
 800e518:	f04f 0b01 	mov.w	fp, #1
 800e51c:	e772      	b.n	800e404 <_tzset_unlocked_r+0x260>
 800e51e:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 800e522:	bf06      	itte	eq
 800e524:	3501      	addeq	r5, #1
 800e526:	464b      	moveq	r3, r9
 800e528:	2344      	movne	r3, #68	; 0x44
 800e52a:	220a      	movs	r2, #10
 800e52c:	a90b      	add	r1, sp, #44	; 0x2c
 800e52e:	4628      	mov	r0, r5
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	f7ff f95b 	bl	800d7ec <strtoul>
 800e536:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e53a:	9b05      	ldr	r3, [sp, #20]
 800e53c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800e540:	45a9      	cmp	r9, r5
 800e542:	d114      	bne.n	800e56e <_tzset_unlocked_r+0x3ca>
 800e544:	234d      	movs	r3, #77	; 0x4d
 800e546:	f1bb 0f00 	cmp.w	fp, #0
 800e54a:	d107      	bne.n	800e55c <_tzset_unlocked_r+0x3b8>
 800e54c:	7223      	strb	r3, [r4, #8]
 800e54e:	2103      	movs	r1, #3
 800e550:	2302      	movs	r3, #2
 800e552:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800e556:	f8c4 b014 	str.w	fp, [r4, #20]
 800e55a:	e787      	b.n	800e46c <_tzset_unlocked_r+0x2c8>
 800e55c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e560:	220b      	movs	r2, #11
 800e562:	2301      	movs	r3, #1
 800e564:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 800e568:	2300      	movs	r3, #0
 800e56a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e56c:	e77e      	b.n	800e46c <_tzset_unlocked_r+0x2c8>
 800e56e:	b280      	uxth	r0, r0
 800e570:	723b      	strb	r3, [r7, #8]
 800e572:	6178      	str	r0, [r7, #20]
 800e574:	e77a      	b.n	800e46c <_tzset_unlocked_r+0x2c8>
 800e576:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e57a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e57e:	213c      	movs	r1, #60	; 0x3c
 800e580:	fb01 3302 	mla	r3, r1, r2, r3
 800e584:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e588:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e58c:	fb01 3302 	mla	r3, r1, r2, r3
 800e590:	61bb      	str	r3, [r7, #24]
 800e592:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e594:	3728      	adds	r7, #40	; 0x28
 800e596:	444d      	add	r5, r9
 800e598:	f1bb 0f00 	cmp.w	fp, #0
 800e59c:	d0bc      	beq.n	800e518 <_tzset_unlocked_r+0x374>
 800e59e:	9b04      	ldr	r3, [sp, #16]
 800e5a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e5a2:	4b0f      	ldr	r3, [pc, #60]	; (800e5e0 <_tzset_unlocked_r+0x43c>)
 800e5a4:	f8c8 3000 	str.w	r3, [r8]
 800e5a8:	6860      	ldr	r0, [r4, #4]
 800e5aa:	4b0b      	ldr	r3, [pc, #44]	; (800e5d8 <_tzset_unlocked_r+0x434>)
 800e5ac:	62a6      	str	r6, [r4, #40]	; 0x28
 800e5ae:	f8c8 3004 	str.w	r3, [r8, #4]
 800e5b2:	f7ff fd3d 	bl	800e030 <__tzcalc_limits>
 800e5b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e5b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e5ba:	f8ca 2000 	str.w	r2, [sl]
 800e5be:	1a9b      	subs	r3, r3, r2
 800e5c0:	4a08      	ldr	r2, [pc, #32]	; (800e5e4 <_tzset_unlocked_r+0x440>)
 800e5c2:	bf18      	it	ne
 800e5c4:	2301      	movne	r3, #1
 800e5c6:	6013      	str	r3, [r2, #0]
 800e5c8:	e61a      	b.n	800e200 <_tzset_unlocked_r+0x5c>
 800e5ca:	bf00      	nop
 800e5cc:	080117e8 	.word	0x080117e8
 800e5d0:	080117d4 	.word	0x080117d4
 800e5d4:	080117e7 	.word	0x080117e7
 800e5d8:	200005f8 	.word	0x200005f8
 800e5dc:	080117c6 	.word	0x080117c6
 800e5e0:	20000604 	.word	0x20000604
 800e5e4:	20000614 	.word	0x20000614

0800e5e8 <_localeconv_r>:
 800e5e8:	4800      	ldr	r0, [pc, #0]	; (800e5ec <_localeconv_r+0x4>)
 800e5ea:	4770      	bx	lr
 800e5ec:	200001d8 	.word	0x200001d8

0800e5f0 <__gettzinfo>:
 800e5f0:	4800      	ldr	r0, [pc, #0]	; (800e5f4 <__gettzinfo+0x4>)
 800e5f2:	4770      	bx	lr
 800e5f4:	20000090 	.word	0x20000090

0800e5f8 <__errno>:
 800e5f8:	4b01      	ldr	r3, [pc, #4]	; (800e600 <__errno+0x8>)
 800e5fa:	6818      	ldr	r0, [r3, #0]
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	20000088 	.word	0x20000088

0800e604 <__libc_init_array>:
 800e604:	b570      	push	{r4, r5, r6, lr}
 800e606:	4d0d      	ldr	r5, [pc, #52]	; (800e63c <__libc_init_array+0x38>)
 800e608:	4c0d      	ldr	r4, [pc, #52]	; (800e640 <__libc_init_array+0x3c>)
 800e60a:	1b64      	subs	r4, r4, r5
 800e60c:	10a4      	asrs	r4, r4, #2
 800e60e:	2600      	movs	r6, #0
 800e610:	42a6      	cmp	r6, r4
 800e612:	d109      	bne.n	800e628 <__libc_init_array+0x24>
 800e614:	4d0b      	ldr	r5, [pc, #44]	; (800e644 <__libc_init_array+0x40>)
 800e616:	4c0c      	ldr	r4, [pc, #48]	; (800e648 <__libc_init_array+0x44>)
 800e618:	f002 fe6c 	bl	80112f4 <_init>
 800e61c:	1b64      	subs	r4, r4, r5
 800e61e:	10a4      	asrs	r4, r4, #2
 800e620:	2600      	movs	r6, #0
 800e622:	42a6      	cmp	r6, r4
 800e624:	d105      	bne.n	800e632 <__libc_init_array+0x2e>
 800e626:	bd70      	pop	{r4, r5, r6, pc}
 800e628:	f855 3b04 	ldr.w	r3, [r5], #4
 800e62c:	4798      	blx	r3
 800e62e:	3601      	adds	r6, #1
 800e630:	e7ee      	b.n	800e610 <__libc_init_array+0xc>
 800e632:	f855 3b04 	ldr.w	r3, [r5], #4
 800e636:	4798      	blx	r3
 800e638:	3601      	adds	r6, #1
 800e63a:	e7f2      	b.n	800e622 <__libc_init_array+0x1e>
 800e63c:	08011b44 	.word	0x08011b44
 800e640:	08011b44 	.word	0x08011b44
 800e644:	08011b44 	.word	0x08011b44
 800e648:	08011b48 	.word	0x08011b48

0800e64c <__retarget_lock_init_recursive>:
 800e64c:	4770      	bx	lr

0800e64e <__retarget_lock_acquire>:
 800e64e:	4770      	bx	lr

0800e650 <__retarget_lock_acquire_recursive>:
 800e650:	4770      	bx	lr

0800e652 <__retarget_lock_release>:
 800e652:	4770      	bx	lr

0800e654 <__retarget_lock_release_recursive>:
 800e654:	4770      	bx	lr

0800e656 <memcpy>:
 800e656:	440a      	add	r2, r1
 800e658:	4291      	cmp	r1, r2
 800e65a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e65e:	d100      	bne.n	800e662 <memcpy+0xc>
 800e660:	4770      	bx	lr
 800e662:	b510      	push	{r4, lr}
 800e664:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e66c:	4291      	cmp	r1, r2
 800e66e:	d1f9      	bne.n	800e664 <memcpy+0xe>
 800e670:	bd10      	pop	{r4, pc}

0800e672 <strcpy>:
 800e672:	4603      	mov	r3, r0
 800e674:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e678:	f803 2b01 	strb.w	r2, [r3], #1
 800e67c:	2a00      	cmp	r2, #0
 800e67e:	d1f9      	bne.n	800e674 <strcpy+0x2>
 800e680:	4770      	bx	lr
	...

0800e684 <__assert_func>:
 800e684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e686:	4614      	mov	r4, r2
 800e688:	461a      	mov	r2, r3
 800e68a:	4b09      	ldr	r3, [pc, #36]	; (800e6b0 <__assert_func+0x2c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4605      	mov	r5, r0
 800e690:	68d8      	ldr	r0, [r3, #12]
 800e692:	b14c      	cbz	r4, 800e6a8 <__assert_func+0x24>
 800e694:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <__assert_func+0x30>)
 800e696:	9100      	str	r1, [sp, #0]
 800e698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e69c:	4906      	ldr	r1, [pc, #24]	; (800e6b8 <__assert_func+0x34>)
 800e69e:	462b      	mov	r3, r5
 800e6a0:	f001 feb4 	bl	801040c <fiprintf>
 800e6a4:	f002 f934 	bl	8010910 <abort>
 800e6a8:	4b04      	ldr	r3, [pc, #16]	; (800e6bc <__assert_func+0x38>)
 800e6aa:	461c      	mov	r4, r3
 800e6ac:	e7f3      	b.n	800e696 <__assert_func+0x12>
 800e6ae:	bf00      	nop
 800e6b0:	20000088 	.word	0x20000088
 800e6b4:	080118fb 	.word	0x080118fb
 800e6b8:	08011908 	.word	0x08011908
 800e6bc:	08011936 	.word	0x08011936

0800e6c0 <div>:
 800e6c0:	2900      	cmp	r1, #0
 800e6c2:	b510      	push	{r4, lr}
 800e6c4:	fb91 f4f2 	sdiv	r4, r1, r2
 800e6c8:	fb02 1314 	mls	r3, r2, r4, r1
 800e6cc:	db06      	blt.n	800e6dc <div+0x1c>
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da01      	bge.n	800e6d6 <div+0x16>
 800e6d2:	3401      	adds	r4, #1
 800e6d4:	1a9b      	subs	r3, r3, r2
 800e6d6:	e9c0 4300 	strd	r4, r3, [r0]
 800e6da:	bd10      	pop	{r4, pc}
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bfc4      	itt	gt
 800e6e0:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 800e6e4:	189b      	addgt	r3, r3, r2
 800e6e6:	e7f6      	b.n	800e6d6 <div+0x16>

0800e6e8 <quorem>:
 800e6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	6903      	ldr	r3, [r0, #16]
 800e6ee:	690c      	ldr	r4, [r1, #16]
 800e6f0:	42a3      	cmp	r3, r4
 800e6f2:	4607      	mov	r7, r0
 800e6f4:	db7b      	blt.n	800e7ee <quorem+0x106>
 800e6f6:	3c01      	subs	r4, #1
 800e6f8:	f101 0814 	add.w	r8, r1, #20
 800e6fc:	f100 0514 	add.w	r5, r0, #20
 800e700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e70a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e70e:	3301      	adds	r3, #1
 800e710:	429a      	cmp	r2, r3
 800e712:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e716:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e71a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e71e:	d32e      	bcc.n	800e77e <quorem+0x96>
 800e720:	f04f 0e00 	mov.w	lr, #0
 800e724:	4640      	mov	r0, r8
 800e726:	46ac      	mov	ip, r5
 800e728:	46f2      	mov	sl, lr
 800e72a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e72e:	b293      	uxth	r3, r2
 800e730:	fb06 e303 	mla	r3, r6, r3, lr
 800e734:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e738:	0c1a      	lsrs	r2, r3, #16
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	fb06 220e 	mla	r2, r6, lr, r2
 800e740:	ebaa 0303 	sub.w	r3, sl, r3
 800e744:	f8dc a000 	ldr.w	sl, [ip]
 800e748:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e74c:	b292      	uxth	r2, r2
 800e74e:	fa13 f38a 	uxtah	r3, r3, sl
 800e752:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e760:	4581      	cmp	r9, r0
 800e762:	f84c 3b04 	str.w	r3, [ip], #4
 800e766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e76a:	d2de      	bcs.n	800e72a <quorem+0x42>
 800e76c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e770:	b92b      	cbnz	r3, 800e77e <quorem+0x96>
 800e772:	9b01      	ldr	r3, [sp, #4]
 800e774:	3b04      	subs	r3, #4
 800e776:	429d      	cmp	r5, r3
 800e778:	461a      	mov	r2, r3
 800e77a:	d32c      	bcc.n	800e7d6 <quorem+0xee>
 800e77c:	613c      	str	r4, [r7, #16]
 800e77e:	4638      	mov	r0, r7
 800e780:	f001 fcda 	bl	8010138 <__mcmp>
 800e784:	2800      	cmp	r0, #0
 800e786:	db22      	blt.n	800e7ce <quorem+0xe6>
 800e788:	3601      	adds	r6, #1
 800e78a:	4629      	mov	r1, r5
 800e78c:	2000      	movs	r0, #0
 800e78e:	f858 2b04 	ldr.w	r2, [r8], #4
 800e792:	f8d1 c000 	ldr.w	ip, [r1]
 800e796:	b293      	uxth	r3, r2
 800e798:	1ac3      	subs	r3, r0, r3
 800e79a:	0c12      	lsrs	r2, r2, #16
 800e79c:	fa13 f38c 	uxtah	r3, r3, ip
 800e7a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e7a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7ae:	45c1      	cmp	r9, r8
 800e7b0:	f841 3b04 	str.w	r3, [r1], #4
 800e7b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e7b8:	d2e9      	bcs.n	800e78e <quorem+0xa6>
 800e7ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7c2:	b922      	cbnz	r2, 800e7ce <quorem+0xe6>
 800e7c4:	3b04      	subs	r3, #4
 800e7c6:	429d      	cmp	r5, r3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	d30a      	bcc.n	800e7e2 <quorem+0xfa>
 800e7cc:	613c      	str	r4, [r7, #16]
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	b003      	add	sp, #12
 800e7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d6:	6812      	ldr	r2, [r2, #0]
 800e7d8:	3b04      	subs	r3, #4
 800e7da:	2a00      	cmp	r2, #0
 800e7dc:	d1ce      	bne.n	800e77c <quorem+0x94>
 800e7de:	3c01      	subs	r4, #1
 800e7e0:	e7c9      	b.n	800e776 <quorem+0x8e>
 800e7e2:	6812      	ldr	r2, [r2, #0]
 800e7e4:	3b04      	subs	r3, #4
 800e7e6:	2a00      	cmp	r2, #0
 800e7e8:	d1f0      	bne.n	800e7cc <quorem+0xe4>
 800e7ea:	3c01      	subs	r4, #1
 800e7ec:	e7eb      	b.n	800e7c6 <quorem+0xde>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e7ee      	b.n	800e7d0 <quorem+0xe8>
 800e7f2:	0000      	movs	r0, r0
 800e7f4:	0000      	movs	r0, r0
	...

0800e7f8 <_dtoa_r>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	69c4      	ldr	r4, [r0, #28]
 800e7fe:	b099      	sub	sp, #100	; 0x64
 800e800:	4616      	mov	r6, r2
 800e802:	461f      	mov	r7, r3
 800e804:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e808:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e80c:	4605      	mov	r5, r0
 800e80e:	b974      	cbnz	r4, 800e82e <_dtoa_r+0x36>
 800e810:	2010      	movs	r0, #16
 800e812:	f001 f8af 	bl	800f974 <malloc>
 800e816:	4602      	mov	r2, r0
 800e818:	61e8      	str	r0, [r5, #28]
 800e81a:	b920      	cbnz	r0, 800e826 <_dtoa_r+0x2e>
 800e81c:	4baa      	ldr	r3, [pc, #680]	; (800eac8 <_dtoa_r+0x2d0>)
 800e81e:	21ef      	movs	r1, #239	; 0xef
 800e820:	48aa      	ldr	r0, [pc, #680]	; (800eacc <_dtoa_r+0x2d4>)
 800e822:	f7ff ff2f 	bl	800e684 <__assert_func>
 800e826:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e82a:	6004      	str	r4, [r0, #0]
 800e82c:	60c4      	str	r4, [r0, #12]
 800e82e:	69eb      	ldr	r3, [r5, #28]
 800e830:	6819      	ldr	r1, [r3, #0]
 800e832:	b151      	cbz	r1, 800e84a <_dtoa_r+0x52>
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	604a      	str	r2, [r1, #4]
 800e838:	2301      	movs	r3, #1
 800e83a:	4093      	lsls	r3, r2
 800e83c:	608b      	str	r3, [r1, #8]
 800e83e:	4628      	mov	r0, r5
 800e840:	f001 fa3e 	bl	800fcc0 <_Bfree>
 800e844:	69eb      	ldr	r3, [r5, #28]
 800e846:	2200      	movs	r2, #0
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	1e3b      	subs	r3, r7, #0
 800e84c:	bfb9      	ittee	lt
 800e84e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e852:	9305      	strlt	r3, [sp, #20]
 800e854:	2300      	movge	r3, #0
 800e856:	f8c8 3000 	strge.w	r3, [r8]
 800e85a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e85e:	4b9c      	ldr	r3, [pc, #624]	; (800ead0 <_dtoa_r+0x2d8>)
 800e860:	bfbc      	itt	lt
 800e862:	2201      	movlt	r2, #1
 800e864:	f8c8 2000 	strlt.w	r2, [r8]
 800e868:	ea33 0309 	bics.w	r3, r3, r9
 800e86c:	d119      	bne.n	800e8a2 <_dtoa_r+0xaa>
 800e86e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e870:	f242 730f 	movw	r3, #9999	; 0x270f
 800e874:	6013      	str	r3, [r2, #0]
 800e876:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e87a:	4333      	orrs	r3, r6
 800e87c:	f000 8587 	beq.w	800f38e <_dtoa_r+0xb96>
 800e880:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e882:	b953      	cbnz	r3, 800e89a <_dtoa_r+0xa2>
 800e884:	4b93      	ldr	r3, [pc, #588]	; (800ead4 <_dtoa_r+0x2dc>)
 800e886:	e023      	b.n	800e8d0 <_dtoa_r+0xd8>
 800e888:	4b93      	ldr	r3, [pc, #588]	; (800ead8 <_dtoa_r+0x2e0>)
 800e88a:	9303      	str	r3, [sp, #12]
 800e88c:	3308      	adds	r3, #8
 800e88e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	9803      	ldr	r0, [sp, #12]
 800e894:	b019      	add	sp, #100	; 0x64
 800e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89a:	4b8e      	ldr	r3, [pc, #568]	; (800ead4 <_dtoa_r+0x2dc>)
 800e89c:	9303      	str	r3, [sp, #12]
 800e89e:	3303      	adds	r3, #3
 800e8a0:	e7f5      	b.n	800e88e <_dtoa_r+0x96>
 800e8a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e8a6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e8aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f7f2 f8eb 	bl	8000a8c <__aeabi_dcmpeq>
 800e8b6:	4680      	mov	r8, r0
 800e8b8:	b160      	cbz	r0, 800e8d4 <_dtoa_r+0xdc>
 800e8ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e8bc:	2301      	movs	r3, #1
 800e8be:	6013      	str	r3, [r2, #0]
 800e8c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 8560 	beq.w	800f388 <_dtoa_r+0xb90>
 800e8c8:	4b84      	ldr	r3, [pc, #528]	; (800eadc <_dtoa_r+0x2e4>)
 800e8ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	9303      	str	r3, [sp, #12]
 800e8d2:	e7de      	b.n	800e892 <_dtoa_r+0x9a>
 800e8d4:	ab16      	add	r3, sp, #88	; 0x58
 800e8d6:	9301      	str	r3, [sp, #4]
 800e8d8:	ab17      	add	r3, sp, #92	; 0x5c
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	4628      	mov	r0, r5
 800e8de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8e2:	f001 fccd 	bl	8010280 <__d2b>
 800e8e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e8ea:	4682      	mov	sl, r0
 800e8ec:	2c00      	cmp	r4, #0
 800e8ee:	d07d      	beq.n	800e9ec <_dtoa_r+0x1f4>
 800e8f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8f2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e8f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8fe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e902:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e906:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e90a:	4619      	mov	r1, r3
 800e90c:	2200      	movs	r2, #0
 800e90e:	4b74      	ldr	r3, [pc, #464]	; (800eae0 <_dtoa_r+0x2e8>)
 800e910:	f7f1 fc9c 	bl	800024c <__aeabi_dsub>
 800e914:	a366      	add	r3, pc, #408	; (adr r3, 800eab0 <_dtoa_r+0x2b8>)
 800e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91a:	f7f1 fe4f 	bl	80005bc <__aeabi_dmul>
 800e91e:	a366      	add	r3, pc, #408	; (adr r3, 800eab8 <_dtoa_r+0x2c0>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	f7f1 fc94 	bl	8000250 <__adddf3>
 800e928:	4606      	mov	r6, r0
 800e92a:	4620      	mov	r0, r4
 800e92c:	460f      	mov	r7, r1
 800e92e:	f7f1 fddb 	bl	80004e8 <__aeabi_i2d>
 800e932:	a363      	add	r3, pc, #396	; (adr r3, 800eac0 <_dtoa_r+0x2c8>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fe40 	bl	80005bc <__aeabi_dmul>
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f7f1 fc84 	bl	8000250 <__adddf3>
 800e948:	4606      	mov	r6, r0
 800e94a:	460f      	mov	r7, r1
 800e94c:	f7f2 f8e6 	bl	8000b1c <__aeabi_d2iz>
 800e950:	2200      	movs	r2, #0
 800e952:	4683      	mov	fp, r0
 800e954:	2300      	movs	r3, #0
 800e956:	4630      	mov	r0, r6
 800e958:	4639      	mov	r1, r7
 800e95a:	f7f2 f8a1 	bl	8000aa0 <__aeabi_dcmplt>
 800e95e:	b148      	cbz	r0, 800e974 <_dtoa_r+0x17c>
 800e960:	4658      	mov	r0, fp
 800e962:	f7f1 fdc1 	bl	80004e8 <__aeabi_i2d>
 800e966:	4632      	mov	r2, r6
 800e968:	463b      	mov	r3, r7
 800e96a:	f7f2 f88f 	bl	8000a8c <__aeabi_dcmpeq>
 800e96e:	b908      	cbnz	r0, 800e974 <_dtoa_r+0x17c>
 800e970:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e974:	f1bb 0f16 	cmp.w	fp, #22
 800e978:	d856      	bhi.n	800ea28 <_dtoa_r+0x230>
 800e97a:	4b5a      	ldr	r3, [pc, #360]	; (800eae4 <_dtoa_r+0x2ec>)
 800e97c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e988:	f7f2 f88a 	bl	8000aa0 <__aeabi_dcmplt>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d04d      	beq.n	800ea2c <_dtoa_r+0x234>
 800e990:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e994:	2300      	movs	r3, #0
 800e996:	930f      	str	r3, [sp, #60]	; 0x3c
 800e998:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e99a:	1b1b      	subs	r3, r3, r4
 800e99c:	1e5a      	subs	r2, r3, #1
 800e99e:	bf44      	itt	mi
 800e9a0:	f1c3 0901 	rsbmi	r9, r3, #1
 800e9a4:	2300      	movmi	r3, #0
 800e9a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e9a8:	bf54      	ite	pl
 800e9aa:	f04f 0900 	movpl.w	r9, #0
 800e9ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e9b0:	f1bb 0f00 	cmp.w	fp, #0
 800e9b4:	db3c      	blt.n	800ea30 <_dtoa_r+0x238>
 800e9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e9bc:	445b      	add	r3, fp
 800e9be:	9309      	str	r3, [sp, #36]	; 0x24
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800e9c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9c6:	2b09      	cmp	r3, #9
 800e9c8:	d866      	bhi.n	800ea98 <_dtoa_r+0x2a0>
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	bfc4      	itt	gt
 800e9ce:	3b04      	subgt	r3, #4
 800e9d0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e9d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9d4:	f1a3 0302 	sub.w	r3, r3, #2
 800e9d8:	bfcc      	ite	gt
 800e9da:	2400      	movgt	r4, #0
 800e9dc:	2401      	movle	r4, #1
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	f200 8084 	bhi.w	800eaec <_dtoa_r+0x2f4>
 800e9e4:	e8df f003 	tbb	[pc, r3]
 800e9e8:	5637392c 	.word	0x5637392c
 800e9ec:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e9f0:	441c      	add	r4, r3
 800e9f2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e9f6:	2b20      	cmp	r3, #32
 800e9f8:	bfc1      	itttt	gt
 800e9fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e9fe:	fa09 f903 	lslgt.w	r9, r9, r3
 800ea02:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800ea06:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ea0a:	bfd6      	itet	le
 800ea0c:	f1c3 0320 	rsble	r3, r3, #32
 800ea10:	ea49 0003 	orrgt.w	r0, r9, r3
 800ea14:	fa06 f003 	lslle.w	r0, r6, r3
 800ea18:	f7f1 fd56 	bl	80004c8 <__aeabi_ui2d>
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ea22:	3c01      	subs	r4, #1
 800ea24:	9213      	str	r2, [sp, #76]	; 0x4c
 800ea26:	e770      	b.n	800e90a <_dtoa_r+0x112>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e7b4      	b.n	800e996 <_dtoa_r+0x19e>
 800ea2c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ea2e:	e7b3      	b.n	800e998 <_dtoa_r+0x1a0>
 800ea30:	f1cb 0300 	rsb	r3, fp, #0
 800ea34:	930a      	str	r3, [sp, #40]	; 0x28
 800ea36:	2300      	movs	r3, #0
 800ea38:	eba9 090b 	sub.w	r9, r9, fp
 800ea3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ea3e:	e7c1      	b.n	800e9c4 <_dtoa_r+0x1cc>
 800ea40:	2300      	movs	r3, #0
 800ea42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dc53      	bgt.n	800eaf2 <_dtoa_r+0x2fa>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	9306      	str	r3, [sp, #24]
 800ea4e:	9308      	str	r3, [sp, #32]
 800ea50:	461a      	mov	r2, r3
 800ea52:	9223      	str	r2, [sp, #140]	; 0x8c
 800ea54:	e00b      	b.n	800ea6e <_dtoa_r+0x276>
 800ea56:	2301      	movs	r3, #1
 800ea58:	e7f3      	b.n	800ea42 <_dtoa_r+0x24a>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea60:	445b      	add	r3, fp
 800ea62:	9306      	str	r3, [sp, #24]
 800ea64:	3301      	adds	r3, #1
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	9308      	str	r3, [sp, #32]
 800ea6a:	bfb8      	it	lt
 800ea6c:	2301      	movlt	r3, #1
 800ea6e:	69e8      	ldr	r0, [r5, #28]
 800ea70:	2100      	movs	r1, #0
 800ea72:	2204      	movs	r2, #4
 800ea74:	f102 0614 	add.w	r6, r2, #20
 800ea78:	429e      	cmp	r6, r3
 800ea7a:	d93e      	bls.n	800eafa <_dtoa_r+0x302>
 800ea7c:	6041      	str	r1, [r0, #4]
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f001 f8de 	bl	800fc40 <_Balloc>
 800ea84:	9003      	str	r0, [sp, #12]
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d13a      	bne.n	800eb00 <_dtoa_r+0x308>
 800ea8a:	4b17      	ldr	r3, [pc, #92]	; (800eae8 <_dtoa_r+0x2f0>)
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	f240 11af 	movw	r1, #431	; 0x1af
 800ea92:	e6c5      	b.n	800e820 <_dtoa_r+0x28>
 800ea94:	2301      	movs	r3, #1
 800ea96:	e7e1      	b.n	800ea5c <_dtoa_r+0x264>
 800ea98:	2401      	movs	r4, #1
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	9322      	str	r3, [sp, #136]	; 0x88
 800ea9e:	940b      	str	r4, [sp, #44]	; 0x2c
 800eaa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa4:	9306      	str	r3, [sp, #24]
 800eaa6:	9308      	str	r3, [sp, #32]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	2312      	movs	r3, #18
 800eaac:	e7d1      	b.n	800ea52 <_dtoa_r+0x25a>
 800eaae:	bf00      	nop
 800eab0:	636f4361 	.word	0x636f4361
 800eab4:	3fd287a7 	.word	0x3fd287a7
 800eab8:	8b60c8b3 	.word	0x8b60c8b3
 800eabc:	3fc68a28 	.word	0x3fc68a28
 800eac0:	509f79fb 	.word	0x509f79fb
 800eac4:	3fd34413 	.word	0x3fd34413
 800eac8:	0801167a 	.word	0x0801167a
 800eacc:	08011944 	.word	0x08011944
 800ead0:	7ff00000 	.word	0x7ff00000
 800ead4:	08011940 	.word	0x08011940
 800ead8:	08011937 	.word	0x08011937
 800eadc:	08011b35 	.word	0x08011b35
 800eae0:	3ff80000 	.word	0x3ff80000
 800eae4:	08011a40 	.word	0x08011a40
 800eae8:	0801199c 	.word	0x0801199c
 800eaec:	2301      	movs	r3, #1
 800eaee:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaf0:	e7d6      	b.n	800eaa0 <_dtoa_r+0x2a8>
 800eaf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eaf4:	9306      	str	r3, [sp, #24]
 800eaf6:	9308      	str	r3, [sp, #32]
 800eaf8:	e7b9      	b.n	800ea6e <_dtoa_r+0x276>
 800eafa:	3101      	adds	r1, #1
 800eafc:	0052      	lsls	r2, r2, #1
 800eafe:	e7b9      	b.n	800ea74 <_dtoa_r+0x27c>
 800eb00:	69eb      	ldr	r3, [r5, #28]
 800eb02:	9a03      	ldr	r2, [sp, #12]
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	9b08      	ldr	r3, [sp, #32]
 800eb08:	2b0e      	cmp	r3, #14
 800eb0a:	f200 80a8 	bhi.w	800ec5e <_dtoa_r+0x466>
 800eb0e:	2c00      	cmp	r4, #0
 800eb10:	f000 80a5 	beq.w	800ec5e <_dtoa_r+0x466>
 800eb14:	f1bb 0f00 	cmp.w	fp, #0
 800eb18:	dd34      	ble.n	800eb84 <_dtoa_r+0x38c>
 800eb1a:	4b9a      	ldr	r3, [pc, #616]	; (800ed84 <_dtoa_r+0x58c>)
 800eb1c:	f00b 020f 	and.w	r2, fp, #15
 800eb20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb24:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb28:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eb2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800eb30:	ea4f 142b 	mov.w	r4, fp, asr #4
 800eb34:	d016      	beq.n	800eb64 <_dtoa_r+0x36c>
 800eb36:	4b94      	ldr	r3, [pc, #592]	; (800ed88 <_dtoa_r+0x590>)
 800eb38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb40:	f7f1 fe66 	bl	8000810 <__aeabi_ddiv>
 800eb44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb48:	f004 040f 	and.w	r4, r4, #15
 800eb4c:	2703      	movs	r7, #3
 800eb4e:	4e8e      	ldr	r6, [pc, #568]	; (800ed88 <_dtoa_r+0x590>)
 800eb50:	b954      	cbnz	r4, 800eb68 <_dtoa_r+0x370>
 800eb52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb5a:	f7f1 fe59 	bl	8000810 <__aeabi_ddiv>
 800eb5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb62:	e029      	b.n	800ebb8 <_dtoa_r+0x3c0>
 800eb64:	2702      	movs	r7, #2
 800eb66:	e7f2      	b.n	800eb4e <_dtoa_r+0x356>
 800eb68:	07e1      	lsls	r1, r4, #31
 800eb6a:	d508      	bpl.n	800eb7e <_dtoa_r+0x386>
 800eb6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb70:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb74:	f7f1 fd22 	bl	80005bc <__aeabi_dmul>
 800eb78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb7c:	3701      	adds	r7, #1
 800eb7e:	1064      	asrs	r4, r4, #1
 800eb80:	3608      	adds	r6, #8
 800eb82:	e7e5      	b.n	800eb50 <_dtoa_r+0x358>
 800eb84:	f000 80a5 	beq.w	800ecd2 <_dtoa_r+0x4da>
 800eb88:	f1cb 0400 	rsb	r4, fp, #0
 800eb8c:	4b7d      	ldr	r3, [pc, #500]	; (800ed84 <_dtoa_r+0x58c>)
 800eb8e:	4e7e      	ldr	r6, [pc, #504]	; (800ed88 <_dtoa_r+0x590>)
 800eb90:	f004 020f 	and.w	r2, r4, #15
 800eb94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eba0:	f7f1 fd0c 	bl	80005bc <__aeabi_dmul>
 800eba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eba8:	1124      	asrs	r4, r4, #4
 800ebaa:	2300      	movs	r3, #0
 800ebac:	2702      	movs	r7, #2
 800ebae:	2c00      	cmp	r4, #0
 800ebb0:	f040 8084 	bne.w	800ecbc <_dtoa_r+0x4c4>
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d1d2      	bne.n	800eb5e <_dtoa_r+0x366>
 800ebb8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ebbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ebc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 8087 	beq.w	800ecd6 <_dtoa_r+0x4de>
 800ebc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ebcc:	4b6f      	ldr	r3, [pc, #444]	; (800ed8c <_dtoa_r+0x594>)
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f7f1 ff66 	bl	8000aa0 <__aeabi_dcmplt>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d07e      	beq.n	800ecd6 <_dtoa_r+0x4de>
 800ebd8:	9b08      	ldr	r3, [sp, #32]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d07b      	beq.n	800ecd6 <_dtoa_r+0x4de>
 800ebde:	9b06      	ldr	r3, [sp, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	dd38      	ble.n	800ec56 <_dtoa_r+0x45e>
 800ebe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ebe8:	4b69      	ldr	r3, [pc, #420]	; (800ed90 <_dtoa_r+0x598>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	f7f1 fce6 	bl	80005bc <__aeabi_dmul>
 800ebf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebf4:	9c06      	ldr	r4, [sp, #24]
 800ebf6:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800ebfa:	3701      	adds	r7, #1
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	f7f1 fc73 	bl	80004e8 <__aeabi_i2d>
 800ec02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec06:	f7f1 fcd9 	bl	80005bc <__aeabi_dmul>
 800ec0a:	4b62      	ldr	r3, [pc, #392]	; (800ed94 <_dtoa_r+0x59c>)
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f7f1 fb1f 	bl	8000250 <__adddf3>
 800ec12:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ec16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ec1a:	9611      	str	r6, [sp, #68]	; 0x44
 800ec1c:	2c00      	cmp	r4, #0
 800ec1e:	d15d      	bne.n	800ecdc <_dtoa_r+0x4e4>
 800ec20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec24:	4b5c      	ldr	r3, [pc, #368]	; (800ed98 <_dtoa_r+0x5a0>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	f7f1 fb10 	bl	800024c <__aeabi_dsub>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ec34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec36:	4633      	mov	r3, r6
 800ec38:	f7f1 ff50 	bl	8000adc <__aeabi_dcmpgt>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f040 8295 	bne.w	800f16c <_dtoa_r+0x974>
 800ec42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ec4c:	f7f1 ff28 	bl	8000aa0 <__aeabi_dcmplt>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	f040 8289 	bne.w	800f168 <_dtoa_r+0x970>
 800ec56:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ec5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ec5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f2c0 8151 	blt.w	800ef08 <_dtoa_r+0x710>
 800ec66:	f1bb 0f0e 	cmp.w	fp, #14
 800ec6a:	f300 814d 	bgt.w	800ef08 <_dtoa_r+0x710>
 800ec6e:	4b45      	ldr	r3, [pc, #276]	; (800ed84 <_dtoa_r+0x58c>)
 800ec70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ec74:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ec78:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ec7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f280 80da 	bge.w	800ee38 <_dtoa_r+0x640>
 800ec84:	9b08      	ldr	r3, [sp, #32]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f300 80d6 	bgt.w	800ee38 <_dtoa_r+0x640>
 800ec8c:	f040 826b 	bne.w	800f166 <_dtoa_r+0x96e>
 800ec90:	4b41      	ldr	r3, [pc, #260]	; (800ed98 <_dtoa_r+0x5a0>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec98:	f7f1 fc90 	bl	80005bc <__aeabi_dmul>
 800ec9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eca0:	f7f1 ff12 	bl	8000ac8 <__aeabi_dcmpge>
 800eca4:	9c08      	ldr	r4, [sp, #32]
 800eca6:	4626      	mov	r6, r4
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	f040 8241 	bne.w	800f130 <_dtoa_r+0x938>
 800ecae:	9f03      	ldr	r7, [sp, #12]
 800ecb0:	2331      	movs	r3, #49	; 0x31
 800ecb2:	f807 3b01 	strb.w	r3, [r7], #1
 800ecb6:	f10b 0b01 	add.w	fp, fp, #1
 800ecba:	e23d      	b.n	800f138 <_dtoa_r+0x940>
 800ecbc:	07e2      	lsls	r2, r4, #31
 800ecbe:	d505      	bpl.n	800eccc <_dtoa_r+0x4d4>
 800ecc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecc4:	f7f1 fc7a 	bl	80005bc <__aeabi_dmul>
 800ecc8:	3701      	adds	r7, #1
 800ecca:	2301      	movs	r3, #1
 800eccc:	1064      	asrs	r4, r4, #1
 800ecce:	3608      	adds	r6, #8
 800ecd0:	e76d      	b.n	800ebae <_dtoa_r+0x3b6>
 800ecd2:	2702      	movs	r7, #2
 800ecd4:	e770      	b.n	800ebb8 <_dtoa_r+0x3c0>
 800ecd6:	9c08      	ldr	r4, [sp, #32]
 800ecd8:	46d8      	mov	r8, fp
 800ecda:	e78f      	b.n	800ebfc <_dtoa_r+0x404>
 800ecdc:	9903      	ldr	r1, [sp, #12]
 800ecde:	4b29      	ldr	r3, [pc, #164]	; (800ed84 <_dtoa_r+0x58c>)
 800ece0:	4421      	add	r1, r4
 800ece2:	9112      	str	r1, [sp, #72]	; 0x48
 800ece4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ece6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ecee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ecf2:	2900      	cmp	r1, #0
 800ecf4:	d054      	beq.n	800eda0 <_dtoa_r+0x5a8>
 800ecf6:	4929      	ldr	r1, [pc, #164]	; (800ed9c <_dtoa_r+0x5a4>)
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	f7f1 fd89 	bl	8000810 <__aeabi_ddiv>
 800ecfe:	463b      	mov	r3, r7
 800ed00:	4632      	mov	r2, r6
 800ed02:	f7f1 faa3 	bl	800024c <__aeabi_dsub>
 800ed06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ed0a:	9f03      	ldr	r7, [sp, #12]
 800ed0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed10:	f7f1 ff04 	bl	8000b1c <__aeabi_d2iz>
 800ed14:	4604      	mov	r4, r0
 800ed16:	f7f1 fbe7 	bl	80004e8 <__aeabi_i2d>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed22:	f7f1 fa93 	bl	800024c <__aeabi_dsub>
 800ed26:	3430      	adds	r4, #48	; 0x30
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed30:	f807 4b01 	strb.w	r4, [r7], #1
 800ed34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed38:	f7f1 feb2 	bl	8000aa0 <__aeabi_dcmplt>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d173      	bne.n	800ee28 <_dtoa_r+0x630>
 800ed40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed44:	4911      	ldr	r1, [pc, #68]	; (800ed8c <_dtoa_r+0x594>)
 800ed46:	2000      	movs	r0, #0
 800ed48:	f7f1 fa80 	bl	800024c <__aeabi_dsub>
 800ed4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed50:	f7f1 fea6 	bl	8000aa0 <__aeabi_dcmplt>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	f040 80b6 	bne.w	800eec6 <_dtoa_r+0x6ce>
 800ed5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed5c:	429f      	cmp	r7, r3
 800ed5e:	f43f af7a 	beq.w	800ec56 <_dtoa_r+0x45e>
 800ed62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ed66:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <_dtoa_r+0x598>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f7f1 fc27 	bl	80005bc <__aeabi_dmul>
 800ed6e:	4b08      	ldr	r3, [pc, #32]	; (800ed90 <_dtoa_r+0x598>)
 800ed70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ed74:	2200      	movs	r2, #0
 800ed76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed7a:	f7f1 fc1f 	bl	80005bc <__aeabi_dmul>
 800ed7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed82:	e7c3      	b.n	800ed0c <_dtoa_r+0x514>
 800ed84:	08011a40 	.word	0x08011a40
 800ed88:	08011a18 	.word	0x08011a18
 800ed8c:	3ff00000 	.word	0x3ff00000
 800ed90:	40240000 	.word	0x40240000
 800ed94:	401c0000 	.word	0x401c0000
 800ed98:	40140000 	.word	0x40140000
 800ed9c:	3fe00000 	.word	0x3fe00000
 800eda0:	4630      	mov	r0, r6
 800eda2:	4639      	mov	r1, r7
 800eda4:	f7f1 fc0a 	bl	80005bc <__aeabi_dmul>
 800eda8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800edac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edae:	9c03      	ldr	r4, [sp, #12]
 800edb0:	9314      	str	r3, [sp, #80]	; 0x50
 800edb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800edb6:	f7f1 feb1 	bl	8000b1c <__aeabi_d2iz>
 800edba:	9015      	str	r0, [sp, #84]	; 0x54
 800edbc:	f7f1 fb94 	bl	80004e8 <__aeabi_i2d>
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800edc8:	f7f1 fa40 	bl	800024c <__aeabi_dsub>
 800edcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edce:	3330      	adds	r3, #48	; 0x30
 800edd0:	f804 3b01 	strb.w	r3, [r4], #1
 800edd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edd6:	429c      	cmp	r4, r3
 800edd8:	4606      	mov	r6, r0
 800edda:	460f      	mov	r7, r1
 800eddc:	f04f 0200 	mov.w	r2, #0
 800ede0:	d124      	bne.n	800ee2c <_dtoa_r+0x634>
 800ede2:	4bb0      	ldr	r3, [pc, #704]	; (800f0a4 <_dtoa_r+0x8ac>)
 800ede4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ede8:	f7f1 fa32 	bl	8000250 <__adddf3>
 800edec:	4602      	mov	r2, r0
 800edee:	460b      	mov	r3, r1
 800edf0:	4630      	mov	r0, r6
 800edf2:	4639      	mov	r1, r7
 800edf4:	f7f1 fe72 	bl	8000adc <__aeabi_dcmpgt>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d163      	bne.n	800eec4 <_dtoa_r+0x6cc>
 800edfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee00:	49a8      	ldr	r1, [pc, #672]	; (800f0a4 <_dtoa_r+0x8ac>)
 800ee02:	2000      	movs	r0, #0
 800ee04:	f7f1 fa22 	bl	800024c <__aeabi_dsub>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	4639      	mov	r1, r7
 800ee10:	f7f1 fe46 	bl	8000aa0 <__aeabi_dcmplt>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	f43f af1e 	beq.w	800ec56 <_dtoa_r+0x45e>
 800ee1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ee1c:	1e7b      	subs	r3, r7, #1
 800ee1e:	9314      	str	r3, [sp, #80]	; 0x50
 800ee20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ee24:	2b30      	cmp	r3, #48	; 0x30
 800ee26:	d0f8      	beq.n	800ee1a <_dtoa_r+0x622>
 800ee28:	46c3      	mov	fp, r8
 800ee2a:	e03b      	b.n	800eea4 <_dtoa_r+0x6ac>
 800ee2c:	4b9e      	ldr	r3, [pc, #632]	; (800f0a8 <_dtoa_r+0x8b0>)
 800ee2e:	f7f1 fbc5 	bl	80005bc <__aeabi_dmul>
 800ee32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee36:	e7bc      	b.n	800edb2 <_dtoa_r+0x5ba>
 800ee38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ee3c:	9f03      	ldr	r7, [sp, #12]
 800ee3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee42:	4640      	mov	r0, r8
 800ee44:	4649      	mov	r1, r9
 800ee46:	f7f1 fce3 	bl	8000810 <__aeabi_ddiv>
 800ee4a:	f7f1 fe67 	bl	8000b1c <__aeabi_d2iz>
 800ee4e:	4604      	mov	r4, r0
 800ee50:	f7f1 fb4a 	bl	80004e8 <__aeabi_i2d>
 800ee54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee58:	f7f1 fbb0 	bl	80005bc <__aeabi_dmul>
 800ee5c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4640      	mov	r0, r8
 800ee66:	4649      	mov	r1, r9
 800ee68:	f7f1 f9f0 	bl	800024c <__aeabi_dsub>
 800ee6c:	f807 6b01 	strb.w	r6, [r7], #1
 800ee70:	9e03      	ldr	r6, [sp, #12]
 800ee72:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ee76:	1bbe      	subs	r6, r7, r6
 800ee78:	45b4      	cmp	ip, r6
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	d136      	bne.n	800eeee <_dtoa_r+0x6f6>
 800ee80:	f7f1 f9e6 	bl	8000250 <__adddf3>
 800ee84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee88:	4680      	mov	r8, r0
 800ee8a:	4689      	mov	r9, r1
 800ee8c:	f7f1 fe26 	bl	8000adc <__aeabi_dcmpgt>
 800ee90:	bb58      	cbnz	r0, 800eeea <_dtoa_r+0x6f2>
 800ee92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee96:	4640      	mov	r0, r8
 800ee98:	4649      	mov	r1, r9
 800ee9a:	f7f1 fdf7 	bl	8000a8c <__aeabi_dcmpeq>
 800ee9e:	b108      	cbz	r0, 800eea4 <_dtoa_r+0x6ac>
 800eea0:	07e3      	lsls	r3, r4, #31
 800eea2:	d422      	bmi.n	800eeea <_dtoa_r+0x6f2>
 800eea4:	4651      	mov	r1, sl
 800eea6:	4628      	mov	r0, r5
 800eea8:	f000 ff0a 	bl	800fcc0 <_Bfree>
 800eeac:	2300      	movs	r3, #0
 800eeae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eeb0:	703b      	strb	r3, [r7, #0]
 800eeb2:	f10b 0301 	add.w	r3, fp, #1
 800eeb6:	6013      	str	r3, [r2, #0]
 800eeb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f43f ace9 	beq.w	800e892 <_dtoa_r+0x9a>
 800eec0:	601f      	str	r7, [r3, #0]
 800eec2:	e4e6      	b.n	800e892 <_dtoa_r+0x9a>
 800eec4:	4627      	mov	r7, r4
 800eec6:	463b      	mov	r3, r7
 800eec8:	461f      	mov	r7, r3
 800eeca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eece:	2a39      	cmp	r2, #57	; 0x39
 800eed0:	d107      	bne.n	800eee2 <_dtoa_r+0x6ea>
 800eed2:	9a03      	ldr	r2, [sp, #12]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d1f7      	bne.n	800eec8 <_dtoa_r+0x6d0>
 800eed8:	9903      	ldr	r1, [sp, #12]
 800eeda:	2230      	movs	r2, #48	; 0x30
 800eedc:	f108 0801 	add.w	r8, r8, #1
 800eee0:	700a      	strb	r2, [r1, #0]
 800eee2:	781a      	ldrb	r2, [r3, #0]
 800eee4:	3201      	adds	r2, #1
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	e79e      	b.n	800ee28 <_dtoa_r+0x630>
 800eeea:	46d8      	mov	r8, fp
 800eeec:	e7eb      	b.n	800eec6 <_dtoa_r+0x6ce>
 800eeee:	4b6e      	ldr	r3, [pc, #440]	; (800f0a8 <_dtoa_r+0x8b0>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	f7f1 fb63 	bl	80005bc <__aeabi_dmul>
 800eef6:	2200      	movs	r2, #0
 800eef8:	2300      	movs	r3, #0
 800eefa:	4680      	mov	r8, r0
 800eefc:	4689      	mov	r9, r1
 800eefe:	f7f1 fdc5 	bl	8000a8c <__aeabi_dcmpeq>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d09b      	beq.n	800ee3e <_dtoa_r+0x646>
 800ef06:	e7cd      	b.n	800eea4 <_dtoa_r+0x6ac>
 800ef08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef0a:	2a00      	cmp	r2, #0
 800ef0c:	f000 80c4 	beq.w	800f098 <_dtoa_r+0x8a0>
 800ef10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ef12:	2a01      	cmp	r2, #1
 800ef14:	f300 80a8 	bgt.w	800f068 <_dtoa_r+0x870>
 800ef18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ef1a:	2a00      	cmp	r2, #0
 800ef1c:	f000 80a0 	beq.w	800f060 <_dtoa_r+0x868>
 800ef20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef26:	464f      	mov	r7, r9
 800ef28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	441a      	add	r2, r3
 800ef2e:	4628      	mov	r0, r5
 800ef30:	4499      	add	r9, r3
 800ef32:	9209      	str	r2, [sp, #36]	; 0x24
 800ef34:	f000 ff7a 	bl	800fe2c <__i2b>
 800ef38:	4606      	mov	r6, r0
 800ef3a:	b15f      	cbz	r7, 800ef54 <_dtoa_r+0x75c>
 800ef3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	dd08      	ble.n	800ef54 <_dtoa_r+0x75c>
 800ef42:	42bb      	cmp	r3, r7
 800ef44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef46:	bfa8      	it	ge
 800ef48:	463b      	movge	r3, r7
 800ef4a:	eba9 0903 	sub.w	r9, r9, r3
 800ef4e:	1aff      	subs	r7, r7, r3
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	9309      	str	r3, [sp, #36]	; 0x24
 800ef54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef56:	b1f3      	cbz	r3, 800ef96 <_dtoa_r+0x79e>
 800ef58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f000 80a0 	beq.w	800f0a0 <_dtoa_r+0x8a8>
 800ef60:	2c00      	cmp	r4, #0
 800ef62:	dd10      	ble.n	800ef86 <_dtoa_r+0x78e>
 800ef64:	4631      	mov	r1, r6
 800ef66:	4622      	mov	r2, r4
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f001 f81f 	bl	800ffac <__pow5mult>
 800ef6e:	4652      	mov	r2, sl
 800ef70:	4601      	mov	r1, r0
 800ef72:	4606      	mov	r6, r0
 800ef74:	4628      	mov	r0, r5
 800ef76:	f000 ff6f 	bl	800fe58 <__multiply>
 800ef7a:	4651      	mov	r1, sl
 800ef7c:	4680      	mov	r8, r0
 800ef7e:	4628      	mov	r0, r5
 800ef80:	f000 fe9e 	bl	800fcc0 <_Bfree>
 800ef84:	46c2      	mov	sl, r8
 800ef86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef88:	1b1a      	subs	r2, r3, r4
 800ef8a:	d004      	beq.n	800ef96 <_dtoa_r+0x79e>
 800ef8c:	4651      	mov	r1, sl
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f001 f80c 	bl	800ffac <__pow5mult>
 800ef94:	4682      	mov	sl, r0
 800ef96:	2101      	movs	r1, #1
 800ef98:	4628      	mov	r0, r5
 800ef9a:	f000 ff47 	bl	800fe2c <__i2b>
 800ef9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	4604      	mov	r4, r0
 800efa4:	f340 8082 	ble.w	800f0ac <_dtoa_r+0x8b4>
 800efa8:	461a      	mov	r2, r3
 800efaa:	4601      	mov	r1, r0
 800efac:	4628      	mov	r0, r5
 800efae:	f000 fffd 	bl	800ffac <__pow5mult>
 800efb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	4604      	mov	r4, r0
 800efb8:	dd7b      	ble.n	800f0b2 <_dtoa_r+0x8ba>
 800efba:	f04f 0800 	mov.w	r8, #0
 800efbe:	6923      	ldr	r3, [r4, #16]
 800efc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800efc4:	6918      	ldr	r0, [r3, #16]
 800efc6:	f000 fee3 	bl	800fd90 <__hi0bits>
 800efca:	f1c0 0020 	rsb	r0, r0, #32
 800efce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd0:	4418      	add	r0, r3
 800efd2:	f010 001f 	ands.w	r0, r0, #31
 800efd6:	f000 8092 	beq.w	800f0fe <_dtoa_r+0x906>
 800efda:	f1c0 0320 	rsb	r3, r0, #32
 800efde:	2b04      	cmp	r3, #4
 800efe0:	f340 8085 	ble.w	800f0ee <_dtoa_r+0x8f6>
 800efe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe6:	f1c0 001c 	rsb	r0, r0, #28
 800efea:	4403      	add	r3, r0
 800efec:	4481      	add	r9, r0
 800efee:	4407      	add	r7, r0
 800eff0:	9309      	str	r3, [sp, #36]	; 0x24
 800eff2:	f1b9 0f00 	cmp.w	r9, #0
 800eff6:	dd05      	ble.n	800f004 <_dtoa_r+0x80c>
 800eff8:	4651      	mov	r1, sl
 800effa:	464a      	mov	r2, r9
 800effc:	4628      	mov	r0, r5
 800effe:	f001 f82f 	bl	8010060 <__lshift>
 800f002:	4682      	mov	sl, r0
 800f004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f006:	2b00      	cmp	r3, #0
 800f008:	dd05      	ble.n	800f016 <_dtoa_r+0x81e>
 800f00a:	4621      	mov	r1, r4
 800f00c:	461a      	mov	r2, r3
 800f00e:	4628      	mov	r0, r5
 800f010:	f001 f826 	bl	8010060 <__lshift>
 800f014:	4604      	mov	r4, r0
 800f016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d072      	beq.n	800f102 <_dtoa_r+0x90a>
 800f01c:	4621      	mov	r1, r4
 800f01e:	4650      	mov	r0, sl
 800f020:	f001 f88a 	bl	8010138 <__mcmp>
 800f024:	2800      	cmp	r0, #0
 800f026:	da6c      	bge.n	800f102 <_dtoa_r+0x90a>
 800f028:	2300      	movs	r3, #0
 800f02a:	4651      	mov	r1, sl
 800f02c:	220a      	movs	r2, #10
 800f02e:	4628      	mov	r0, r5
 800f030:	f000 fe68 	bl	800fd04 <__multadd>
 800f034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f036:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f03a:	4682      	mov	sl, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f000 81ad 	beq.w	800f39c <_dtoa_r+0xba4>
 800f042:	2300      	movs	r3, #0
 800f044:	4631      	mov	r1, r6
 800f046:	220a      	movs	r2, #10
 800f048:	4628      	mov	r0, r5
 800f04a:	f000 fe5b 	bl	800fd04 <__multadd>
 800f04e:	9b06      	ldr	r3, [sp, #24]
 800f050:	2b00      	cmp	r3, #0
 800f052:	4606      	mov	r6, r0
 800f054:	f300 8093 	bgt.w	800f17e <_dtoa_r+0x986>
 800f058:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	dc59      	bgt.n	800f112 <_dtoa_r+0x91a>
 800f05e:	e08e      	b.n	800f17e <_dtoa_r+0x986>
 800f060:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f062:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f066:	e75d      	b.n	800ef24 <_dtoa_r+0x72c>
 800f068:	9b08      	ldr	r3, [sp, #32]
 800f06a:	1e5c      	subs	r4, r3, #1
 800f06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f06e:	42a3      	cmp	r3, r4
 800f070:	bfbf      	itttt	lt
 800f072:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f074:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f076:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f078:	1ae3      	sublt	r3, r4, r3
 800f07a:	bfb4      	ite	lt
 800f07c:	18d2      	addlt	r2, r2, r3
 800f07e:	1b1c      	subge	r4, r3, r4
 800f080:	9b08      	ldr	r3, [sp, #32]
 800f082:	bfbc      	itt	lt
 800f084:	920e      	strlt	r2, [sp, #56]	; 0x38
 800f086:	2400      	movlt	r4, #0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	bfb5      	itete	lt
 800f08c:	eba9 0703 	sublt.w	r7, r9, r3
 800f090:	9b08      	ldrge	r3, [sp, #32]
 800f092:	2300      	movlt	r3, #0
 800f094:	464f      	movge	r7, r9
 800f096:	e747      	b.n	800ef28 <_dtoa_r+0x730>
 800f098:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f09a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f09c:	464f      	mov	r7, r9
 800f09e:	e74c      	b.n	800ef3a <_dtoa_r+0x742>
 800f0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0a2:	e773      	b.n	800ef8c <_dtoa_r+0x794>
 800f0a4:	3fe00000 	.word	0x3fe00000
 800f0a8:	40240000 	.word	0x40240000
 800f0ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	dc18      	bgt.n	800f0e4 <_dtoa_r+0x8ec>
 800f0b2:	9b04      	ldr	r3, [sp, #16]
 800f0b4:	b9b3      	cbnz	r3, 800f0e4 <_dtoa_r+0x8ec>
 800f0b6:	9b05      	ldr	r3, [sp, #20]
 800f0b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0bc:	b993      	cbnz	r3, 800f0e4 <_dtoa_r+0x8ec>
 800f0be:	9b05      	ldr	r3, [sp, #20]
 800f0c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f0c4:	0d1b      	lsrs	r3, r3, #20
 800f0c6:	051b      	lsls	r3, r3, #20
 800f0c8:	b17b      	cbz	r3, 800f0ea <_dtoa_r+0x8f2>
 800f0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	f109 0901 	add.w	r9, r9, #1
 800f0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d4:	f04f 0801 	mov.w	r8, #1
 800f0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f47f af6f 	bne.w	800efbe <_dtoa_r+0x7c6>
 800f0e0:	2001      	movs	r0, #1
 800f0e2:	e774      	b.n	800efce <_dtoa_r+0x7d6>
 800f0e4:	f04f 0800 	mov.w	r8, #0
 800f0e8:	e7f6      	b.n	800f0d8 <_dtoa_r+0x8e0>
 800f0ea:	4698      	mov	r8, r3
 800f0ec:	e7f4      	b.n	800f0d8 <_dtoa_r+0x8e0>
 800f0ee:	d080      	beq.n	800eff2 <_dtoa_r+0x7fa>
 800f0f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0f2:	331c      	adds	r3, #28
 800f0f4:	441a      	add	r2, r3
 800f0f6:	4499      	add	r9, r3
 800f0f8:	441f      	add	r7, r3
 800f0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800f0fc:	e779      	b.n	800eff2 <_dtoa_r+0x7fa>
 800f0fe:	4603      	mov	r3, r0
 800f100:	e7f6      	b.n	800f0f0 <_dtoa_r+0x8f8>
 800f102:	9b08      	ldr	r3, [sp, #32]
 800f104:	2b00      	cmp	r3, #0
 800f106:	dc34      	bgt.n	800f172 <_dtoa_r+0x97a>
 800f108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	dd31      	ble.n	800f172 <_dtoa_r+0x97a>
 800f10e:	9b08      	ldr	r3, [sp, #32]
 800f110:	9306      	str	r3, [sp, #24]
 800f112:	9b06      	ldr	r3, [sp, #24]
 800f114:	b963      	cbnz	r3, 800f130 <_dtoa_r+0x938>
 800f116:	4621      	mov	r1, r4
 800f118:	2205      	movs	r2, #5
 800f11a:	4628      	mov	r0, r5
 800f11c:	f000 fdf2 	bl	800fd04 <__multadd>
 800f120:	4601      	mov	r1, r0
 800f122:	4604      	mov	r4, r0
 800f124:	4650      	mov	r0, sl
 800f126:	f001 f807 	bl	8010138 <__mcmp>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	f73f adbf 	bgt.w	800ecae <_dtoa_r+0x4b6>
 800f130:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f132:	9f03      	ldr	r7, [sp, #12]
 800f134:	ea6f 0b03 	mvn.w	fp, r3
 800f138:	f04f 0800 	mov.w	r8, #0
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 fdbe 	bl	800fcc0 <_Bfree>
 800f144:	2e00      	cmp	r6, #0
 800f146:	f43f aead 	beq.w	800eea4 <_dtoa_r+0x6ac>
 800f14a:	f1b8 0f00 	cmp.w	r8, #0
 800f14e:	d005      	beq.n	800f15c <_dtoa_r+0x964>
 800f150:	45b0      	cmp	r8, r6
 800f152:	d003      	beq.n	800f15c <_dtoa_r+0x964>
 800f154:	4641      	mov	r1, r8
 800f156:	4628      	mov	r0, r5
 800f158:	f000 fdb2 	bl	800fcc0 <_Bfree>
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	f000 fdae 	bl	800fcc0 <_Bfree>
 800f164:	e69e      	b.n	800eea4 <_dtoa_r+0x6ac>
 800f166:	2400      	movs	r4, #0
 800f168:	4626      	mov	r6, r4
 800f16a:	e7e1      	b.n	800f130 <_dtoa_r+0x938>
 800f16c:	46c3      	mov	fp, r8
 800f16e:	4626      	mov	r6, r4
 800f170:	e59d      	b.n	800ecae <_dtoa_r+0x4b6>
 800f172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 80c8 	beq.w	800f30a <_dtoa_r+0xb12>
 800f17a:	9b08      	ldr	r3, [sp, #32]
 800f17c:	9306      	str	r3, [sp, #24]
 800f17e:	2f00      	cmp	r7, #0
 800f180:	dd05      	ble.n	800f18e <_dtoa_r+0x996>
 800f182:	4631      	mov	r1, r6
 800f184:	463a      	mov	r2, r7
 800f186:	4628      	mov	r0, r5
 800f188:	f000 ff6a 	bl	8010060 <__lshift>
 800f18c:	4606      	mov	r6, r0
 800f18e:	f1b8 0f00 	cmp.w	r8, #0
 800f192:	d05b      	beq.n	800f24c <_dtoa_r+0xa54>
 800f194:	6871      	ldr	r1, [r6, #4]
 800f196:	4628      	mov	r0, r5
 800f198:	f000 fd52 	bl	800fc40 <_Balloc>
 800f19c:	4607      	mov	r7, r0
 800f19e:	b928      	cbnz	r0, 800f1ac <_dtoa_r+0x9b4>
 800f1a0:	4b82      	ldr	r3, [pc, #520]	; (800f3ac <_dtoa_r+0xbb4>)
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f1a8:	f7ff bb3a 	b.w	800e820 <_dtoa_r+0x28>
 800f1ac:	6932      	ldr	r2, [r6, #16]
 800f1ae:	3202      	adds	r2, #2
 800f1b0:	0092      	lsls	r2, r2, #2
 800f1b2:	f106 010c 	add.w	r1, r6, #12
 800f1b6:	300c      	adds	r0, #12
 800f1b8:	f7ff fa4d 	bl	800e656 <memcpy>
 800f1bc:	2201      	movs	r2, #1
 800f1be:	4639      	mov	r1, r7
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f000 ff4d 	bl	8010060 <__lshift>
 800f1c6:	9b03      	ldr	r3, [sp, #12]
 800f1c8:	9a03      	ldr	r2, [sp, #12]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	9308      	str	r3, [sp, #32]
 800f1ce:	9b06      	ldr	r3, [sp, #24]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1d4:	9b04      	ldr	r3, [sp, #16]
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	46b0      	mov	r8, r6
 800f1dc:	930a      	str	r3, [sp, #40]	; 0x28
 800f1de:	4606      	mov	r6, r0
 800f1e0:	9b08      	ldr	r3, [sp, #32]
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	f7ff fa7d 	bl	800e6e8 <quorem>
 800f1ee:	4641      	mov	r1, r8
 800f1f0:	9006      	str	r0, [sp, #24]
 800f1f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f1f6:	4650      	mov	r0, sl
 800f1f8:	f000 ff9e 	bl	8010138 <__mcmp>
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	9009      	str	r0, [sp, #36]	; 0x24
 800f200:	4621      	mov	r1, r4
 800f202:	4628      	mov	r0, r5
 800f204:	f000 ffb4 	bl	8010170 <__mdiff>
 800f208:	68c2      	ldr	r2, [r0, #12]
 800f20a:	4607      	mov	r7, r0
 800f20c:	bb02      	cbnz	r2, 800f250 <_dtoa_r+0xa58>
 800f20e:	4601      	mov	r1, r0
 800f210:	4650      	mov	r0, sl
 800f212:	f000 ff91 	bl	8010138 <__mcmp>
 800f216:	4602      	mov	r2, r0
 800f218:	4639      	mov	r1, r7
 800f21a:	4628      	mov	r0, r5
 800f21c:	920c      	str	r2, [sp, #48]	; 0x30
 800f21e:	f000 fd4f 	bl	800fcc0 <_Bfree>
 800f222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f226:	9f08      	ldr	r7, [sp, #32]
 800f228:	ea43 0102 	orr.w	r1, r3, r2
 800f22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22e:	4319      	orrs	r1, r3
 800f230:	d110      	bne.n	800f254 <_dtoa_r+0xa5c>
 800f232:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f236:	d029      	beq.n	800f28c <_dtoa_r+0xa94>
 800f238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	dd02      	ble.n	800f244 <_dtoa_r+0xa4c>
 800f23e:	9b06      	ldr	r3, [sp, #24]
 800f240:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f244:	9b04      	ldr	r3, [sp, #16]
 800f246:	f883 9000 	strb.w	r9, [r3]
 800f24a:	e777      	b.n	800f13c <_dtoa_r+0x944>
 800f24c:	4630      	mov	r0, r6
 800f24e:	e7ba      	b.n	800f1c6 <_dtoa_r+0x9ce>
 800f250:	2201      	movs	r2, #1
 800f252:	e7e1      	b.n	800f218 <_dtoa_r+0xa20>
 800f254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f256:	2b00      	cmp	r3, #0
 800f258:	db04      	blt.n	800f264 <_dtoa_r+0xa6c>
 800f25a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f25c:	430b      	orrs	r3, r1
 800f25e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f260:	430b      	orrs	r3, r1
 800f262:	d120      	bne.n	800f2a6 <_dtoa_r+0xaae>
 800f264:	2a00      	cmp	r2, #0
 800f266:	dded      	ble.n	800f244 <_dtoa_r+0xa4c>
 800f268:	4651      	mov	r1, sl
 800f26a:	2201      	movs	r2, #1
 800f26c:	4628      	mov	r0, r5
 800f26e:	f000 fef7 	bl	8010060 <__lshift>
 800f272:	4621      	mov	r1, r4
 800f274:	4682      	mov	sl, r0
 800f276:	f000 ff5f 	bl	8010138 <__mcmp>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	dc03      	bgt.n	800f286 <_dtoa_r+0xa8e>
 800f27e:	d1e1      	bne.n	800f244 <_dtoa_r+0xa4c>
 800f280:	f019 0f01 	tst.w	r9, #1
 800f284:	d0de      	beq.n	800f244 <_dtoa_r+0xa4c>
 800f286:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f28a:	d1d8      	bne.n	800f23e <_dtoa_r+0xa46>
 800f28c:	9a04      	ldr	r2, [sp, #16]
 800f28e:	2339      	movs	r3, #57	; 0x39
 800f290:	7013      	strb	r3, [r2, #0]
 800f292:	463b      	mov	r3, r7
 800f294:	461f      	mov	r7, r3
 800f296:	3b01      	subs	r3, #1
 800f298:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f29c:	2a39      	cmp	r2, #57	; 0x39
 800f29e:	d06c      	beq.n	800f37a <_dtoa_r+0xb82>
 800f2a0:	3201      	adds	r2, #1
 800f2a2:	701a      	strb	r2, [r3, #0]
 800f2a4:	e74a      	b.n	800f13c <_dtoa_r+0x944>
 800f2a6:	2a00      	cmp	r2, #0
 800f2a8:	dd07      	ble.n	800f2ba <_dtoa_r+0xac2>
 800f2aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f2ae:	d0ed      	beq.n	800f28c <_dtoa_r+0xa94>
 800f2b0:	9a04      	ldr	r2, [sp, #16]
 800f2b2:	f109 0301 	add.w	r3, r9, #1
 800f2b6:	7013      	strb	r3, [r2, #0]
 800f2b8:	e740      	b.n	800f13c <_dtoa_r+0x944>
 800f2ba:	9b08      	ldr	r3, [sp, #32]
 800f2bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2be:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d043      	beq.n	800f34e <_dtoa_r+0xb56>
 800f2c6:	4651      	mov	r1, sl
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	220a      	movs	r2, #10
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	f000 fd19 	bl	800fd04 <__multadd>
 800f2d2:	45b0      	cmp	r8, r6
 800f2d4:	4682      	mov	sl, r0
 800f2d6:	f04f 0300 	mov.w	r3, #0
 800f2da:	f04f 020a 	mov.w	r2, #10
 800f2de:	4641      	mov	r1, r8
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	d107      	bne.n	800f2f4 <_dtoa_r+0xafc>
 800f2e4:	f000 fd0e 	bl	800fd04 <__multadd>
 800f2e8:	4680      	mov	r8, r0
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	9b08      	ldr	r3, [sp, #32]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	9308      	str	r3, [sp, #32]
 800f2f2:	e775      	b.n	800f1e0 <_dtoa_r+0x9e8>
 800f2f4:	f000 fd06 	bl	800fd04 <__multadd>
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4680      	mov	r8, r0
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	220a      	movs	r2, #10
 800f300:	4628      	mov	r0, r5
 800f302:	f000 fcff 	bl	800fd04 <__multadd>
 800f306:	4606      	mov	r6, r0
 800f308:	e7f0      	b.n	800f2ec <_dtoa_r+0xaf4>
 800f30a:	9b08      	ldr	r3, [sp, #32]
 800f30c:	9306      	str	r3, [sp, #24]
 800f30e:	9f03      	ldr	r7, [sp, #12]
 800f310:	4621      	mov	r1, r4
 800f312:	4650      	mov	r0, sl
 800f314:	f7ff f9e8 	bl	800e6e8 <quorem>
 800f318:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	f807 9b01 	strb.w	r9, [r7], #1
 800f322:	1afa      	subs	r2, r7, r3
 800f324:	9b06      	ldr	r3, [sp, #24]
 800f326:	4293      	cmp	r3, r2
 800f328:	dd07      	ble.n	800f33a <_dtoa_r+0xb42>
 800f32a:	4651      	mov	r1, sl
 800f32c:	2300      	movs	r3, #0
 800f32e:	220a      	movs	r2, #10
 800f330:	4628      	mov	r0, r5
 800f332:	f000 fce7 	bl	800fd04 <__multadd>
 800f336:	4682      	mov	sl, r0
 800f338:	e7ea      	b.n	800f310 <_dtoa_r+0xb18>
 800f33a:	9b06      	ldr	r3, [sp, #24]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	bfc8      	it	gt
 800f340:	461f      	movgt	r7, r3
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	bfd8      	it	le
 800f346:	2701      	movle	r7, #1
 800f348:	441f      	add	r7, r3
 800f34a:	f04f 0800 	mov.w	r8, #0
 800f34e:	4651      	mov	r1, sl
 800f350:	2201      	movs	r2, #1
 800f352:	4628      	mov	r0, r5
 800f354:	f000 fe84 	bl	8010060 <__lshift>
 800f358:	4621      	mov	r1, r4
 800f35a:	4682      	mov	sl, r0
 800f35c:	f000 feec 	bl	8010138 <__mcmp>
 800f360:	2800      	cmp	r0, #0
 800f362:	dc96      	bgt.n	800f292 <_dtoa_r+0xa9a>
 800f364:	d102      	bne.n	800f36c <_dtoa_r+0xb74>
 800f366:	f019 0f01 	tst.w	r9, #1
 800f36a:	d192      	bne.n	800f292 <_dtoa_r+0xa9a>
 800f36c:	463b      	mov	r3, r7
 800f36e:	461f      	mov	r7, r3
 800f370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f374:	2a30      	cmp	r2, #48	; 0x30
 800f376:	d0fa      	beq.n	800f36e <_dtoa_r+0xb76>
 800f378:	e6e0      	b.n	800f13c <_dtoa_r+0x944>
 800f37a:	9a03      	ldr	r2, [sp, #12]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d189      	bne.n	800f294 <_dtoa_r+0xa9c>
 800f380:	f10b 0b01 	add.w	fp, fp, #1
 800f384:	2331      	movs	r3, #49	; 0x31
 800f386:	e796      	b.n	800f2b6 <_dtoa_r+0xabe>
 800f388:	4b09      	ldr	r3, [pc, #36]	; (800f3b0 <_dtoa_r+0xbb8>)
 800f38a:	f7ff baa1 	b.w	800e8d0 <_dtoa_r+0xd8>
 800f38e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f390:	2b00      	cmp	r3, #0
 800f392:	f47f aa79 	bne.w	800e888 <_dtoa_r+0x90>
 800f396:	4b07      	ldr	r3, [pc, #28]	; (800f3b4 <_dtoa_r+0xbbc>)
 800f398:	f7ff ba9a 	b.w	800e8d0 <_dtoa_r+0xd8>
 800f39c:	9b06      	ldr	r3, [sp, #24]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	dcb5      	bgt.n	800f30e <_dtoa_r+0xb16>
 800f3a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3a4:	2b02      	cmp	r3, #2
 800f3a6:	f73f aeb4 	bgt.w	800f112 <_dtoa_r+0x91a>
 800f3aa:	e7b0      	b.n	800f30e <_dtoa_r+0xb16>
 800f3ac:	0801199c 	.word	0x0801199c
 800f3b0:	08011b34 	.word	0x08011b34
 800f3b4:	08011937 	.word	0x08011937

0800f3b8 <_findenv_r>:
 800f3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f42c <_findenv_r+0x74>
 800f3c0:	4607      	mov	r7, r0
 800f3c2:	4689      	mov	r9, r1
 800f3c4:	4616      	mov	r6, r2
 800f3c6:	f001 fabf 	bl	8010948 <__env_lock>
 800f3ca:	f8da 4000 	ldr.w	r4, [sl]
 800f3ce:	b134      	cbz	r4, 800f3de <_findenv_r+0x26>
 800f3d0:	464b      	mov	r3, r9
 800f3d2:	4698      	mov	r8, r3
 800f3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3d8:	b13a      	cbz	r2, 800f3ea <_findenv_r+0x32>
 800f3da:	2a3d      	cmp	r2, #61	; 0x3d
 800f3dc:	d1f9      	bne.n	800f3d2 <_findenv_r+0x1a>
 800f3de:	4638      	mov	r0, r7
 800f3e0:	f001 fab8 	bl	8010954 <__env_unlock>
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ea:	eba8 0809 	sub.w	r8, r8, r9
 800f3ee:	46a3      	mov	fp, r4
 800f3f0:	f854 0b04 	ldr.w	r0, [r4], #4
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d0f2      	beq.n	800f3de <_findenv_r+0x26>
 800f3f8:	4642      	mov	r2, r8
 800f3fa:	4649      	mov	r1, r9
 800f3fc:	f001 f93e 	bl	801067c <strncmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	d1f4      	bne.n	800f3ee <_findenv_r+0x36>
 800f404:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f408:	eb03 0508 	add.w	r5, r3, r8
 800f40c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f410:	2b3d      	cmp	r3, #61	; 0x3d
 800f412:	d1ec      	bne.n	800f3ee <_findenv_r+0x36>
 800f414:	f8da 3000 	ldr.w	r3, [sl]
 800f418:	ebab 0303 	sub.w	r3, fp, r3
 800f41c:	109b      	asrs	r3, r3, #2
 800f41e:	4638      	mov	r0, r7
 800f420:	6033      	str	r3, [r6, #0]
 800f422:	f001 fa97 	bl	8010954 <__env_unlock>
 800f426:	1c68      	adds	r0, r5, #1
 800f428:	e7dd      	b.n	800f3e6 <_findenv_r+0x2e>
 800f42a:	bf00      	nop
 800f42c:	20000000 	.word	0x20000000

0800f430 <_getenv_r>:
 800f430:	b507      	push	{r0, r1, r2, lr}
 800f432:	aa01      	add	r2, sp, #4
 800f434:	f7ff ffc0 	bl	800f3b8 <_findenv_r>
 800f438:	b003      	add	sp, #12
 800f43a:	f85d fb04 	ldr.w	pc, [sp], #4

0800f43e <__ssputs_r>:
 800f43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f442:	688e      	ldr	r6, [r1, #8]
 800f444:	461f      	mov	r7, r3
 800f446:	42be      	cmp	r6, r7
 800f448:	680b      	ldr	r3, [r1, #0]
 800f44a:	4682      	mov	sl, r0
 800f44c:	460c      	mov	r4, r1
 800f44e:	4690      	mov	r8, r2
 800f450:	d82c      	bhi.n	800f4ac <__ssputs_r+0x6e>
 800f452:	898a      	ldrh	r2, [r1, #12]
 800f454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f458:	d026      	beq.n	800f4a8 <__ssputs_r+0x6a>
 800f45a:	6965      	ldr	r5, [r4, #20]
 800f45c:	6909      	ldr	r1, [r1, #16]
 800f45e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f462:	eba3 0901 	sub.w	r9, r3, r1
 800f466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f46a:	1c7b      	adds	r3, r7, #1
 800f46c:	444b      	add	r3, r9
 800f46e:	106d      	asrs	r5, r5, #1
 800f470:	429d      	cmp	r5, r3
 800f472:	bf38      	it	cc
 800f474:	461d      	movcc	r5, r3
 800f476:	0553      	lsls	r3, r2, #21
 800f478:	d527      	bpl.n	800f4ca <__ssputs_r+0x8c>
 800f47a:	4629      	mov	r1, r5
 800f47c:	f000 faaa 	bl	800f9d4 <_malloc_r>
 800f480:	4606      	mov	r6, r0
 800f482:	b360      	cbz	r0, 800f4de <__ssputs_r+0xa0>
 800f484:	6921      	ldr	r1, [r4, #16]
 800f486:	464a      	mov	r2, r9
 800f488:	f7ff f8e5 	bl	800e656 <memcpy>
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f496:	81a3      	strh	r3, [r4, #12]
 800f498:	6126      	str	r6, [r4, #16]
 800f49a:	6165      	str	r5, [r4, #20]
 800f49c:	444e      	add	r6, r9
 800f49e:	eba5 0509 	sub.w	r5, r5, r9
 800f4a2:	6026      	str	r6, [r4, #0]
 800f4a4:	60a5      	str	r5, [r4, #8]
 800f4a6:	463e      	mov	r6, r7
 800f4a8:	42be      	cmp	r6, r7
 800f4aa:	d900      	bls.n	800f4ae <__ssputs_r+0x70>
 800f4ac:	463e      	mov	r6, r7
 800f4ae:	6820      	ldr	r0, [r4, #0]
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	4641      	mov	r1, r8
 800f4b4:	f001 f8f4 	bl	80106a0 <memmove>
 800f4b8:	68a3      	ldr	r3, [r4, #8]
 800f4ba:	1b9b      	subs	r3, r3, r6
 800f4bc:	60a3      	str	r3, [r4, #8]
 800f4be:	6823      	ldr	r3, [r4, #0]
 800f4c0:	4433      	add	r3, r6
 800f4c2:	6023      	str	r3, [r4, #0]
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	f000 ffb0 	bl	8010430 <_realloc_r>
 800f4d0:	4606      	mov	r6, r0
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d1e0      	bne.n	800f498 <__ssputs_r+0x5a>
 800f4d6:	6921      	ldr	r1, [r4, #16]
 800f4d8:	4650      	mov	r0, sl
 800f4da:	f001 fa41 	bl	8010960 <_free_r>
 800f4de:	230c      	movs	r3, #12
 800f4e0:	f8ca 3000 	str.w	r3, [sl]
 800f4e4:	89a3      	ldrh	r3, [r4, #12]
 800f4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ea:	81a3      	strh	r3, [r4, #12]
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4f0:	e7e9      	b.n	800f4c6 <__ssputs_r+0x88>
	...

0800f4f4 <_svfiprintf_r>:
 800f4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f8:	4698      	mov	r8, r3
 800f4fa:	898b      	ldrh	r3, [r1, #12]
 800f4fc:	061b      	lsls	r3, r3, #24
 800f4fe:	b09d      	sub	sp, #116	; 0x74
 800f500:	4607      	mov	r7, r0
 800f502:	460d      	mov	r5, r1
 800f504:	4614      	mov	r4, r2
 800f506:	d50e      	bpl.n	800f526 <_svfiprintf_r+0x32>
 800f508:	690b      	ldr	r3, [r1, #16]
 800f50a:	b963      	cbnz	r3, 800f526 <_svfiprintf_r+0x32>
 800f50c:	2140      	movs	r1, #64	; 0x40
 800f50e:	f000 fa61 	bl	800f9d4 <_malloc_r>
 800f512:	6028      	str	r0, [r5, #0]
 800f514:	6128      	str	r0, [r5, #16]
 800f516:	b920      	cbnz	r0, 800f522 <_svfiprintf_r+0x2e>
 800f518:	230c      	movs	r3, #12
 800f51a:	603b      	str	r3, [r7, #0]
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f520:	e0d0      	b.n	800f6c4 <_svfiprintf_r+0x1d0>
 800f522:	2340      	movs	r3, #64	; 0x40
 800f524:	616b      	str	r3, [r5, #20]
 800f526:	2300      	movs	r3, #0
 800f528:	9309      	str	r3, [sp, #36]	; 0x24
 800f52a:	2320      	movs	r3, #32
 800f52c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f530:	f8cd 800c 	str.w	r8, [sp, #12]
 800f534:	2330      	movs	r3, #48	; 0x30
 800f536:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f6dc <_svfiprintf_r+0x1e8>
 800f53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f53e:	f04f 0901 	mov.w	r9, #1
 800f542:	4623      	mov	r3, r4
 800f544:	469a      	mov	sl, r3
 800f546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f54a:	b10a      	cbz	r2, 800f550 <_svfiprintf_r+0x5c>
 800f54c:	2a25      	cmp	r2, #37	; 0x25
 800f54e:	d1f9      	bne.n	800f544 <_svfiprintf_r+0x50>
 800f550:	ebba 0b04 	subs.w	fp, sl, r4
 800f554:	d00b      	beq.n	800f56e <_svfiprintf_r+0x7a>
 800f556:	465b      	mov	r3, fp
 800f558:	4622      	mov	r2, r4
 800f55a:	4629      	mov	r1, r5
 800f55c:	4638      	mov	r0, r7
 800f55e:	f7ff ff6e 	bl	800f43e <__ssputs_r>
 800f562:	3001      	adds	r0, #1
 800f564:	f000 80a9 	beq.w	800f6ba <_svfiprintf_r+0x1c6>
 800f568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f56a:	445a      	add	r2, fp
 800f56c:	9209      	str	r2, [sp, #36]	; 0x24
 800f56e:	f89a 3000 	ldrb.w	r3, [sl]
 800f572:	2b00      	cmp	r3, #0
 800f574:	f000 80a1 	beq.w	800f6ba <_svfiprintf_r+0x1c6>
 800f578:	2300      	movs	r3, #0
 800f57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f57e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f582:	f10a 0a01 	add.w	sl, sl, #1
 800f586:	9304      	str	r3, [sp, #16]
 800f588:	9307      	str	r3, [sp, #28]
 800f58a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f58e:	931a      	str	r3, [sp, #104]	; 0x68
 800f590:	4654      	mov	r4, sl
 800f592:	2205      	movs	r2, #5
 800f594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f598:	4850      	ldr	r0, [pc, #320]	; (800f6dc <_svfiprintf_r+0x1e8>)
 800f59a:	f7f0 fdf1 	bl	8000180 <memchr>
 800f59e:	9a04      	ldr	r2, [sp, #16]
 800f5a0:	b9d8      	cbnz	r0, 800f5da <_svfiprintf_r+0xe6>
 800f5a2:	06d0      	lsls	r0, r2, #27
 800f5a4:	bf44      	itt	mi
 800f5a6:	2320      	movmi	r3, #32
 800f5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5ac:	0711      	lsls	r1, r2, #28
 800f5ae:	bf44      	itt	mi
 800f5b0:	232b      	movmi	r3, #43	; 0x2b
 800f5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f5bc:	d015      	beq.n	800f5ea <_svfiprintf_r+0xf6>
 800f5be:	9a07      	ldr	r2, [sp, #28]
 800f5c0:	4654      	mov	r4, sl
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	f04f 0c0a 	mov.w	ip, #10
 800f5c8:	4621      	mov	r1, r4
 800f5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5ce:	3b30      	subs	r3, #48	; 0x30
 800f5d0:	2b09      	cmp	r3, #9
 800f5d2:	d94d      	bls.n	800f670 <_svfiprintf_r+0x17c>
 800f5d4:	b1b0      	cbz	r0, 800f604 <_svfiprintf_r+0x110>
 800f5d6:	9207      	str	r2, [sp, #28]
 800f5d8:	e014      	b.n	800f604 <_svfiprintf_r+0x110>
 800f5da:	eba0 0308 	sub.w	r3, r0, r8
 800f5de:	fa09 f303 	lsl.w	r3, r9, r3
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	9304      	str	r3, [sp, #16]
 800f5e6:	46a2      	mov	sl, r4
 800f5e8:	e7d2      	b.n	800f590 <_svfiprintf_r+0x9c>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	1d19      	adds	r1, r3, #4
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	9103      	str	r1, [sp, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	bfbb      	ittet	lt
 800f5f6:	425b      	neglt	r3, r3
 800f5f8:	f042 0202 	orrlt.w	r2, r2, #2
 800f5fc:	9307      	strge	r3, [sp, #28]
 800f5fe:	9307      	strlt	r3, [sp, #28]
 800f600:	bfb8      	it	lt
 800f602:	9204      	strlt	r2, [sp, #16]
 800f604:	7823      	ldrb	r3, [r4, #0]
 800f606:	2b2e      	cmp	r3, #46	; 0x2e
 800f608:	d10c      	bne.n	800f624 <_svfiprintf_r+0x130>
 800f60a:	7863      	ldrb	r3, [r4, #1]
 800f60c:	2b2a      	cmp	r3, #42	; 0x2a
 800f60e:	d134      	bne.n	800f67a <_svfiprintf_r+0x186>
 800f610:	9b03      	ldr	r3, [sp, #12]
 800f612:	1d1a      	adds	r2, r3, #4
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	9203      	str	r2, [sp, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bfb8      	it	lt
 800f61c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f620:	3402      	adds	r4, #2
 800f622:	9305      	str	r3, [sp, #20]
 800f624:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800f6e0 <_svfiprintf_r+0x1ec>
 800f628:	7821      	ldrb	r1, [r4, #0]
 800f62a:	2203      	movs	r2, #3
 800f62c:	4650      	mov	r0, sl
 800f62e:	f7f0 fda7 	bl	8000180 <memchr>
 800f632:	b138      	cbz	r0, 800f644 <_svfiprintf_r+0x150>
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	eba0 000a 	sub.w	r0, r0, sl
 800f63a:	2240      	movs	r2, #64	; 0x40
 800f63c:	4082      	lsls	r2, r0
 800f63e:	4313      	orrs	r3, r2
 800f640:	3401      	adds	r4, #1
 800f642:	9304      	str	r3, [sp, #16]
 800f644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f648:	4826      	ldr	r0, [pc, #152]	; (800f6e4 <_svfiprintf_r+0x1f0>)
 800f64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f64e:	2206      	movs	r2, #6
 800f650:	f7f0 fd96 	bl	8000180 <memchr>
 800f654:	2800      	cmp	r0, #0
 800f656:	d038      	beq.n	800f6ca <_svfiprintf_r+0x1d6>
 800f658:	4b23      	ldr	r3, [pc, #140]	; (800f6e8 <_svfiprintf_r+0x1f4>)
 800f65a:	bb1b      	cbnz	r3, 800f6a4 <_svfiprintf_r+0x1b0>
 800f65c:	9b03      	ldr	r3, [sp, #12]
 800f65e:	3307      	adds	r3, #7
 800f660:	f023 0307 	bic.w	r3, r3, #7
 800f664:	3308      	adds	r3, #8
 800f666:	9303      	str	r3, [sp, #12]
 800f668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f66a:	4433      	add	r3, r6
 800f66c:	9309      	str	r3, [sp, #36]	; 0x24
 800f66e:	e768      	b.n	800f542 <_svfiprintf_r+0x4e>
 800f670:	fb0c 3202 	mla	r2, ip, r2, r3
 800f674:	460c      	mov	r4, r1
 800f676:	2001      	movs	r0, #1
 800f678:	e7a6      	b.n	800f5c8 <_svfiprintf_r+0xd4>
 800f67a:	2300      	movs	r3, #0
 800f67c:	3401      	adds	r4, #1
 800f67e:	9305      	str	r3, [sp, #20]
 800f680:	4619      	mov	r1, r3
 800f682:	f04f 0c0a 	mov.w	ip, #10
 800f686:	4620      	mov	r0, r4
 800f688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f68c:	3a30      	subs	r2, #48	; 0x30
 800f68e:	2a09      	cmp	r2, #9
 800f690:	d903      	bls.n	800f69a <_svfiprintf_r+0x1a6>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d0c6      	beq.n	800f624 <_svfiprintf_r+0x130>
 800f696:	9105      	str	r1, [sp, #20]
 800f698:	e7c4      	b.n	800f624 <_svfiprintf_r+0x130>
 800f69a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f69e:	4604      	mov	r4, r0
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e7f0      	b.n	800f686 <_svfiprintf_r+0x192>
 800f6a4:	ab03      	add	r3, sp, #12
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	462a      	mov	r2, r5
 800f6aa:	4b10      	ldr	r3, [pc, #64]	; (800f6ec <_svfiprintf_r+0x1f8>)
 800f6ac:	a904      	add	r1, sp, #16
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	f7fd fb94 	bl	800cddc <_printf_float>
 800f6b4:	1c42      	adds	r2, r0, #1
 800f6b6:	4606      	mov	r6, r0
 800f6b8:	d1d6      	bne.n	800f668 <_svfiprintf_r+0x174>
 800f6ba:	89ab      	ldrh	r3, [r5, #12]
 800f6bc:	065b      	lsls	r3, r3, #25
 800f6be:	f53f af2d 	bmi.w	800f51c <_svfiprintf_r+0x28>
 800f6c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6c4:	b01d      	add	sp, #116	; 0x74
 800f6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ca:	ab03      	add	r3, sp, #12
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	462a      	mov	r2, r5
 800f6d0:	4b06      	ldr	r3, [pc, #24]	; (800f6ec <_svfiprintf_r+0x1f8>)
 800f6d2:	a904      	add	r1, sp, #16
 800f6d4:	4638      	mov	r0, r7
 800f6d6:	f7fd fe1b 	bl	800d310 <_printf_i>
 800f6da:	e7eb      	b.n	800f6b4 <_svfiprintf_r+0x1c0>
 800f6dc:	080119ad 	.word	0x080119ad
 800f6e0:	080119b3 	.word	0x080119b3
 800f6e4:	080119b7 	.word	0x080119b7
 800f6e8:	0800cddd 	.word	0x0800cddd
 800f6ec:	0800f43f 	.word	0x0800f43f

0800f6f0 <__sfputc_r>:
 800f6f0:	6893      	ldr	r3, [r2, #8]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	b410      	push	{r4}
 800f6f8:	6093      	str	r3, [r2, #8]
 800f6fa:	da07      	bge.n	800f70c <__sfputc_r+0x1c>
 800f6fc:	6994      	ldr	r4, [r2, #24]
 800f6fe:	42a3      	cmp	r3, r4
 800f700:	db01      	blt.n	800f706 <__sfputc_r+0x16>
 800f702:	290a      	cmp	r1, #10
 800f704:	d102      	bne.n	800f70c <__sfputc_r+0x1c>
 800f706:	bc10      	pop	{r4}
 800f708:	f000 bec1 	b.w	801048e <__swbuf_r>
 800f70c:	6813      	ldr	r3, [r2, #0]
 800f70e:	1c58      	adds	r0, r3, #1
 800f710:	6010      	str	r0, [r2, #0]
 800f712:	7019      	strb	r1, [r3, #0]
 800f714:	4608      	mov	r0, r1
 800f716:	bc10      	pop	{r4}
 800f718:	4770      	bx	lr

0800f71a <__sfputs_r>:
 800f71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71c:	4606      	mov	r6, r0
 800f71e:	460f      	mov	r7, r1
 800f720:	4614      	mov	r4, r2
 800f722:	18d5      	adds	r5, r2, r3
 800f724:	42ac      	cmp	r4, r5
 800f726:	d101      	bne.n	800f72c <__sfputs_r+0x12>
 800f728:	2000      	movs	r0, #0
 800f72a:	e007      	b.n	800f73c <__sfputs_r+0x22>
 800f72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f730:	463a      	mov	r2, r7
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff ffdc 	bl	800f6f0 <__sfputc_r>
 800f738:	1c43      	adds	r3, r0, #1
 800f73a:	d1f3      	bne.n	800f724 <__sfputs_r+0xa>
 800f73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f740 <_vfiprintf_r>:
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	460d      	mov	r5, r1
 800f746:	b09d      	sub	sp, #116	; 0x74
 800f748:	4614      	mov	r4, r2
 800f74a:	4698      	mov	r8, r3
 800f74c:	4606      	mov	r6, r0
 800f74e:	b118      	cbz	r0, 800f758 <_vfiprintf_r+0x18>
 800f750:	6a03      	ldr	r3, [r0, #32]
 800f752:	b90b      	cbnz	r3, 800f758 <_vfiprintf_r+0x18>
 800f754:	f7fd ffbe 	bl	800d6d4 <__sinit>
 800f758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f75a:	07d9      	lsls	r1, r3, #31
 800f75c:	d405      	bmi.n	800f76a <_vfiprintf_r+0x2a>
 800f75e:	89ab      	ldrh	r3, [r5, #12]
 800f760:	059a      	lsls	r2, r3, #22
 800f762:	d402      	bmi.n	800f76a <_vfiprintf_r+0x2a>
 800f764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f766:	f7fe ff73 	bl	800e650 <__retarget_lock_acquire_recursive>
 800f76a:	89ab      	ldrh	r3, [r5, #12]
 800f76c:	071b      	lsls	r3, r3, #28
 800f76e:	d501      	bpl.n	800f774 <_vfiprintf_r+0x34>
 800f770:	692b      	ldr	r3, [r5, #16]
 800f772:	b99b      	cbnz	r3, 800f79c <_vfiprintf_r+0x5c>
 800f774:	4629      	mov	r1, r5
 800f776:	4630      	mov	r0, r6
 800f778:	f000 fec6 	bl	8010508 <__swsetup_r>
 800f77c:	b170      	cbz	r0, 800f79c <_vfiprintf_r+0x5c>
 800f77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f780:	07dc      	lsls	r4, r3, #31
 800f782:	d504      	bpl.n	800f78e <_vfiprintf_r+0x4e>
 800f784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f788:	b01d      	add	sp, #116	; 0x74
 800f78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	0598      	lsls	r0, r3, #22
 800f792:	d4f7      	bmi.n	800f784 <_vfiprintf_r+0x44>
 800f794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f796:	f7fe ff5d 	bl	800e654 <__retarget_lock_release_recursive>
 800f79a:	e7f3      	b.n	800f784 <_vfiprintf_r+0x44>
 800f79c:	2300      	movs	r3, #0
 800f79e:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a0:	2320      	movs	r3, #32
 800f7a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7aa:	2330      	movs	r3, #48	; 0x30
 800f7ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f960 <_vfiprintf_r+0x220>
 800f7b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7b4:	f04f 0901 	mov.w	r9, #1
 800f7b8:	4623      	mov	r3, r4
 800f7ba:	469a      	mov	sl, r3
 800f7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c0:	b10a      	cbz	r2, 800f7c6 <_vfiprintf_r+0x86>
 800f7c2:	2a25      	cmp	r2, #37	; 0x25
 800f7c4:	d1f9      	bne.n	800f7ba <_vfiprintf_r+0x7a>
 800f7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800f7ca:	d00b      	beq.n	800f7e4 <_vfiprintf_r+0xa4>
 800f7cc:	465b      	mov	r3, fp
 800f7ce:	4622      	mov	r2, r4
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7ff ffa1 	bl	800f71a <__sfputs_r>
 800f7d8:	3001      	adds	r0, #1
 800f7da:	f000 80a9 	beq.w	800f930 <_vfiprintf_r+0x1f0>
 800f7de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7e0:	445a      	add	r2, fp
 800f7e2:	9209      	str	r2, [sp, #36]	; 0x24
 800f7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 80a1 	beq.w	800f930 <_vfiprintf_r+0x1f0>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7f8:	f10a 0a01 	add.w	sl, sl, #1
 800f7fc:	9304      	str	r3, [sp, #16]
 800f7fe:	9307      	str	r3, [sp, #28]
 800f800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f804:	931a      	str	r3, [sp, #104]	; 0x68
 800f806:	4654      	mov	r4, sl
 800f808:	2205      	movs	r2, #5
 800f80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f80e:	4854      	ldr	r0, [pc, #336]	; (800f960 <_vfiprintf_r+0x220>)
 800f810:	f7f0 fcb6 	bl	8000180 <memchr>
 800f814:	9a04      	ldr	r2, [sp, #16]
 800f816:	b9d8      	cbnz	r0, 800f850 <_vfiprintf_r+0x110>
 800f818:	06d1      	lsls	r1, r2, #27
 800f81a:	bf44      	itt	mi
 800f81c:	2320      	movmi	r3, #32
 800f81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f822:	0713      	lsls	r3, r2, #28
 800f824:	bf44      	itt	mi
 800f826:	232b      	movmi	r3, #43	; 0x2b
 800f828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f82c:	f89a 3000 	ldrb.w	r3, [sl]
 800f830:	2b2a      	cmp	r3, #42	; 0x2a
 800f832:	d015      	beq.n	800f860 <_vfiprintf_r+0x120>
 800f834:	9a07      	ldr	r2, [sp, #28]
 800f836:	4654      	mov	r4, sl
 800f838:	2000      	movs	r0, #0
 800f83a:	f04f 0c0a 	mov.w	ip, #10
 800f83e:	4621      	mov	r1, r4
 800f840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f844:	3b30      	subs	r3, #48	; 0x30
 800f846:	2b09      	cmp	r3, #9
 800f848:	d94d      	bls.n	800f8e6 <_vfiprintf_r+0x1a6>
 800f84a:	b1b0      	cbz	r0, 800f87a <_vfiprintf_r+0x13a>
 800f84c:	9207      	str	r2, [sp, #28]
 800f84e:	e014      	b.n	800f87a <_vfiprintf_r+0x13a>
 800f850:	eba0 0308 	sub.w	r3, r0, r8
 800f854:	fa09 f303 	lsl.w	r3, r9, r3
 800f858:	4313      	orrs	r3, r2
 800f85a:	9304      	str	r3, [sp, #16]
 800f85c:	46a2      	mov	sl, r4
 800f85e:	e7d2      	b.n	800f806 <_vfiprintf_r+0xc6>
 800f860:	9b03      	ldr	r3, [sp, #12]
 800f862:	1d19      	adds	r1, r3, #4
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	9103      	str	r1, [sp, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	bfbb      	ittet	lt
 800f86c:	425b      	neglt	r3, r3
 800f86e:	f042 0202 	orrlt.w	r2, r2, #2
 800f872:	9307      	strge	r3, [sp, #28]
 800f874:	9307      	strlt	r3, [sp, #28]
 800f876:	bfb8      	it	lt
 800f878:	9204      	strlt	r2, [sp, #16]
 800f87a:	7823      	ldrb	r3, [r4, #0]
 800f87c:	2b2e      	cmp	r3, #46	; 0x2e
 800f87e:	d10c      	bne.n	800f89a <_vfiprintf_r+0x15a>
 800f880:	7863      	ldrb	r3, [r4, #1]
 800f882:	2b2a      	cmp	r3, #42	; 0x2a
 800f884:	d134      	bne.n	800f8f0 <_vfiprintf_r+0x1b0>
 800f886:	9b03      	ldr	r3, [sp, #12]
 800f888:	1d1a      	adds	r2, r3, #4
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	9203      	str	r2, [sp, #12]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	bfb8      	it	lt
 800f892:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f896:	3402      	adds	r4, #2
 800f898:	9305      	str	r3, [sp, #20]
 800f89a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f964 <_vfiprintf_r+0x224>
 800f89e:	7821      	ldrb	r1, [r4, #0]
 800f8a0:	2203      	movs	r2, #3
 800f8a2:	4650      	mov	r0, sl
 800f8a4:	f7f0 fc6c 	bl	8000180 <memchr>
 800f8a8:	b138      	cbz	r0, 800f8ba <_vfiprintf_r+0x17a>
 800f8aa:	9b04      	ldr	r3, [sp, #16]
 800f8ac:	eba0 000a 	sub.w	r0, r0, sl
 800f8b0:	2240      	movs	r2, #64	; 0x40
 800f8b2:	4082      	lsls	r2, r0
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	3401      	adds	r4, #1
 800f8b8:	9304      	str	r3, [sp, #16]
 800f8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8be:	482a      	ldr	r0, [pc, #168]	; (800f968 <_vfiprintf_r+0x228>)
 800f8c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8c4:	2206      	movs	r2, #6
 800f8c6:	f7f0 fc5b 	bl	8000180 <memchr>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d03f      	beq.n	800f94e <_vfiprintf_r+0x20e>
 800f8ce:	4b27      	ldr	r3, [pc, #156]	; (800f96c <_vfiprintf_r+0x22c>)
 800f8d0:	bb1b      	cbnz	r3, 800f91a <_vfiprintf_r+0x1da>
 800f8d2:	9b03      	ldr	r3, [sp, #12]
 800f8d4:	3307      	adds	r3, #7
 800f8d6:	f023 0307 	bic.w	r3, r3, #7
 800f8da:	3308      	adds	r3, #8
 800f8dc:	9303      	str	r3, [sp, #12]
 800f8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e0:	443b      	add	r3, r7
 800f8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8e4:	e768      	b.n	800f7b8 <_vfiprintf_r+0x78>
 800f8e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8ea:	460c      	mov	r4, r1
 800f8ec:	2001      	movs	r0, #1
 800f8ee:	e7a6      	b.n	800f83e <_vfiprintf_r+0xfe>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	3401      	adds	r4, #1
 800f8f4:	9305      	str	r3, [sp, #20]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	f04f 0c0a 	mov.w	ip, #10
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f902:	3a30      	subs	r2, #48	; 0x30
 800f904:	2a09      	cmp	r2, #9
 800f906:	d903      	bls.n	800f910 <_vfiprintf_r+0x1d0>
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d0c6      	beq.n	800f89a <_vfiprintf_r+0x15a>
 800f90c:	9105      	str	r1, [sp, #20]
 800f90e:	e7c4      	b.n	800f89a <_vfiprintf_r+0x15a>
 800f910:	fb0c 2101 	mla	r1, ip, r1, r2
 800f914:	4604      	mov	r4, r0
 800f916:	2301      	movs	r3, #1
 800f918:	e7f0      	b.n	800f8fc <_vfiprintf_r+0x1bc>
 800f91a:	ab03      	add	r3, sp, #12
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	462a      	mov	r2, r5
 800f920:	4b13      	ldr	r3, [pc, #76]	; (800f970 <_vfiprintf_r+0x230>)
 800f922:	a904      	add	r1, sp, #16
 800f924:	4630      	mov	r0, r6
 800f926:	f7fd fa59 	bl	800cddc <_printf_float>
 800f92a:	4607      	mov	r7, r0
 800f92c:	1c78      	adds	r0, r7, #1
 800f92e:	d1d6      	bne.n	800f8de <_vfiprintf_r+0x19e>
 800f930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f932:	07d9      	lsls	r1, r3, #31
 800f934:	d405      	bmi.n	800f942 <_vfiprintf_r+0x202>
 800f936:	89ab      	ldrh	r3, [r5, #12]
 800f938:	059a      	lsls	r2, r3, #22
 800f93a:	d402      	bmi.n	800f942 <_vfiprintf_r+0x202>
 800f93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f93e:	f7fe fe89 	bl	800e654 <__retarget_lock_release_recursive>
 800f942:	89ab      	ldrh	r3, [r5, #12]
 800f944:	065b      	lsls	r3, r3, #25
 800f946:	f53f af1d 	bmi.w	800f784 <_vfiprintf_r+0x44>
 800f94a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f94c:	e71c      	b.n	800f788 <_vfiprintf_r+0x48>
 800f94e:	ab03      	add	r3, sp, #12
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	462a      	mov	r2, r5
 800f954:	4b06      	ldr	r3, [pc, #24]	; (800f970 <_vfiprintf_r+0x230>)
 800f956:	a904      	add	r1, sp, #16
 800f958:	4630      	mov	r0, r6
 800f95a:	f7fd fcd9 	bl	800d310 <_printf_i>
 800f95e:	e7e4      	b.n	800f92a <_vfiprintf_r+0x1ea>
 800f960:	080119ad 	.word	0x080119ad
 800f964:	080119b3 	.word	0x080119b3
 800f968:	080119b7 	.word	0x080119b7
 800f96c:	0800cddd 	.word	0x0800cddd
 800f970:	0800f71b 	.word	0x0800f71b

0800f974 <malloc>:
 800f974:	4b02      	ldr	r3, [pc, #8]	; (800f980 <malloc+0xc>)
 800f976:	4601      	mov	r1, r0
 800f978:	6818      	ldr	r0, [r3, #0]
 800f97a:	f000 b82b 	b.w	800f9d4 <_malloc_r>
 800f97e:	bf00      	nop
 800f980:	20000088 	.word	0x20000088

0800f984 <free>:
 800f984:	4b02      	ldr	r3, [pc, #8]	; (800f990 <free+0xc>)
 800f986:	4601      	mov	r1, r0
 800f988:	6818      	ldr	r0, [r3, #0]
 800f98a:	f000 bfe9 	b.w	8010960 <_free_r>
 800f98e:	bf00      	nop
 800f990:	20000088 	.word	0x20000088

0800f994 <sbrk_aligned>:
 800f994:	b570      	push	{r4, r5, r6, lr}
 800f996:	4e0e      	ldr	r6, [pc, #56]	; (800f9d0 <sbrk_aligned+0x3c>)
 800f998:	460c      	mov	r4, r1
 800f99a:	6831      	ldr	r1, [r6, #0]
 800f99c:	4605      	mov	r5, r0
 800f99e:	b911      	cbnz	r1, 800f9a6 <sbrk_aligned+0x12>
 800f9a0:	f000 ff94 	bl	80108cc <_sbrk_r>
 800f9a4:	6030      	str	r0, [r6, #0]
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	f000 ff8f 	bl	80108cc <_sbrk_r>
 800f9ae:	1c43      	adds	r3, r0, #1
 800f9b0:	d00a      	beq.n	800f9c8 <sbrk_aligned+0x34>
 800f9b2:	1cc4      	adds	r4, r0, #3
 800f9b4:	f024 0403 	bic.w	r4, r4, #3
 800f9b8:	42a0      	cmp	r0, r4
 800f9ba:	d007      	beq.n	800f9cc <sbrk_aligned+0x38>
 800f9bc:	1a21      	subs	r1, r4, r0
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 ff84 	bl	80108cc <_sbrk_r>
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	d101      	bne.n	800f9cc <sbrk_aligned+0x38>
 800f9c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}
 800f9d0:	20000624 	.word	0x20000624

0800f9d4 <_malloc_r>:
 800f9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d8:	1ccd      	adds	r5, r1, #3
 800f9da:	f025 0503 	bic.w	r5, r5, #3
 800f9de:	3508      	adds	r5, #8
 800f9e0:	2d0c      	cmp	r5, #12
 800f9e2:	bf38      	it	cc
 800f9e4:	250c      	movcc	r5, #12
 800f9e6:	2d00      	cmp	r5, #0
 800f9e8:	4607      	mov	r7, r0
 800f9ea:	db01      	blt.n	800f9f0 <_malloc_r+0x1c>
 800f9ec:	42a9      	cmp	r1, r5
 800f9ee:	d905      	bls.n	800f9fc <_malloc_r+0x28>
 800f9f0:	230c      	movs	r3, #12
 800f9f2:	603b      	str	r3, [r7, #0]
 800f9f4:	2600      	movs	r6, #0
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fad0 <_malloc_r+0xfc>
 800fa00:	f000 f912 	bl	800fc28 <__malloc_lock>
 800fa04:	f8d8 3000 	ldr.w	r3, [r8]
 800fa08:	461c      	mov	r4, r3
 800fa0a:	bb5c      	cbnz	r4, 800fa64 <_malloc_r+0x90>
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	4638      	mov	r0, r7
 800fa10:	f7ff ffc0 	bl	800f994 <sbrk_aligned>
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	4604      	mov	r4, r0
 800fa18:	d155      	bne.n	800fac6 <_malloc_r+0xf2>
 800fa1a:	f8d8 4000 	ldr.w	r4, [r8]
 800fa1e:	4626      	mov	r6, r4
 800fa20:	2e00      	cmp	r6, #0
 800fa22:	d145      	bne.n	800fab0 <_malloc_r+0xdc>
 800fa24:	2c00      	cmp	r4, #0
 800fa26:	d048      	beq.n	800faba <_malloc_r+0xe6>
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	eb04 0903 	add.w	r9, r4, r3
 800fa32:	f000 ff4b 	bl	80108cc <_sbrk_r>
 800fa36:	4581      	cmp	r9, r0
 800fa38:	d13f      	bne.n	800faba <_malloc_r+0xe6>
 800fa3a:	6821      	ldr	r1, [r4, #0]
 800fa3c:	1a6d      	subs	r5, r5, r1
 800fa3e:	4629      	mov	r1, r5
 800fa40:	4638      	mov	r0, r7
 800fa42:	f7ff ffa7 	bl	800f994 <sbrk_aligned>
 800fa46:	3001      	adds	r0, #1
 800fa48:	d037      	beq.n	800faba <_malloc_r+0xe6>
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	442b      	add	r3, r5
 800fa4e:	6023      	str	r3, [r4, #0]
 800fa50:	f8d8 3000 	ldr.w	r3, [r8]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d038      	beq.n	800faca <_malloc_r+0xf6>
 800fa58:	685a      	ldr	r2, [r3, #4]
 800fa5a:	42a2      	cmp	r2, r4
 800fa5c:	d12b      	bne.n	800fab6 <_malloc_r+0xe2>
 800fa5e:	2200      	movs	r2, #0
 800fa60:	605a      	str	r2, [r3, #4]
 800fa62:	e00f      	b.n	800fa84 <_malloc_r+0xb0>
 800fa64:	6822      	ldr	r2, [r4, #0]
 800fa66:	1b52      	subs	r2, r2, r5
 800fa68:	d41f      	bmi.n	800faaa <_malloc_r+0xd6>
 800fa6a:	2a0b      	cmp	r2, #11
 800fa6c:	d917      	bls.n	800fa9e <_malloc_r+0xca>
 800fa6e:	1961      	adds	r1, r4, r5
 800fa70:	42a3      	cmp	r3, r4
 800fa72:	6025      	str	r5, [r4, #0]
 800fa74:	bf18      	it	ne
 800fa76:	6059      	strne	r1, [r3, #4]
 800fa78:	6863      	ldr	r3, [r4, #4]
 800fa7a:	bf08      	it	eq
 800fa7c:	f8c8 1000 	streq.w	r1, [r8]
 800fa80:	5162      	str	r2, [r4, r5]
 800fa82:	604b      	str	r3, [r1, #4]
 800fa84:	4638      	mov	r0, r7
 800fa86:	f104 060b 	add.w	r6, r4, #11
 800fa8a:	f000 f8d3 	bl	800fc34 <__malloc_unlock>
 800fa8e:	f026 0607 	bic.w	r6, r6, #7
 800fa92:	1d23      	adds	r3, r4, #4
 800fa94:	1af2      	subs	r2, r6, r3
 800fa96:	d0ae      	beq.n	800f9f6 <_malloc_r+0x22>
 800fa98:	1b9b      	subs	r3, r3, r6
 800fa9a:	50a3      	str	r3, [r4, r2]
 800fa9c:	e7ab      	b.n	800f9f6 <_malloc_r+0x22>
 800fa9e:	42a3      	cmp	r3, r4
 800faa0:	6862      	ldr	r2, [r4, #4]
 800faa2:	d1dd      	bne.n	800fa60 <_malloc_r+0x8c>
 800faa4:	f8c8 2000 	str.w	r2, [r8]
 800faa8:	e7ec      	b.n	800fa84 <_malloc_r+0xb0>
 800faaa:	4623      	mov	r3, r4
 800faac:	6864      	ldr	r4, [r4, #4]
 800faae:	e7ac      	b.n	800fa0a <_malloc_r+0x36>
 800fab0:	4634      	mov	r4, r6
 800fab2:	6876      	ldr	r6, [r6, #4]
 800fab4:	e7b4      	b.n	800fa20 <_malloc_r+0x4c>
 800fab6:	4613      	mov	r3, r2
 800fab8:	e7cc      	b.n	800fa54 <_malloc_r+0x80>
 800faba:	230c      	movs	r3, #12
 800fabc:	603b      	str	r3, [r7, #0]
 800fabe:	4638      	mov	r0, r7
 800fac0:	f000 f8b8 	bl	800fc34 <__malloc_unlock>
 800fac4:	e797      	b.n	800f9f6 <_malloc_r+0x22>
 800fac6:	6025      	str	r5, [r4, #0]
 800fac8:	e7dc      	b.n	800fa84 <_malloc_r+0xb0>
 800faca:	605b      	str	r3, [r3, #4]
 800facc:	deff      	udf	#255	; 0xff
 800face:	bf00      	nop
 800fad0:	20000620 	.word	0x20000620

0800fad4 <__sflush_r>:
 800fad4:	898a      	ldrh	r2, [r1, #12]
 800fad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fad8:	4605      	mov	r5, r0
 800fada:	0710      	lsls	r0, r2, #28
 800fadc:	460c      	mov	r4, r1
 800fade:	d457      	bmi.n	800fb90 <__sflush_r+0xbc>
 800fae0:	684b      	ldr	r3, [r1, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	dc04      	bgt.n	800faf0 <__sflush_r+0x1c>
 800fae6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dc01      	bgt.n	800faf0 <__sflush_r+0x1c>
 800faec:	2000      	movs	r0, #0
 800faee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	d0fa      	beq.n	800faec <__sflush_r+0x18>
 800faf6:	2300      	movs	r3, #0
 800faf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fafc:	682f      	ldr	r7, [r5, #0]
 800fafe:	6a21      	ldr	r1, [r4, #32]
 800fb00:	602b      	str	r3, [r5, #0]
 800fb02:	d032      	beq.n	800fb6a <__sflush_r+0x96>
 800fb04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	075a      	lsls	r2, r3, #29
 800fb0a:	d505      	bpl.n	800fb18 <__sflush_r+0x44>
 800fb0c:	6863      	ldr	r3, [r4, #4]
 800fb0e:	1ac0      	subs	r0, r0, r3
 800fb10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb12:	b10b      	cbz	r3, 800fb18 <__sflush_r+0x44>
 800fb14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb16:	1ac0      	subs	r0, r0, r3
 800fb18:	2300      	movs	r3, #0
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb1e:	6a21      	ldr	r1, [r4, #32]
 800fb20:	4628      	mov	r0, r5
 800fb22:	47b0      	blx	r6
 800fb24:	1c43      	adds	r3, r0, #1
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	d106      	bne.n	800fb38 <__sflush_r+0x64>
 800fb2a:	6829      	ldr	r1, [r5, #0]
 800fb2c:	291d      	cmp	r1, #29
 800fb2e:	d82b      	bhi.n	800fb88 <__sflush_r+0xb4>
 800fb30:	4a28      	ldr	r2, [pc, #160]	; (800fbd4 <__sflush_r+0x100>)
 800fb32:	410a      	asrs	r2, r1
 800fb34:	07d6      	lsls	r6, r2, #31
 800fb36:	d427      	bmi.n	800fb88 <__sflush_r+0xb4>
 800fb38:	2200      	movs	r2, #0
 800fb3a:	6062      	str	r2, [r4, #4]
 800fb3c:	04d9      	lsls	r1, r3, #19
 800fb3e:	6922      	ldr	r2, [r4, #16]
 800fb40:	6022      	str	r2, [r4, #0]
 800fb42:	d504      	bpl.n	800fb4e <__sflush_r+0x7a>
 800fb44:	1c42      	adds	r2, r0, #1
 800fb46:	d101      	bne.n	800fb4c <__sflush_r+0x78>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b903      	cbnz	r3, 800fb4e <__sflush_r+0x7a>
 800fb4c:	6560      	str	r0, [r4, #84]	; 0x54
 800fb4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb50:	602f      	str	r7, [r5, #0]
 800fb52:	2900      	cmp	r1, #0
 800fb54:	d0ca      	beq.n	800faec <__sflush_r+0x18>
 800fb56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb5a:	4299      	cmp	r1, r3
 800fb5c:	d002      	beq.n	800fb64 <__sflush_r+0x90>
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f000 fefe 	bl	8010960 <_free_r>
 800fb64:	2000      	movs	r0, #0
 800fb66:	6360      	str	r0, [r4, #52]	; 0x34
 800fb68:	e7c1      	b.n	800faee <__sflush_r+0x1a>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	47b0      	blx	r6
 800fb70:	1c41      	adds	r1, r0, #1
 800fb72:	d1c8      	bne.n	800fb06 <__sflush_r+0x32>
 800fb74:	682b      	ldr	r3, [r5, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d0c5      	beq.n	800fb06 <__sflush_r+0x32>
 800fb7a:	2b1d      	cmp	r3, #29
 800fb7c:	d001      	beq.n	800fb82 <__sflush_r+0xae>
 800fb7e:	2b16      	cmp	r3, #22
 800fb80:	d101      	bne.n	800fb86 <__sflush_r+0xb2>
 800fb82:	602f      	str	r7, [r5, #0]
 800fb84:	e7b2      	b.n	800faec <__sflush_r+0x18>
 800fb86:	89a3      	ldrh	r3, [r4, #12]
 800fb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	e7ae      	b.n	800faee <__sflush_r+0x1a>
 800fb90:	690f      	ldr	r7, [r1, #16]
 800fb92:	2f00      	cmp	r7, #0
 800fb94:	d0aa      	beq.n	800faec <__sflush_r+0x18>
 800fb96:	0793      	lsls	r3, r2, #30
 800fb98:	680e      	ldr	r6, [r1, #0]
 800fb9a:	bf08      	it	eq
 800fb9c:	694b      	ldreq	r3, [r1, #20]
 800fb9e:	600f      	str	r7, [r1, #0]
 800fba0:	bf18      	it	ne
 800fba2:	2300      	movne	r3, #0
 800fba4:	1bf6      	subs	r6, r6, r7
 800fba6:	608b      	str	r3, [r1, #8]
 800fba8:	2e00      	cmp	r6, #0
 800fbaa:	dd9f      	ble.n	800faec <__sflush_r+0x18>
 800fbac:	6a21      	ldr	r1, [r4, #32]
 800fbae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800fbb2:	4633      	mov	r3, r6
 800fbb4:	463a      	mov	r2, r7
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	47e0      	blx	ip
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	dc06      	bgt.n	800fbcc <__sflush_r+0xf8>
 800fbbe:	89a3      	ldrh	r3, [r4, #12]
 800fbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbc4:	81a3      	strh	r3, [r4, #12]
 800fbc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbca:	e790      	b.n	800faee <__sflush_r+0x1a>
 800fbcc:	4407      	add	r7, r0
 800fbce:	1a36      	subs	r6, r6, r0
 800fbd0:	e7ea      	b.n	800fba8 <__sflush_r+0xd4>
 800fbd2:	bf00      	nop
 800fbd4:	dfbffffe 	.word	0xdfbffffe

0800fbd8 <_fflush_r>:
 800fbd8:	b538      	push	{r3, r4, r5, lr}
 800fbda:	690b      	ldr	r3, [r1, #16]
 800fbdc:	4605      	mov	r5, r0
 800fbde:	460c      	mov	r4, r1
 800fbe0:	b913      	cbnz	r3, 800fbe8 <_fflush_r+0x10>
 800fbe2:	2500      	movs	r5, #0
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	bd38      	pop	{r3, r4, r5, pc}
 800fbe8:	b118      	cbz	r0, 800fbf2 <_fflush_r+0x1a>
 800fbea:	6a03      	ldr	r3, [r0, #32]
 800fbec:	b90b      	cbnz	r3, 800fbf2 <_fflush_r+0x1a>
 800fbee:	f7fd fd71 	bl	800d6d4 <__sinit>
 800fbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d0f3      	beq.n	800fbe2 <_fflush_r+0xa>
 800fbfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbfc:	07d0      	lsls	r0, r2, #31
 800fbfe:	d404      	bmi.n	800fc0a <_fflush_r+0x32>
 800fc00:	0599      	lsls	r1, r3, #22
 800fc02:	d402      	bmi.n	800fc0a <_fflush_r+0x32>
 800fc04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc06:	f7fe fd23 	bl	800e650 <__retarget_lock_acquire_recursive>
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	f7ff ff61 	bl	800fad4 <__sflush_r>
 800fc12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc14:	07da      	lsls	r2, r3, #31
 800fc16:	4605      	mov	r5, r0
 800fc18:	d4e4      	bmi.n	800fbe4 <_fflush_r+0xc>
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	059b      	lsls	r3, r3, #22
 800fc1e:	d4e1      	bmi.n	800fbe4 <_fflush_r+0xc>
 800fc20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc22:	f7fe fd17 	bl	800e654 <__retarget_lock_release_recursive>
 800fc26:	e7dd      	b.n	800fbe4 <_fflush_r+0xc>

0800fc28 <__malloc_lock>:
 800fc28:	4801      	ldr	r0, [pc, #4]	; (800fc30 <__malloc_lock+0x8>)
 800fc2a:	f7fe bd11 	b.w	800e650 <__retarget_lock_acquire_recursive>
 800fc2e:	bf00      	nop
 800fc30:	2000061d 	.word	0x2000061d

0800fc34 <__malloc_unlock>:
 800fc34:	4801      	ldr	r0, [pc, #4]	; (800fc3c <__malloc_unlock+0x8>)
 800fc36:	f7fe bd0d 	b.w	800e654 <__retarget_lock_release_recursive>
 800fc3a:	bf00      	nop
 800fc3c:	2000061d 	.word	0x2000061d

0800fc40 <_Balloc>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	69c6      	ldr	r6, [r0, #28]
 800fc44:	4604      	mov	r4, r0
 800fc46:	460d      	mov	r5, r1
 800fc48:	b976      	cbnz	r6, 800fc68 <_Balloc+0x28>
 800fc4a:	2010      	movs	r0, #16
 800fc4c:	f7ff fe92 	bl	800f974 <malloc>
 800fc50:	4602      	mov	r2, r0
 800fc52:	61e0      	str	r0, [r4, #28]
 800fc54:	b920      	cbnz	r0, 800fc60 <_Balloc+0x20>
 800fc56:	4b18      	ldr	r3, [pc, #96]	; (800fcb8 <_Balloc+0x78>)
 800fc58:	4818      	ldr	r0, [pc, #96]	; (800fcbc <_Balloc+0x7c>)
 800fc5a:	216b      	movs	r1, #107	; 0x6b
 800fc5c:	f7fe fd12 	bl	800e684 <__assert_func>
 800fc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc64:	6006      	str	r6, [r0, #0]
 800fc66:	60c6      	str	r6, [r0, #12]
 800fc68:	69e6      	ldr	r6, [r4, #28]
 800fc6a:	68f3      	ldr	r3, [r6, #12]
 800fc6c:	b183      	cbz	r3, 800fc90 <_Balloc+0x50>
 800fc6e:	69e3      	ldr	r3, [r4, #28]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc76:	b9b8      	cbnz	r0, 800fca8 <_Balloc+0x68>
 800fc78:	2101      	movs	r1, #1
 800fc7a:	fa01 f605 	lsl.w	r6, r1, r5
 800fc7e:	1d72      	adds	r2, r6, #5
 800fc80:	0092      	lsls	r2, r2, #2
 800fc82:	4620      	mov	r0, r4
 800fc84:	f000 fe4b 	bl	801091e <_calloc_r>
 800fc88:	b160      	cbz	r0, 800fca4 <_Balloc+0x64>
 800fc8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc8e:	e00e      	b.n	800fcae <_Balloc+0x6e>
 800fc90:	2221      	movs	r2, #33	; 0x21
 800fc92:	2104      	movs	r1, #4
 800fc94:	4620      	mov	r0, r4
 800fc96:	f000 fe42 	bl	801091e <_calloc_r>
 800fc9a:	69e3      	ldr	r3, [r4, #28]
 800fc9c:	60f0      	str	r0, [r6, #12]
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1e4      	bne.n	800fc6e <_Balloc+0x2e>
 800fca4:	2000      	movs	r0, #0
 800fca6:	bd70      	pop	{r4, r5, r6, pc}
 800fca8:	6802      	ldr	r2, [r0, #0]
 800fcaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcb4:	e7f7      	b.n	800fca6 <_Balloc+0x66>
 800fcb6:	bf00      	nop
 800fcb8:	0801167a 	.word	0x0801167a
 800fcbc:	080119be 	.word	0x080119be

0800fcc0 <_Bfree>:
 800fcc0:	b570      	push	{r4, r5, r6, lr}
 800fcc2:	69c6      	ldr	r6, [r0, #28]
 800fcc4:	4605      	mov	r5, r0
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	b976      	cbnz	r6, 800fce8 <_Bfree+0x28>
 800fcca:	2010      	movs	r0, #16
 800fccc:	f7ff fe52 	bl	800f974 <malloc>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	61e8      	str	r0, [r5, #28]
 800fcd4:	b920      	cbnz	r0, 800fce0 <_Bfree+0x20>
 800fcd6:	4b09      	ldr	r3, [pc, #36]	; (800fcfc <_Bfree+0x3c>)
 800fcd8:	4809      	ldr	r0, [pc, #36]	; (800fd00 <_Bfree+0x40>)
 800fcda:	218f      	movs	r1, #143	; 0x8f
 800fcdc:	f7fe fcd2 	bl	800e684 <__assert_func>
 800fce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fce4:	6006      	str	r6, [r0, #0]
 800fce6:	60c6      	str	r6, [r0, #12]
 800fce8:	b13c      	cbz	r4, 800fcfa <_Bfree+0x3a>
 800fcea:	69eb      	ldr	r3, [r5, #28]
 800fcec:	6862      	ldr	r2, [r4, #4]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcf4:	6021      	str	r1, [r4, #0]
 800fcf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	0801167a 	.word	0x0801167a
 800fd00:	080119be 	.word	0x080119be

0800fd04 <__multadd>:
 800fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd08:	690d      	ldr	r5, [r1, #16]
 800fd0a:	4607      	mov	r7, r0
 800fd0c:	460c      	mov	r4, r1
 800fd0e:	461e      	mov	r6, r3
 800fd10:	f101 0c14 	add.w	ip, r1, #20
 800fd14:	2000      	movs	r0, #0
 800fd16:	f8dc 3000 	ldr.w	r3, [ip]
 800fd1a:	b299      	uxth	r1, r3
 800fd1c:	fb02 6101 	mla	r1, r2, r1, r6
 800fd20:	0c1e      	lsrs	r6, r3, #16
 800fd22:	0c0b      	lsrs	r3, r1, #16
 800fd24:	fb02 3306 	mla	r3, r2, r6, r3
 800fd28:	b289      	uxth	r1, r1
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd30:	4285      	cmp	r5, r0
 800fd32:	f84c 1b04 	str.w	r1, [ip], #4
 800fd36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd3a:	dcec      	bgt.n	800fd16 <__multadd+0x12>
 800fd3c:	b30e      	cbz	r6, 800fd82 <__multadd+0x7e>
 800fd3e:	68a3      	ldr	r3, [r4, #8]
 800fd40:	42ab      	cmp	r3, r5
 800fd42:	dc19      	bgt.n	800fd78 <__multadd+0x74>
 800fd44:	6861      	ldr	r1, [r4, #4]
 800fd46:	4638      	mov	r0, r7
 800fd48:	3101      	adds	r1, #1
 800fd4a:	f7ff ff79 	bl	800fc40 <_Balloc>
 800fd4e:	4680      	mov	r8, r0
 800fd50:	b928      	cbnz	r0, 800fd5e <__multadd+0x5a>
 800fd52:	4602      	mov	r2, r0
 800fd54:	4b0c      	ldr	r3, [pc, #48]	; (800fd88 <__multadd+0x84>)
 800fd56:	480d      	ldr	r0, [pc, #52]	; (800fd8c <__multadd+0x88>)
 800fd58:	21ba      	movs	r1, #186	; 0xba
 800fd5a:	f7fe fc93 	bl	800e684 <__assert_func>
 800fd5e:	6922      	ldr	r2, [r4, #16]
 800fd60:	3202      	adds	r2, #2
 800fd62:	f104 010c 	add.w	r1, r4, #12
 800fd66:	0092      	lsls	r2, r2, #2
 800fd68:	300c      	adds	r0, #12
 800fd6a:	f7fe fc74 	bl	800e656 <memcpy>
 800fd6e:	4621      	mov	r1, r4
 800fd70:	4638      	mov	r0, r7
 800fd72:	f7ff ffa5 	bl	800fcc0 <_Bfree>
 800fd76:	4644      	mov	r4, r8
 800fd78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd7c:	3501      	adds	r5, #1
 800fd7e:	615e      	str	r6, [r3, #20]
 800fd80:	6125      	str	r5, [r4, #16]
 800fd82:	4620      	mov	r0, r4
 800fd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd88:	0801199c 	.word	0x0801199c
 800fd8c:	080119be 	.word	0x080119be

0800fd90 <__hi0bits>:
 800fd90:	0c02      	lsrs	r2, r0, #16
 800fd92:	0412      	lsls	r2, r2, #16
 800fd94:	4603      	mov	r3, r0
 800fd96:	b9ca      	cbnz	r2, 800fdcc <__hi0bits+0x3c>
 800fd98:	0403      	lsls	r3, r0, #16
 800fd9a:	2010      	movs	r0, #16
 800fd9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fda0:	bf04      	itt	eq
 800fda2:	021b      	lsleq	r3, r3, #8
 800fda4:	3008      	addeq	r0, #8
 800fda6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fdaa:	bf04      	itt	eq
 800fdac:	011b      	lsleq	r3, r3, #4
 800fdae:	3004      	addeq	r0, #4
 800fdb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fdb4:	bf04      	itt	eq
 800fdb6:	009b      	lsleq	r3, r3, #2
 800fdb8:	3002      	addeq	r0, #2
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	db05      	blt.n	800fdca <__hi0bits+0x3a>
 800fdbe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800fdc2:	f100 0001 	add.w	r0, r0, #1
 800fdc6:	bf08      	it	eq
 800fdc8:	2020      	moveq	r0, #32
 800fdca:	4770      	bx	lr
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e7e5      	b.n	800fd9c <__hi0bits+0xc>

0800fdd0 <__lo0bits>:
 800fdd0:	6803      	ldr	r3, [r0, #0]
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	f013 0007 	ands.w	r0, r3, #7
 800fdd8:	d00b      	beq.n	800fdf2 <__lo0bits+0x22>
 800fdda:	07d9      	lsls	r1, r3, #31
 800fddc:	d421      	bmi.n	800fe22 <__lo0bits+0x52>
 800fdde:	0798      	lsls	r0, r3, #30
 800fde0:	bf49      	itett	mi
 800fde2:	085b      	lsrmi	r3, r3, #1
 800fde4:	089b      	lsrpl	r3, r3, #2
 800fde6:	2001      	movmi	r0, #1
 800fde8:	6013      	strmi	r3, [r2, #0]
 800fdea:	bf5c      	itt	pl
 800fdec:	6013      	strpl	r3, [r2, #0]
 800fdee:	2002      	movpl	r0, #2
 800fdf0:	4770      	bx	lr
 800fdf2:	b299      	uxth	r1, r3
 800fdf4:	b909      	cbnz	r1, 800fdfa <__lo0bits+0x2a>
 800fdf6:	0c1b      	lsrs	r3, r3, #16
 800fdf8:	2010      	movs	r0, #16
 800fdfa:	b2d9      	uxtb	r1, r3
 800fdfc:	b909      	cbnz	r1, 800fe02 <__lo0bits+0x32>
 800fdfe:	3008      	adds	r0, #8
 800fe00:	0a1b      	lsrs	r3, r3, #8
 800fe02:	0719      	lsls	r1, r3, #28
 800fe04:	bf04      	itt	eq
 800fe06:	091b      	lsreq	r3, r3, #4
 800fe08:	3004      	addeq	r0, #4
 800fe0a:	0799      	lsls	r1, r3, #30
 800fe0c:	bf04      	itt	eq
 800fe0e:	089b      	lsreq	r3, r3, #2
 800fe10:	3002      	addeq	r0, #2
 800fe12:	07d9      	lsls	r1, r3, #31
 800fe14:	d403      	bmi.n	800fe1e <__lo0bits+0x4e>
 800fe16:	085b      	lsrs	r3, r3, #1
 800fe18:	f100 0001 	add.w	r0, r0, #1
 800fe1c:	d003      	beq.n	800fe26 <__lo0bits+0x56>
 800fe1e:	6013      	str	r3, [r2, #0]
 800fe20:	4770      	bx	lr
 800fe22:	2000      	movs	r0, #0
 800fe24:	4770      	bx	lr
 800fe26:	2020      	movs	r0, #32
 800fe28:	4770      	bx	lr
	...

0800fe2c <__i2b>:
 800fe2c:	b510      	push	{r4, lr}
 800fe2e:	460c      	mov	r4, r1
 800fe30:	2101      	movs	r1, #1
 800fe32:	f7ff ff05 	bl	800fc40 <_Balloc>
 800fe36:	4602      	mov	r2, r0
 800fe38:	b928      	cbnz	r0, 800fe46 <__i2b+0x1a>
 800fe3a:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <__i2b+0x24>)
 800fe3c:	4805      	ldr	r0, [pc, #20]	; (800fe54 <__i2b+0x28>)
 800fe3e:	f240 1145 	movw	r1, #325	; 0x145
 800fe42:	f7fe fc1f 	bl	800e684 <__assert_func>
 800fe46:	2301      	movs	r3, #1
 800fe48:	6144      	str	r4, [r0, #20]
 800fe4a:	6103      	str	r3, [r0, #16]
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	bf00      	nop
 800fe50:	0801199c 	.word	0x0801199c
 800fe54:	080119be 	.word	0x080119be

0800fe58 <__multiply>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	4691      	mov	r9, r2
 800fe5e:	690a      	ldr	r2, [r1, #16]
 800fe60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	bfb8      	it	lt
 800fe68:	460b      	movlt	r3, r1
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	bfbc      	itt	lt
 800fe6e:	464c      	movlt	r4, r9
 800fe70:	4699      	movlt	r9, r3
 800fe72:	6927      	ldr	r7, [r4, #16]
 800fe74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe78:	68a3      	ldr	r3, [r4, #8]
 800fe7a:	6861      	ldr	r1, [r4, #4]
 800fe7c:	eb07 060a 	add.w	r6, r7, sl
 800fe80:	42b3      	cmp	r3, r6
 800fe82:	b085      	sub	sp, #20
 800fe84:	bfb8      	it	lt
 800fe86:	3101      	addlt	r1, #1
 800fe88:	f7ff feda 	bl	800fc40 <_Balloc>
 800fe8c:	b930      	cbnz	r0, 800fe9c <__multiply+0x44>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	4b44      	ldr	r3, [pc, #272]	; (800ffa4 <__multiply+0x14c>)
 800fe92:	4845      	ldr	r0, [pc, #276]	; (800ffa8 <__multiply+0x150>)
 800fe94:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fe98:	f7fe fbf4 	bl	800e684 <__assert_func>
 800fe9c:	f100 0514 	add.w	r5, r0, #20
 800fea0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fea4:	462b      	mov	r3, r5
 800fea6:	2200      	movs	r2, #0
 800fea8:	4543      	cmp	r3, r8
 800feaa:	d321      	bcc.n	800fef0 <__multiply+0x98>
 800feac:	f104 0314 	add.w	r3, r4, #20
 800feb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800feb4:	f109 0314 	add.w	r3, r9, #20
 800feb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800febc:	9202      	str	r2, [sp, #8]
 800febe:	1b3a      	subs	r2, r7, r4
 800fec0:	3a15      	subs	r2, #21
 800fec2:	f022 0203 	bic.w	r2, r2, #3
 800fec6:	3204      	adds	r2, #4
 800fec8:	f104 0115 	add.w	r1, r4, #21
 800fecc:	428f      	cmp	r7, r1
 800fece:	bf38      	it	cc
 800fed0:	2204      	movcc	r2, #4
 800fed2:	9201      	str	r2, [sp, #4]
 800fed4:	9a02      	ldr	r2, [sp, #8]
 800fed6:	9303      	str	r3, [sp, #12]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d80c      	bhi.n	800fef6 <__multiply+0x9e>
 800fedc:	2e00      	cmp	r6, #0
 800fede:	dd03      	ble.n	800fee8 <__multiply+0x90>
 800fee0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d05a      	beq.n	800ff9e <__multiply+0x146>
 800fee8:	6106      	str	r6, [r0, #16]
 800feea:	b005      	add	sp, #20
 800feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef0:	f843 2b04 	str.w	r2, [r3], #4
 800fef4:	e7d8      	b.n	800fea8 <__multiply+0x50>
 800fef6:	f8b3 a000 	ldrh.w	sl, [r3]
 800fefa:	f1ba 0f00 	cmp.w	sl, #0
 800fefe:	d023      	beq.n	800ff48 <__multiply+0xf0>
 800ff00:	f104 0e14 	add.w	lr, r4, #20
 800ff04:	46a9      	mov	r9, r5
 800ff06:	f04f 0c00 	mov.w	ip, #0
 800ff0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ff0e:	f8d9 1000 	ldr.w	r1, [r9]
 800ff12:	fa1f fb82 	uxth.w	fp, r2
 800ff16:	b289      	uxth	r1, r1
 800ff18:	fb0a 110b 	mla	r1, sl, fp, r1
 800ff1c:	4461      	add	r1, ip
 800ff1e:	f8d9 c000 	ldr.w	ip, [r9]
 800ff22:	0c12      	lsrs	r2, r2, #16
 800ff24:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ff28:	fb0a c202 	mla	r2, sl, r2, ip
 800ff2c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ff30:	b289      	uxth	r1, r1
 800ff32:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ff36:	4577      	cmp	r7, lr
 800ff38:	f849 1b04 	str.w	r1, [r9], #4
 800ff3c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ff40:	d8e3      	bhi.n	800ff0a <__multiply+0xb2>
 800ff42:	9a01      	ldr	r2, [sp, #4]
 800ff44:	f845 c002 	str.w	ip, [r5, r2]
 800ff48:	9a03      	ldr	r2, [sp, #12]
 800ff4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ff4e:	3304      	adds	r3, #4
 800ff50:	f1b9 0f00 	cmp.w	r9, #0
 800ff54:	d021      	beq.n	800ff9a <__multiply+0x142>
 800ff56:	6829      	ldr	r1, [r5, #0]
 800ff58:	f104 0c14 	add.w	ip, r4, #20
 800ff5c:	46ae      	mov	lr, r5
 800ff5e:	f04f 0a00 	mov.w	sl, #0
 800ff62:	f8bc b000 	ldrh.w	fp, [ip]
 800ff66:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ff6a:	fb09 220b 	mla	r2, r9, fp, r2
 800ff6e:	4452      	add	r2, sl
 800ff70:	b289      	uxth	r1, r1
 800ff72:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ff76:	f84e 1b04 	str.w	r1, [lr], #4
 800ff7a:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ff7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff82:	f8be 1000 	ldrh.w	r1, [lr]
 800ff86:	fb09 110a 	mla	r1, r9, sl, r1
 800ff8a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ff8e:	4567      	cmp	r7, ip
 800ff90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff94:	d8e5      	bhi.n	800ff62 <__multiply+0x10a>
 800ff96:	9a01      	ldr	r2, [sp, #4]
 800ff98:	50a9      	str	r1, [r5, r2]
 800ff9a:	3504      	adds	r5, #4
 800ff9c:	e79a      	b.n	800fed4 <__multiply+0x7c>
 800ff9e:	3e01      	subs	r6, #1
 800ffa0:	e79c      	b.n	800fedc <__multiply+0x84>
 800ffa2:	bf00      	nop
 800ffa4:	0801199c 	.word	0x0801199c
 800ffa8:	080119be 	.word	0x080119be

0800ffac <__pow5mult>:
 800ffac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffb0:	4615      	mov	r5, r2
 800ffb2:	f012 0203 	ands.w	r2, r2, #3
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	460f      	mov	r7, r1
 800ffba:	d007      	beq.n	800ffcc <__pow5mult+0x20>
 800ffbc:	4c25      	ldr	r4, [pc, #148]	; (8010054 <__pow5mult+0xa8>)
 800ffbe:	3a01      	subs	r2, #1
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffc6:	f7ff fe9d 	bl	800fd04 <__multadd>
 800ffca:	4607      	mov	r7, r0
 800ffcc:	10ad      	asrs	r5, r5, #2
 800ffce:	d03d      	beq.n	801004c <__pow5mult+0xa0>
 800ffd0:	69f4      	ldr	r4, [r6, #28]
 800ffd2:	b97c      	cbnz	r4, 800fff4 <__pow5mult+0x48>
 800ffd4:	2010      	movs	r0, #16
 800ffd6:	f7ff fccd 	bl	800f974 <malloc>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	61f0      	str	r0, [r6, #28]
 800ffde:	b928      	cbnz	r0, 800ffec <__pow5mult+0x40>
 800ffe0:	4b1d      	ldr	r3, [pc, #116]	; (8010058 <__pow5mult+0xac>)
 800ffe2:	481e      	ldr	r0, [pc, #120]	; (801005c <__pow5mult+0xb0>)
 800ffe4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ffe8:	f7fe fb4c 	bl	800e684 <__assert_func>
 800ffec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fff0:	6004      	str	r4, [r0, #0]
 800fff2:	60c4      	str	r4, [r0, #12]
 800fff4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fffc:	b94c      	cbnz	r4, 8010012 <__pow5mult+0x66>
 800fffe:	f240 2171 	movw	r1, #625	; 0x271
 8010002:	4630      	mov	r0, r6
 8010004:	f7ff ff12 	bl	800fe2c <__i2b>
 8010008:	2300      	movs	r3, #0
 801000a:	f8c8 0008 	str.w	r0, [r8, #8]
 801000e:	4604      	mov	r4, r0
 8010010:	6003      	str	r3, [r0, #0]
 8010012:	f04f 0900 	mov.w	r9, #0
 8010016:	07eb      	lsls	r3, r5, #31
 8010018:	d50a      	bpl.n	8010030 <__pow5mult+0x84>
 801001a:	4639      	mov	r1, r7
 801001c:	4622      	mov	r2, r4
 801001e:	4630      	mov	r0, r6
 8010020:	f7ff ff1a 	bl	800fe58 <__multiply>
 8010024:	4639      	mov	r1, r7
 8010026:	4680      	mov	r8, r0
 8010028:	4630      	mov	r0, r6
 801002a:	f7ff fe49 	bl	800fcc0 <_Bfree>
 801002e:	4647      	mov	r7, r8
 8010030:	106d      	asrs	r5, r5, #1
 8010032:	d00b      	beq.n	801004c <__pow5mult+0xa0>
 8010034:	6820      	ldr	r0, [r4, #0]
 8010036:	b938      	cbnz	r0, 8010048 <__pow5mult+0x9c>
 8010038:	4622      	mov	r2, r4
 801003a:	4621      	mov	r1, r4
 801003c:	4630      	mov	r0, r6
 801003e:	f7ff ff0b 	bl	800fe58 <__multiply>
 8010042:	6020      	str	r0, [r4, #0]
 8010044:	f8c0 9000 	str.w	r9, [r0]
 8010048:	4604      	mov	r4, r0
 801004a:	e7e4      	b.n	8010016 <__pow5mult+0x6a>
 801004c:	4638      	mov	r0, r7
 801004e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010052:	bf00      	nop
 8010054:	08011b08 	.word	0x08011b08
 8010058:	0801167a 	.word	0x0801167a
 801005c:	080119be 	.word	0x080119be

08010060 <__lshift>:
 8010060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010064:	460c      	mov	r4, r1
 8010066:	6849      	ldr	r1, [r1, #4]
 8010068:	6923      	ldr	r3, [r4, #16]
 801006a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	4607      	mov	r7, r0
 8010072:	4691      	mov	r9, r2
 8010074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010078:	f108 0601 	add.w	r6, r8, #1
 801007c:	42b3      	cmp	r3, r6
 801007e:	db0b      	blt.n	8010098 <__lshift+0x38>
 8010080:	4638      	mov	r0, r7
 8010082:	f7ff fddd 	bl	800fc40 <_Balloc>
 8010086:	4605      	mov	r5, r0
 8010088:	b948      	cbnz	r0, 801009e <__lshift+0x3e>
 801008a:	4602      	mov	r2, r0
 801008c:	4b28      	ldr	r3, [pc, #160]	; (8010130 <__lshift+0xd0>)
 801008e:	4829      	ldr	r0, [pc, #164]	; (8010134 <__lshift+0xd4>)
 8010090:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010094:	f7fe faf6 	bl	800e684 <__assert_func>
 8010098:	3101      	adds	r1, #1
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	e7ee      	b.n	801007c <__lshift+0x1c>
 801009e:	2300      	movs	r3, #0
 80100a0:	f100 0114 	add.w	r1, r0, #20
 80100a4:	f100 0210 	add.w	r2, r0, #16
 80100a8:	4618      	mov	r0, r3
 80100aa:	4553      	cmp	r3, sl
 80100ac:	db33      	blt.n	8010116 <__lshift+0xb6>
 80100ae:	6920      	ldr	r0, [r4, #16]
 80100b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100b4:	f104 0314 	add.w	r3, r4, #20
 80100b8:	f019 091f 	ands.w	r9, r9, #31
 80100bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100c4:	d02b      	beq.n	801011e <__lshift+0xbe>
 80100c6:	f1c9 0e20 	rsb	lr, r9, #32
 80100ca:	468a      	mov	sl, r1
 80100cc:	2200      	movs	r2, #0
 80100ce:	6818      	ldr	r0, [r3, #0]
 80100d0:	fa00 f009 	lsl.w	r0, r0, r9
 80100d4:	4310      	orrs	r0, r2
 80100d6:	f84a 0b04 	str.w	r0, [sl], #4
 80100da:	f853 2b04 	ldr.w	r2, [r3], #4
 80100de:	459c      	cmp	ip, r3
 80100e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80100e4:	d8f3      	bhi.n	80100ce <__lshift+0x6e>
 80100e6:	ebac 0304 	sub.w	r3, ip, r4
 80100ea:	3b15      	subs	r3, #21
 80100ec:	f023 0303 	bic.w	r3, r3, #3
 80100f0:	3304      	adds	r3, #4
 80100f2:	f104 0015 	add.w	r0, r4, #21
 80100f6:	4584      	cmp	ip, r0
 80100f8:	bf38      	it	cc
 80100fa:	2304      	movcc	r3, #4
 80100fc:	50ca      	str	r2, [r1, r3]
 80100fe:	b10a      	cbz	r2, 8010104 <__lshift+0xa4>
 8010100:	f108 0602 	add.w	r6, r8, #2
 8010104:	3e01      	subs	r6, #1
 8010106:	4638      	mov	r0, r7
 8010108:	612e      	str	r6, [r5, #16]
 801010a:	4621      	mov	r1, r4
 801010c:	f7ff fdd8 	bl	800fcc0 <_Bfree>
 8010110:	4628      	mov	r0, r5
 8010112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010116:	f842 0f04 	str.w	r0, [r2, #4]!
 801011a:	3301      	adds	r3, #1
 801011c:	e7c5      	b.n	80100aa <__lshift+0x4a>
 801011e:	3904      	subs	r1, #4
 8010120:	f853 2b04 	ldr.w	r2, [r3], #4
 8010124:	f841 2f04 	str.w	r2, [r1, #4]!
 8010128:	459c      	cmp	ip, r3
 801012a:	d8f9      	bhi.n	8010120 <__lshift+0xc0>
 801012c:	e7ea      	b.n	8010104 <__lshift+0xa4>
 801012e:	bf00      	nop
 8010130:	0801199c 	.word	0x0801199c
 8010134:	080119be 	.word	0x080119be

08010138 <__mcmp>:
 8010138:	690a      	ldr	r2, [r1, #16]
 801013a:	4603      	mov	r3, r0
 801013c:	6900      	ldr	r0, [r0, #16]
 801013e:	1a80      	subs	r0, r0, r2
 8010140:	b530      	push	{r4, r5, lr}
 8010142:	d10d      	bne.n	8010160 <__mcmp+0x28>
 8010144:	3314      	adds	r3, #20
 8010146:	3114      	adds	r1, #20
 8010148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801014c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010158:	4295      	cmp	r5, r2
 801015a:	d002      	beq.n	8010162 <__mcmp+0x2a>
 801015c:	d304      	bcc.n	8010168 <__mcmp+0x30>
 801015e:	2001      	movs	r0, #1
 8010160:	bd30      	pop	{r4, r5, pc}
 8010162:	42a3      	cmp	r3, r4
 8010164:	d3f4      	bcc.n	8010150 <__mcmp+0x18>
 8010166:	e7fb      	b.n	8010160 <__mcmp+0x28>
 8010168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801016c:	e7f8      	b.n	8010160 <__mcmp+0x28>
	...

08010170 <__mdiff>:
 8010170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	460d      	mov	r5, r1
 8010176:	4607      	mov	r7, r0
 8010178:	4611      	mov	r1, r2
 801017a:	4628      	mov	r0, r5
 801017c:	4614      	mov	r4, r2
 801017e:	f7ff ffdb 	bl	8010138 <__mcmp>
 8010182:	1e06      	subs	r6, r0, #0
 8010184:	d111      	bne.n	80101aa <__mdiff+0x3a>
 8010186:	4631      	mov	r1, r6
 8010188:	4638      	mov	r0, r7
 801018a:	f7ff fd59 	bl	800fc40 <_Balloc>
 801018e:	4602      	mov	r2, r0
 8010190:	b928      	cbnz	r0, 801019e <__mdiff+0x2e>
 8010192:	4b39      	ldr	r3, [pc, #228]	; (8010278 <__mdiff+0x108>)
 8010194:	f240 2137 	movw	r1, #567	; 0x237
 8010198:	4838      	ldr	r0, [pc, #224]	; (801027c <__mdiff+0x10c>)
 801019a:	f7fe fa73 	bl	800e684 <__assert_func>
 801019e:	2301      	movs	r3, #1
 80101a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80101a4:	4610      	mov	r0, r2
 80101a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101aa:	bfa4      	itt	ge
 80101ac:	4623      	movge	r3, r4
 80101ae:	462c      	movge	r4, r5
 80101b0:	4638      	mov	r0, r7
 80101b2:	6861      	ldr	r1, [r4, #4]
 80101b4:	bfa6      	itte	ge
 80101b6:	461d      	movge	r5, r3
 80101b8:	2600      	movge	r6, #0
 80101ba:	2601      	movlt	r6, #1
 80101bc:	f7ff fd40 	bl	800fc40 <_Balloc>
 80101c0:	4602      	mov	r2, r0
 80101c2:	b918      	cbnz	r0, 80101cc <__mdiff+0x5c>
 80101c4:	4b2c      	ldr	r3, [pc, #176]	; (8010278 <__mdiff+0x108>)
 80101c6:	f240 2145 	movw	r1, #581	; 0x245
 80101ca:	e7e5      	b.n	8010198 <__mdiff+0x28>
 80101cc:	6927      	ldr	r7, [r4, #16]
 80101ce:	60c6      	str	r6, [r0, #12]
 80101d0:	692e      	ldr	r6, [r5, #16]
 80101d2:	f104 0014 	add.w	r0, r4, #20
 80101d6:	f105 0914 	add.w	r9, r5, #20
 80101da:	f102 0e14 	add.w	lr, r2, #20
 80101de:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80101e2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80101e6:	3410      	adds	r4, #16
 80101e8:	46f2      	mov	sl, lr
 80101ea:	2100      	movs	r1, #0
 80101ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80101f0:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80101f4:	fa11 f88b 	uxtah	r8, r1, fp
 80101f8:	b299      	uxth	r1, r3
 80101fa:	0c1b      	lsrs	r3, r3, #16
 80101fc:	eba8 0801 	sub.w	r8, r8, r1
 8010200:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010204:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010208:	fa1f f888 	uxth.w	r8, r8
 801020c:	1419      	asrs	r1, r3, #16
 801020e:	454e      	cmp	r6, r9
 8010210:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010214:	f84a 3b04 	str.w	r3, [sl], #4
 8010218:	d8e8      	bhi.n	80101ec <__mdiff+0x7c>
 801021a:	1b73      	subs	r3, r6, r5
 801021c:	3b15      	subs	r3, #21
 801021e:	f023 0303 	bic.w	r3, r3, #3
 8010222:	3304      	adds	r3, #4
 8010224:	3515      	adds	r5, #21
 8010226:	42ae      	cmp	r6, r5
 8010228:	bf38      	it	cc
 801022a:	2304      	movcc	r3, #4
 801022c:	4418      	add	r0, r3
 801022e:	4473      	add	r3, lr
 8010230:	469e      	mov	lr, r3
 8010232:	4606      	mov	r6, r0
 8010234:	4566      	cmp	r6, ip
 8010236:	d30e      	bcc.n	8010256 <__mdiff+0xe6>
 8010238:	f10c 0103 	add.w	r1, ip, #3
 801023c:	1a09      	subs	r1, r1, r0
 801023e:	f021 0103 	bic.w	r1, r1, #3
 8010242:	3803      	subs	r0, #3
 8010244:	4584      	cmp	ip, r0
 8010246:	bf38      	it	cc
 8010248:	2100      	movcc	r1, #0
 801024a:	440b      	add	r3, r1
 801024c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010250:	b179      	cbz	r1, 8010272 <__mdiff+0x102>
 8010252:	6117      	str	r7, [r2, #16]
 8010254:	e7a6      	b.n	80101a4 <__mdiff+0x34>
 8010256:	f856 8b04 	ldr.w	r8, [r6], #4
 801025a:	fa11 f488 	uxtah	r4, r1, r8
 801025e:	1425      	asrs	r5, r4, #16
 8010260:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8010264:	b2a4      	uxth	r4, r4
 8010266:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801026a:	f84e 4b04 	str.w	r4, [lr], #4
 801026e:	1429      	asrs	r1, r5, #16
 8010270:	e7e0      	b.n	8010234 <__mdiff+0xc4>
 8010272:	3f01      	subs	r7, #1
 8010274:	e7ea      	b.n	801024c <__mdiff+0xdc>
 8010276:	bf00      	nop
 8010278:	0801199c 	.word	0x0801199c
 801027c:	080119be 	.word	0x080119be

08010280 <__d2b>:
 8010280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010282:	2101      	movs	r1, #1
 8010284:	9e08      	ldr	r6, [sp, #32]
 8010286:	4617      	mov	r7, r2
 8010288:	461c      	mov	r4, r3
 801028a:	f7ff fcd9 	bl	800fc40 <_Balloc>
 801028e:	4605      	mov	r5, r0
 8010290:	b930      	cbnz	r0, 80102a0 <__d2b+0x20>
 8010292:	4602      	mov	r2, r0
 8010294:	4b23      	ldr	r3, [pc, #140]	; (8010324 <__d2b+0xa4>)
 8010296:	4824      	ldr	r0, [pc, #144]	; (8010328 <__d2b+0xa8>)
 8010298:	f240 310f 	movw	r1, #783	; 0x30f
 801029c:	f7fe f9f2 	bl	800e684 <__assert_func>
 80102a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80102a4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80102a8:	bb24      	cbnz	r4, 80102f4 <__d2b+0x74>
 80102aa:	2f00      	cmp	r7, #0
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	d026      	beq.n	80102fe <__d2b+0x7e>
 80102b0:	4668      	mov	r0, sp
 80102b2:	9700      	str	r7, [sp, #0]
 80102b4:	f7ff fd8c 	bl	800fdd0 <__lo0bits>
 80102b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102bc:	b1e8      	cbz	r0, 80102fa <__d2b+0x7a>
 80102be:	f1c0 0320 	rsb	r3, r0, #32
 80102c2:	fa02 f303 	lsl.w	r3, r2, r3
 80102c6:	430b      	orrs	r3, r1
 80102c8:	40c2      	lsrs	r2, r0
 80102ca:	616b      	str	r3, [r5, #20]
 80102cc:	9201      	str	r2, [sp, #4]
 80102ce:	9b01      	ldr	r3, [sp, #4]
 80102d0:	61ab      	str	r3, [r5, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bf14      	ite	ne
 80102d6:	2102      	movne	r1, #2
 80102d8:	2101      	moveq	r1, #1
 80102da:	6129      	str	r1, [r5, #16]
 80102dc:	b1bc      	cbz	r4, 801030e <__d2b+0x8e>
 80102de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80102e2:	4404      	add	r4, r0
 80102e4:	6034      	str	r4, [r6, #0]
 80102e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ec:	6018      	str	r0, [r3, #0]
 80102ee:	4628      	mov	r0, r5
 80102f0:	b003      	add	sp, #12
 80102f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102f8:	e7d7      	b.n	80102aa <__d2b+0x2a>
 80102fa:	6169      	str	r1, [r5, #20]
 80102fc:	e7e7      	b.n	80102ce <__d2b+0x4e>
 80102fe:	a801      	add	r0, sp, #4
 8010300:	f7ff fd66 	bl	800fdd0 <__lo0bits>
 8010304:	9b01      	ldr	r3, [sp, #4]
 8010306:	616b      	str	r3, [r5, #20]
 8010308:	3020      	adds	r0, #32
 801030a:	2101      	movs	r1, #1
 801030c:	e7e5      	b.n	80102da <__d2b+0x5a>
 801030e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8010312:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010316:	6030      	str	r0, [r6, #0]
 8010318:	6918      	ldr	r0, [r3, #16]
 801031a:	f7ff fd39 	bl	800fd90 <__hi0bits>
 801031e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010322:	e7e2      	b.n	80102ea <__d2b+0x6a>
 8010324:	0801199c 	.word	0x0801199c
 8010328:	080119be 	.word	0x080119be

0801032c <siscanf>:
 801032c:	b40e      	push	{r1, r2, r3}
 801032e:	b530      	push	{r4, r5, lr}
 8010330:	b09c      	sub	sp, #112	; 0x70
 8010332:	ac1f      	add	r4, sp, #124	; 0x7c
 8010334:	f44f 7201 	mov.w	r2, #516	; 0x204
 8010338:	f854 5b04 	ldr.w	r5, [r4], #4
 801033c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010340:	9002      	str	r0, [sp, #8]
 8010342:	9006      	str	r0, [sp, #24]
 8010344:	f7ef ff6c 	bl	8000220 <strlen>
 8010348:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <siscanf+0x4c>)
 801034a:	9003      	str	r0, [sp, #12]
 801034c:	9007      	str	r0, [sp, #28]
 801034e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010350:	480a      	ldr	r0, [pc, #40]	; (801037c <siscanf+0x50>)
 8010352:	9401      	str	r4, [sp, #4]
 8010354:	2300      	movs	r3, #0
 8010356:	930f      	str	r3, [sp, #60]	; 0x3c
 8010358:	9314      	str	r3, [sp, #80]	; 0x50
 801035a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801035e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010362:	462a      	mov	r2, r5
 8010364:	4623      	mov	r3, r4
 8010366:	a902      	add	r1, sp, #8
 8010368:	6800      	ldr	r0, [r0, #0]
 801036a:	f000 fb9d 	bl	8010aa8 <__ssvfiscanf_r>
 801036e:	b01c      	add	sp, #112	; 0x70
 8010370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010374:	b003      	add	sp, #12
 8010376:	4770      	bx	lr
 8010378:	080103a3 	.word	0x080103a3
 801037c:	20000088 	.word	0x20000088

08010380 <__sread>:
 8010380:	b510      	push	{r4, lr}
 8010382:	460c      	mov	r4, r1
 8010384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010388:	f000 fa8e 	bl	80108a8 <_read_r>
 801038c:	2800      	cmp	r0, #0
 801038e:	bfab      	itete	ge
 8010390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010392:	89a3      	ldrhlt	r3, [r4, #12]
 8010394:	181b      	addge	r3, r3, r0
 8010396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801039a:	bfac      	ite	ge
 801039c:	6563      	strge	r3, [r4, #84]	; 0x54
 801039e:	81a3      	strhlt	r3, [r4, #12]
 80103a0:	bd10      	pop	{r4, pc}

080103a2 <__seofread>:
 80103a2:	2000      	movs	r0, #0
 80103a4:	4770      	bx	lr

080103a6 <__swrite>:
 80103a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103aa:	461f      	mov	r7, r3
 80103ac:	898b      	ldrh	r3, [r1, #12]
 80103ae:	05db      	lsls	r3, r3, #23
 80103b0:	4605      	mov	r5, r0
 80103b2:	460c      	mov	r4, r1
 80103b4:	4616      	mov	r6, r2
 80103b6:	d505      	bpl.n	80103c4 <__swrite+0x1e>
 80103b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103bc:	2302      	movs	r3, #2
 80103be:	2200      	movs	r2, #0
 80103c0:	f000 fa60 	bl	8010884 <_lseek_r>
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ce:	81a3      	strh	r3, [r4, #12]
 80103d0:	4632      	mov	r2, r6
 80103d2:	463b      	mov	r3, r7
 80103d4:	4628      	mov	r0, r5
 80103d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103da:	f000 ba87 	b.w	80108ec <_write_r>

080103de <__sseek>:
 80103de:	b510      	push	{r4, lr}
 80103e0:	460c      	mov	r4, r1
 80103e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e6:	f000 fa4d 	bl	8010884 <_lseek_r>
 80103ea:	1c43      	adds	r3, r0, #1
 80103ec:	89a3      	ldrh	r3, [r4, #12]
 80103ee:	bf15      	itete	ne
 80103f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80103f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103fa:	81a3      	strheq	r3, [r4, #12]
 80103fc:	bf18      	it	ne
 80103fe:	81a3      	strhne	r3, [r4, #12]
 8010400:	bd10      	pop	{r4, pc}

08010402 <__sclose>:
 8010402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010406:	f000 ba0b 	b.w	8010820 <_close_r>
	...

0801040c <fiprintf>:
 801040c:	b40e      	push	{r1, r2, r3}
 801040e:	b503      	push	{r0, r1, lr}
 8010410:	4601      	mov	r1, r0
 8010412:	ab03      	add	r3, sp, #12
 8010414:	4805      	ldr	r0, [pc, #20]	; (801042c <fiprintf+0x20>)
 8010416:	f853 2b04 	ldr.w	r2, [r3], #4
 801041a:	6800      	ldr	r0, [r0, #0]
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	f7ff f98f 	bl	800f740 <_vfiprintf_r>
 8010422:	b002      	add	sp, #8
 8010424:	f85d eb04 	ldr.w	lr, [sp], #4
 8010428:	b003      	add	sp, #12
 801042a:	4770      	bx	lr
 801042c:	20000088 	.word	0x20000088

08010430 <_realloc_r>:
 8010430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010434:	4680      	mov	r8, r0
 8010436:	4614      	mov	r4, r2
 8010438:	460e      	mov	r6, r1
 801043a:	b921      	cbnz	r1, 8010446 <_realloc_r+0x16>
 801043c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010440:	4611      	mov	r1, r2
 8010442:	f7ff bac7 	b.w	800f9d4 <_malloc_r>
 8010446:	b92a      	cbnz	r2, 8010454 <_realloc_r+0x24>
 8010448:	f000 fa8a 	bl	8010960 <_free_r>
 801044c:	4625      	mov	r5, r4
 801044e:	4628      	mov	r0, r5
 8010450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010454:	f000 fe39 	bl	80110ca <_malloc_usable_size_r>
 8010458:	4284      	cmp	r4, r0
 801045a:	4607      	mov	r7, r0
 801045c:	d802      	bhi.n	8010464 <_realloc_r+0x34>
 801045e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010462:	d812      	bhi.n	801048a <_realloc_r+0x5a>
 8010464:	4621      	mov	r1, r4
 8010466:	4640      	mov	r0, r8
 8010468:	f7ff fab4 	bl	800f9d4 <_malloc_r>
 801046c:	4605      	mov	r5, r0
 801046e:	2800      	cmp	r0, #0
 8010470:	d0ed      	beq.n	801044e <_realloc_r+0x1e>
 8010472:	42bc      	cmp	r4, r7
 8010474:	4622      	mov	r2, r4
 8010476:	4631      	mov	r1, r6
 8010478:	bf28      	it	cs
 801047a:	463a      	movcs	r2, r7
 801047c:	f7fe f8eb 	bl	800e656 <memcpy>
 8010480:	4631      	mov	r1, r6
 8010482:	4640      	mov	r0, r8
 8010484:	f000 fa6c 	bl	8010960 <_free_r>
 8010488:	e7e1      	b.n	801044e <_realloc_r+0x1e>
 801048a:	4635      	mov	r5, r6
 801048c:	e7df      	b.n	801044e <_realloc_r+0x1e>

0801048e <__swbuf_r>:
 801048e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010490:	460e      	mov	r6, r1
 8010492:	4614      	mov	r4, r2
 8010494:	4605      	mov	r5, r0
 8010496:	b118      	cbz	r0, 80104a0 <__swbuf_r+0x12>
 8010498:	6a03      	ldr	r3, [r0, #32]
 801049a:	b90b      	cbnz	r3, 80104a0 <__swbuf_r+0x12>
 801049c:	f7fd f91a 	bl	800d6d4 <__sinit>
 80104a0:	69a3      	ldr	r3, [r4, #24]
 80104a2:	60a3      	str	r3, [r4, #8]
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	071a      	lsls	r2, r3, #28
 80104a8:	d525      	bpl.n	80104f6 <__swbuf_r+0x68>
 80104aa:	6923      	ldr	r3, [r4, #16]
 80104ac:	b31b      	cbz	r3, 80104f6 <__swbuf_r+0x68>
 80104ae:	6823      	ldr	r3, [r4, #0]
 80104b0:	6922      	ldr	r2, [r4, #16]
 80104b2:	1a98      	subs	r0, r3, r2
 80104b4:	6963      	ldr	r3, [r4, #20]
 80104b6:	b2f6      	uxtb	r6, r6
 80104b8:	4283      	cmp	r3, r0
 80104ba:	4637      	mov	r7, r6
 80104bc:	dc04      	bgt.n	80104c8 <__swbuf_r+0x3a>
 80104be:	4621      	mov	r1, r4
 80104c0:	4628      	mov	r0, r5
 80104c2:	f7ff fb89 	bl	800fbd8 <_fflush_r>
 80104c6:	b9e0      	cbnz	r0, 8010502 <__swbuf_r+0x74>
 80104c8:	68a3      	ldr	r3, [r4, #8]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	60a3      	str	r3, [r4, #8]
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	1c5a      	adds	r2, r3, #1
 80104d2:	6022      	str	r2, [r4, #0]
 80104d4:	701e      	strb	r6, [r3, #0]
 80104d6:	6962      	ldr	r2, [r4, #20]
 80104d8:	1c43      	adds	r3, r0, #1
 80104da:	429a      	cmp	r2, r3
 80104dc:	d004      	beq.n	80104e8 <__swbuf_r+0x5a>
 80104de:	89a3      	ldrh	r3, [r4, #12]
 80104e0:	07db      	lsls	r3, r3, #31
 80104e2:	d506      	bpl.n	80104f2 <__swbuf_r+0x64>
 80104e4:	2e0a      	cmp	r6, #10
 80104e6:	d104      	bne.n	80104f2 <__swbuf_r+0x64>
 80104e8:	4621      	mov	r1, r4
 80104ea:	4628      	mov	r0, r5
 80104ec:	f7ff fb74 	bl	800fbd8 <_fflush_r>
 80104f0:	b938      	cbnz	r0, 8010502 <__swbuf_r+0x74>
 80104f2:	4638      	mov	r0, r7
 80104f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104f6:	4621      	mov	r1, r4
 80104f8:	4628      	mov	r0, r5
 80104fa:	f000 f805 	bl	8010508 <__swsetup_r>
 80104fe:	2800      	cmp	r0, #0
 8010500:	d0d5      	beq.n	80104ae <__swbuf_r+0x20>
 8010502:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010506:	e7f4      	b.n	80104f2 <__swbuf_r+0x64>

08010508 <__swsetup_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4b2a      	ldr	r3, [pc, #168]	; (80105b4 <__swsetup_r+0xac>)
 801050c:	4605      	mov	r5, r0
 801050e:	6818      	ldr	r0, [r3, #0]
 8010510:	460c      	mov	r4, r1
 8010512:	b118      	cbz	r0, 801051c <__swsetup_r+0x14>
 8010514:	6a03      	ldr	r3, [r0, #32]
 8010516:	b90b      	cbnz	r3, 801051c <__swsetup_r+0x14>
 8010518:	f7fd f8dc 	bl	800d6d4 <__sinit>
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010522:	0718      	lsls	r0, r3, #28
 8010524:	d422      	bmi.n	801056c <__swsetup_r+0x64>
 8010526:	06d9      	lsls	r1, r3, #27
 8010528:	d407      	bmi.n	801053a <__swsetup_r+0x32>
 801052a:	2309      	movs	r3, #9
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010532:	81a3      	strh	r3, [r4, #12]
 8010534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010538:	e034      	b.n	80105a4 <__swsetup_r+0x9c>
 801053a:	0758      	lsls	r0, r3, #29
 801053c:	d512      	bpl.n	8010564 <__swsetup_r+0x5c>
 801053e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010540:	b141      	cbz	r1, 8010554 <__swsetup_r+0x4c>
 8010542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010546:	4299      	cmp	r1, r3
 8010548:	d002      	beq.n	8010550 <__swsetup_r+0x48>
 801054a:	4628      	mov	r0, r5
 801054c:	f000 fa08 	bl	8010960 <_free_r>
 8010550:	2300      	movs	r3, #0
 8010552:	6363      	str	r3, [r4, #52]	; 0x34
 8010554:	89a3      	ldrh	r3, [r4, #12]
 8010556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801055a:	81a3      	strh	r3, [r4, #12]
 801055c:	2300      	movs	r3, #0
 801055e:	6063      	str	r3, [r4, #4]
 8010560:	6923      	ldr	r3, [r4, #16]
 8010562:	6023      	str	r3, [r4, #0]
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	f043 0308 	orr.w	r3, r3, #8
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	b94b      	cbnz	r3, 8010584 <__swsetup_r+0x7c>
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801057a:	d003      	beq.n	8010584 <__swsetup_r+0x7c>
 801057c:	4621      	mov	r1, r4
 801057e:	4628      	mov	r0, r5
 8010580:	f000 f840 	bl	8010604 <__smakebuf_r>
 8010584:	89a0      	ldrh	r0, [r4, #12]
 8010586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801058a:	f010 0301 	ands.w	r3, r0, #1
 801058e:	d00a      	beq.n	80105a6 <__swsetup_r+0x9e>
 8010590:	2300      	movs	r3, #0
 8010592:	60a3      	str	r3, [r4, #8]
 8010594:	6963      	ldr	r3, [r4, #20]
 8010596:	425b      	negs	r3, r3
 8010598:	61a3      	str	r3, [r4, #24]
 801059a:	6923      	ldr	r3, [r4, #16]
 801059c:	b943      	cbnz	r3, 80105b0 <__swsetup_r+0xa8>
 801059e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105a2:	d1c4      	bne.n	801052e <__swsetup_r+0x26>
 80105a4:	bd38      	pop	{r3, r4, r5, pc}
 80105a6:	0781      	lsls	r1, r0, #30
 80105a8:	bf58      	it	pl
 80105aa:	6963      	ldrpl	r3, [r4, #20]
 80105ac:	60a3      	str	r3, [r4, #8]
 80105ae:	e7f4      	b.n	801059a <__swsetup_r+0x92>
 80105b0:	2000      	movs	r0, #0
 80105b2:	e7f7      	b.n	80105a4 <__swsetup_r+0x9c>
 80105b4:	20000088 	.word	0x20000088

080105b8 <__swhatbuf_r>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	460c      	mov	r4, r1
 80105bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105c0:	2900      	cmp	r1, #0
 80105c2:	b096      	sub	sp, #88	; 0x58
 80105c4:	4615      	mov	r5, r2
 80105c6:	461e      	mov	r6, r3
 80105c8:	da0d      	bge.n	80105e6 <__swhatbuf_r+0x2e>
 80105ca:	89a3      	ldrh	r3, [r4, #12]
 80105cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80105d0:	f04f 0100 	mov.w	r1, #0
 80105d4:	bf0c      	ite	eq
 80105d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80105da:	2340      	movne	r3, #64	; 0x40
 80105dc:	2000      	movs	r0, #0
 80105de:	6031      	str	r1, [r6, #0]
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	b016      	add	sp, #88	; 0x58
 80105e4:	bd70      	pop	{r4, r5, r6, pc}
 80105e6:	466a      	mov	r2, sp
 80105e8:	f000 f92a 	bl	8010840 <_fstat_r>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	dbec      	blt.n	80105ca <__swhatbuf_r+0x12>
 80105f0:	9901      	ldr	r1, [sp, #4]
 80105f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80105f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80105fa:	4259      	negs	r1, r3
 80105fc:	4159      	adcs	r1, r3
 80105fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010602:	e7eb      	b.n	80105dc <__swhatbuf_r+0x24>

08010604 <__smakebuf_r>:
 8010604:	898b      	ldrh	r3, [r1, #12]
 8010606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010608:	079d      	lsls	r5, r3, #30
 801060a:	4606      	mov	r6, r0
 801060c:	460c      	mov	r4, r1
 801060e:	d507      	bpl.n	8010620 <__smakebuf_r+0x1c>
 8010610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010614:	6023      	str	r3, [r4, #0]
 8010616:	6123      	str	r3, [r4, #16]
 8010618:	2301      	movs	r3, #1
 801061a:	6163      	str	r3, [r4, #20]
 801061c:	b002      	add	sp, #8
 801061e:	bd70      	pop	{r4, r5, r6, pc}
 8010620:	ab01      	add	r3, sp, #4
 8010622:	466a      	mov	r2, sp
 8010624:	f7ff ffc8 	bl	80105b8 <__swhatbuf_r>
 8010628:	9900      	ldr	r1, [sp, #0]
 801062a:	4605      	mov	r5, r0
 801062c:	4630      	mov	r0, r6
 801062e:	f7ff f9d1 	bl	800f9d4 <_malloc_r>
 8010632:	b948      	cbnz	r0, 8010648 <__smakebuf_r+0x44>
 8010634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010638:	059a      	lsls	r2, r3, #22
 801063a:	d4ef      	bmi.n	801061c <__smakebuf_r+0x18>
 801063c:	f023 0303 	bic.w	r3, r3, #3
 8010640:	f043 0302 	orr.w	r3, r3, #2
 8010644:	81a3      	strh	r3, [r4, #12]
 8010646:	e7e3      	b.n	8010610 <__smakebuf_r+0xc>
 8010648:	89a3      	ldrh	r3, [r4, #12]
 801064a:	6020      	str	r0, [r4, #0]
 801064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010650:	81a3      	strh	r3, [r4, #12]
 8010652:	9b00      	ldr	r3, [sp, #0]
 8010654:	6163      	str	r3, [r4, #20]
 8010656:	9b01      	ldr	r3, [sp, #4]
 8010658:	6120      	str	r0, [r4, #16]
 801065a:	b15b      	cbz	r3, 8010674 <__smakebuf_r+0x70>
 801065c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010660:	4630      	mov	r0, r6
 8010662:	f000 f8ff 	bl	8010864 <_isatty_r>
 8010666:	b128      	cbz	r0, 8010674 <__smakebuf_r+0x70>
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	f023 0303 	bic.w	r3, r3, #3
 801066e:	f043 0301 	orr.w	r3, r3, #1
 8010672:	81a3      	strh	r3, [r4, #12]
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	431d      	orrs	r5, r3
 8010678:	81a5      	strh	r5, [r4, #12]
 801067a:	e7cf      	b.n	801061c <__smakebuf_r+0x18>

0801067c <strncmp>:
 801067c:	b510      	push	{r4, lr}
 801067e:	b16a      	cbz	r2, 801069c <strncmp+0x20>
 8010680:	3901      	subs	r1, #1
 8010682:	1884      	adds	r4, r0, r2
 8010684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010688:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801068c:	429a      	cmp	r2, r3
 801068e:	d103      	bne.n	8010698 <strncmp+0x1c>
 8010690:	42a0      	cmp	r0, r4
 8010692:	d001      	beq.n	8010698 <strncmp+0x1c>
 8010694:	2a00      	cmp	r2, #0
 8010696:	d1f5      	bne.n	8010684 <strncmp+0x8>
 8010698:	1ad0      	subs	r0, r2, r3
 801069a:	bd10      	pop	{r4, pc}
 801069c:	4610      	mov	r0, r2
 801069e:	e7fc      	b.n	801069a <strncmp+0x1e>

080106a0 <memmove>:
 80106a0:	4288      	cmp	r0, r1
 80106a2:	b510      	push	{r4, lr}
 80106a4:	eb01 0402 	add.w	r4, r1, r2
 80106a8:	d902      	bls.n	80106b0 <memmove+0x10>
 80106aa:	4284      	cmp	r4, r0
 80106ac:	4623      	mov	r3, r4
 80106ae:	d807      	bhi.n	80106c0 <memmove+0x20>
 80106b0:	1e43      	subs	r3, r0, #1
 80106b2:	42a1      	cmp	r1, r4
 80106b4:	d008      	beq.n	80106c8 <memmove+0x28>
 80106b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106be:	e7f8      	b.n	80106b2 <memmove+0x12>
 80106c0:	4402      	add	r2, r0
 80106c2:	4601      	mov	r1, r0
 80106c4:	428a      	cmp	r2, r1
 80106c6:	d100      	bne.n	80106ca <memmove+0x2a>
 80106c8:	bd10      	pop	{r4, pc}
 80106ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106d2:	e7f7      	b.n	80106c4 <memmove+0x24>

080106d4 <gmtime_r>:
 80106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d8:	4a4d      	ldr	r2, [pc, #308]	; (8010810 <gmtime_r+0x13c>)
 80106da:	460c      	mov	r4, r1
 80106dc:	2300      	movs	r3, #0
 80106de:	e9d0 0100 	ldrd	r0, r1, [r0]
 80106e2:	f7f0 fcc7 	bl	8001074 <__aeabi_ldivmod>
 80106e6:	2a00      	cmp	r2, #0
 80106e8:	bfbc      	itt	lt
 80106ea:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80106ee:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80106f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80106f6:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 80106fa:	fbb2 f3f1 	udiv	r3, r2, r1
 80106fe:	fb01 2213 	mls	r2, r1, r3, r2
 8010702:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8010706:	bfac      	ite	ge
 8010708:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801070c:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8010710:	60a3      	str	r3, [r4, #8]
 8010712:	fbb2 f3f1 	udiv	r3, r2, r1
 8010716:	fb01 2213 	mls	r2, r1, r3, r2
 801071a:	6063      	str	r3, [r4, #4]
 801071c:	6022      	str	r2, [r4, #0]
 801071e:	1cc3      	adds	r3, r0, #3
 8010720:	2207      	movs	r2, #7
 8010722:	fb93 f2f2 	sdiv	r2, r3, r2
 8010726:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801072a:	1a9b      	subs	r3, r3, r2
 801072c:	bf48      	it	mi
 801072e:	3307      	addmi	r3, #7
 8010730:	2800      	cmp	r0, #0
 8010732:	61a3      	str	r3, [r4, #24]
 8010734:	bfb8      	it	lt
 8010736:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801073a:	4936      	ldr	r1, [pc, #216]	; (8010814 <gmtime_r+0x140>)
 801073c:	bfae      	itee	ge
 801073e:	fb90 f1f1 	sdivge	r1, r0, r1
 8010742:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8010746:	fb93 f1f1 	sdivlt	r1, r3, r1
 801074a:	4b33      	ldr	r3, [pc, #204]	; (8010818 <gmtime_r+0x144>)
 801074c:	fb03 0001 	mla	r0, r3, r1, r0
 8010750:	f648 63ac 	movw	r3, #36524	; 0x8eac
 8010754:	fbb0 f3f3 	udiv	r3, r0, r3
 8010758:	4403      	add	r3, r0
 801075a:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801075e:	fbb0 f2fc 	udiv	r2, r0, ip
 8010762:	1a9b      	subs	r3, r3, r2
 8010764:	f240 176d 	movw	r7, #365	; 0x16d
 8010768:	4a2c      	ldr	r2, [pc, #176]	; (801081c <gmtime_r+0x148>)
 801076a:	fbb0 f2f2 	udiv	r2, r0, r2
 801076e:	2664      	movs	r6, #100	; 0x64
 8010770:	1a9b      	subs	r3, r3, r2
 8010772:	fbb3 f2f7 	udiv	r2, r3, r7
 8010776:	fbb3 f3fc 	udiv	r3, r3, ip
 801077a:	fbb2 f5f6 	udiv	r5, r2, r6
 801077e:	1aeb      	subs	r3, r5, r3
 8010780:	4403      	add	r3, r0
 8010782:	fb07 3312 	mls	r3, r7, r2, r3
 8010786:	2099      	movs	r0, #153	; 0x99
 8010788:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 801078c:	3702      	adds	r7, #2
 801078e:	f103 0e01 	add.w	lr, r3, #1
 8010792:	fbb7 fcf0 	udiv	ip, r7, r0
 8010796:	fb00 f00c 	mul.w	r0, r0, ip
 801079a:	3002      	adds	r0, #2
 801079c:	f04f 0805 	mov.w	r8, #5
 80107a0:	fbb0 f0f8 	udiv	r0, r0, r8
 80107a4:	ebae 0000 	sub.w	r0, lr, r0
 80107a8:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80107ac:	4577      	cmp	r7, lr
 80107ae:	bf94      	ite	ls
 80107b0:	2702      	movls	r7, #2
 80107b2:	f06f 0709 	mvnhi.w	r7, #9
 80107b6:	4467      	add	r7, ip
 80107b8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80107bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80107c0:	2f01      	cmp	r7, #1
 80107c2:	bf98      	it	ls
 80107c4:	3101      	addls	r1, #1
 80107c6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80107ca:	d30c      	bcc.n	80107e6 <gmtime_r+0x112>
 80107cc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80107d0:	61e3      	str	r3, [r4, #28]
 80107d2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80107d6:	2300      	movs	r3, #0
 80107d8:	60e0      	str	r0, [r4, #12]
 80107da:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80107de:	6223      	str	r3, [r4, #32]
 80107e0:	4620      	mov	r0, r4
 80107e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e6:	f012 0f03 	tst.w	r2, #3
 80107ea:	d102      	bne.n	80107f2 <gmtime_r+0x11e>
 80107ec:	fb06 2515 	mls	r5, r6, r5, r2
 80107f0:	b95d      	cbnz	r5, 801080a <gmtime_r+0x136>
 80107f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80107f6:	fbb2 f6f5 	udiv	r6, r2, r5
 80107fa:	fb05 2216 	mls	r2, r5, r6, r2
 80107fe:	fab2 f282 	clz	r2, r2
 8010802:	0952      	lsrs	r2, r2, #5
 8010804:	333b      	adds	r3, #59	; 0x3b
 8010806:	4413      	add	r3, r2
 8010808:	e7e2      	b.n	80107d0 <gmtime_r+0xfc>
 801080a:	2201      	movs	r2, #1
 801080c:	e7fa      	b.n	8010804 <gmtime_r+0x130>
 801080e:	bf00      	nop
 8010810:	00015180 	.word	0x00015180
 8010814:	00023ab1 	.word	0x00023ab1
 8010818:	fffdc54f 	.word	0xfffdc54f
 801081c:	00023ab0 	.word	0x00023ab0

08010820 <_close_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d06      	ldr	r5, [pc, #24]	; (801083c <_close_r+0x1c>)
 8010824:	2300      	movs	r3, #0
 8010826:	4604      	mov	r4, r0
 8010828:	4608      	mov	r0, r1
 801082a:	602b      	str	r3, [r5, #0]
 801082c:	f7f2 f942 	bl	8002ab4 <_close>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_close_r+0x1a>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_close_r+0x1a>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20000628 	.word	0x20000628

08010840 <_fstat_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4d07      	ldr	r5, [pc, #28]	; (8010860 <_fstat_r+0x20>)
 8010844:	2300      	movs	r3, #0
 8010846:	4604      	mov	r4, r0
 8010848:	4608      	mov	r0, r1
 801084a:	4611      	mov	r1, r2
 801084c:	602b      	str	r3, [r5, #0]
 801084e:	f7f2 f93c 	bl	8002aca <_fstat>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	d102      	bne.n	801085c <_fstat_r+0x1c>
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	b103      	cbz	r3, 801085c <_fstat_r+0x1c>
 801085a:	6023      	str	r3, [r4, #0]
 801085c:	bd38      	pop	{r3, r4, r5, pc}
 801085e:	bf00      	nop
 8010860:	20000628 	.word	0x20000628

08010864 <_isatty_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	4d06      	ldr	r5, [pc, #24]	; (8010880 <_isatty_r+0x1c>)
 8010868:	2300      	movs	r3, #0
 801086a:	4604      	mov	r4, r0
 801086c:	4608      	mov	r0, r1
 801086e:	602b      	str	r3, [r5, #0]
 8010870:	f7f2 f93a 	bl	8002ae8 <_isatty>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_isatty_r+0x1a>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_isatty_r+0x1a>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20000628 	.word	0x20000628

08010884 <_lseek_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d07      	ldr	r5, [pc, #28]	; (80108a4 <_lseek_r+0x20>)
 8010888:	4604      	mov	r4, r0
 801088a:	4608      	mov	r0, r1
 801088c:	4611      	mov	r1, r2
 801088e:	2200      	movs	r2, #0
 8010890:	602a      	str	r2, [r5, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	f7f2 f932 	bl	8002afc <_lseek>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_lseek_r+0x1e>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_lseek_r+0x1e>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	20000628 	.word	0x20000628

080108a8 <_read_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d07      	ldr	r5, [pc, #28]	; (80108c8 <_read_r+0x20>)
 80108ac:	4604      	mov	r4, r0
 80108ae:	4608      	mov	r0, r1
 80108b0:	4611      	mov	r1, r2
 80108b2:	2200      	movs	r2, #0
 80108b4:	602a      	str	r2, [r5, #0]
 80108b6:	461a      	mov	r2, r3
 80108b8:	f7f2 f8c3 	bl	8002a42 <_read>
 80108bc:	1c43      	adds	r3, r0, #1
 80108be:	d102      	bne.n	80108c6 <_read_r+0x1e>
 80108c0:	682b      	ldr	r3, [r5, #0]
 80108c2:	b103      	cbz	r3, 80108c6 <_read_r+0x1e>
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	bd38      	pop	{r3, r4, r5, pc}
 80108c8:	20000628 	.word	0x20000628

080108cc <_sbrk_r>:
 80108cc:	b538      	push	{r3, r4, r5, lr}
 80108ce:	4d06      	ldr	r5, [pc, #24]	; (80108e8 <_sbrk_r+0x1c>)
 80108d0:	2300      	movs	r3, #0
 80108d2:	4604      	mov	r4, r0
 80108d4:	4608      	mov	r0, r1
 80108d6:	602b      	str	r3, [r5, #0]
 80108d8:	f7f2 f91c 	bl	8002b14 <_sbrk>
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	d102      	bne.n	80108e6 <_sbrk_r+0x1a>
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	b103      	cbz	r3, 80108e6 <_sbrk_r+0x1a>
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	bd38      	pop	{r3, r4, r5, pc}
 80108e8:	20000628 	.word	0x20000628

080108ec <_write_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d07      	ldr	r5, [pc, #28]	; (801090c <_write_r+0x20>)
 80108f0:	4604      	mov	r4, r0
 80108f2:	4608      	mov	r0, r1
 80108f4:	4611      	mov	r1, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	602a      	str	r2, [r5, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	f7f2 f8be 	bl	8002a7c <_write>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_write_r+0x1e>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_write_r+0x1e>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	20000628 	.word	0x20000628

08010910 <abort>:
 8010910:	b508      	push	{r3, lr}
 8010912:	2006      	movs	r0, #6
 8010914:	f000 fcd2 	bl	80112bc <raise>
 8010918:	2001      	movs	r0, #1
 801091a:	f7f2 f888 	bl	8002a2e <_exit>

0801091e <_calloc_r>:
 801091e:	b570      	push	{r4, r5, r6, lr}
 8010920:	fba1 5402 	umull	r5, r4, r1, r2
 8010924:	b934      	cbnz	r4, 8010934 <_calloc_r+0x16>
 8010926:	4629      	mov	r1, r5
 8010928:	f7ff f854 	bl	800f9d4 <_malloc_r>
 801092c:	4606      	mov	r6, r0
 801092e:	b928      	cbnz	r0, 801093c <_calloc_r+0x1e>
 8010930:	4630      	mov	r0, r6
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	220c      	movs	r2, #12
 8010936:	6002      	str	r2, [r0, #0]
 8010938:	2600      	movs	r6, #0
 801093a:	e7f9      	b.n	8010930 <_calloc_r+0x12>
 801093c:	462a      	mov	r2, r5
 801093e:	4621      	mov	r1, r4
 8010940:	f7fc ffea 	bl	800d918 <memset>
 8010944:	e7f4      	b.n	8010930 <_calloc_r+0x12>
	...

08010948 <__env_lock>:
 8010948:	4801      	ldr	r0, [pc, #4]	; (8010950 <__env_lock+0x8>)
 801094a:	f7fd be81 	b.w	800e650 <__retarget_lock_acquire_recursive>
 801094e:	bf00      	nop
 8010950:	2000061c 	.word	0x2000061c

08010954 <__env_unlock>:
 8010954:	4801      	ldr	r0, [pc, #4]	; (801095c <__env_unlock+0x8>)
 8010956:	f7fd be7d 	b.w	800e654 <__retarget_lock_release_recursive>
 801095a:	bf00      	nop
 801095c:	2000061c 	.word	0x2000061c

08010960 <_free_r>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4605      	mov	r5, r0
 8010964:	2900      	cmp	r1, #0
 8010966:	d041      	beq.n	80109ec <_free_r+0x8c>
 8010968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801096c:	1f0c      	subs	r4, r1, #4
 801096e:	2b00      	cmp	r3, #0
 8010970:	bfb8      	it	lt
 8010972:	18e4      	addlt	r4, r4, r3
 8010974:	f7ff f958 	bl	800fc28 <__malloc_lock>
 8010978:	4a1d      	ldr	r2, [pc, #116]	; (80109f0 <_free_r+0x90>)
 801097a:	6813      	ldr	r3, [r2, #0]
 801097c:	b933      	cbnz	r3, 801098c <_free_r+0x2c>
 801097e:	6063      	str	r3, [r4, #4]
 8010980:	6014      	str	r4, [r2, #0]
 8010982:	4628      	mov	r0, r5
 8010984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010988:	f7ff b954 	b.w	800fc34 <__malloc_unlock>
 801098c:	42a3      	cmp	r3, r4
 801098e:	d908      	bls.n	80109a2 <_free_r+0x42>
 8010990:	6820      	ldr	r0, [r4, #0]
 8010992:	1821      	adds	r1, r4, r0
 8010994:	428b      	cmp	r3, r1
 8010996:	bf01      	itttt	eq
 8010998:	6819      	ldreq	r1, [r3, #0]
 801099a:	685b      	ldreq	r3, [r3, #4]
 801099c:	1809      	addeq	r1, r1, r0
 801099e:	6021      	streq	r1, [r4, #0]
 80109a0:	e7ed      	b.n	801097e <_free_r+0x1e>
 80109a2:	461a      	mov	r2, r3
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	b10b      	cbz	r3, 80109ac <_free_r+0x4c>
 80109a8:	42a3      	cmp	r3, r4
 80109aa:	d9fa      	bls.n	80109a2 <_free_r+0x42>
 80109ac:	6811      	ldr	r1, [r2, #0]
 80109ae:	1850      	adds	r0, r2, r1
 80109b0:	42a0      	cmp	r0, r4
 80109b2:	d10b      	bne.n	80109cc <_free_r+0x6c>
 80109b4:	6820      	ldr	r0, [r4, #0]
 80109b6:	4401      	add	r1, r0
 80109b8:	1850      	adds	r0, r2, r1
 80109ba:	4283      	cmp	r3, r0
 80109bc:	6011      	str	r1, [r2, #0]
 80109be:	d1e0      	bne.n	8010982 <_free_r+0x22>
 80109c0:	6818      	ldr	r0, [r3, #0]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	6053      	str	r3, [r2, #4]
 80109c6:	4408      	add	r0, r1
 80109c8:	6010      	str	r0, [r2, #0]
 80109ca:	e7da      	b.n	8010982 <_free_r+0x22>
 80109cc:	d902      	bls.n	80109d4 <_free_r+0x74>
 80109ce:	230c      	movs	r3, #12
 80109d0:	602b      	str	r3, [r5, #0]
 80109d2:	e7d6      	b.n	8010982 <_free_r+0x22>
 80109d4:	6820      	ldr	r0, [r4, #0]
 80109d6:	1821      	adds	r1, r4, r0
 80109d8:	428b      	cmp	r3, r1
 80109da:	bf04      	itt	eq
 80109dc:	6819      	ldreq	r1, [r3, #0]
 80109de:	685b      	ldreq	r3, [r3, #4]
 80109e0:	6063      	str	r3, [r4, #4]
 80109e2:	bf04      	itt	eq
 80109e4:	1809      	addeq	r1, r1, r0
 80109e6:	6021      	streq	r1, [r4, #0]
 80109e8:	6054      	str	r4, [r2, #4]
 80109ea:	e7ca      	b.n	8010982 <_free_r+0x22>
 80109ec:	bd38      	pop	{r3, r4, r5, pc}
 80109ee:	bf00      	nop
 80109f0:	20000620 	.word	0x20000620

080109f4 <_sungetc_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	1c4b      	adds	r3, r1, #1
 80109f8:	4614      	mov	r4, r2
 80109fa:	d103      	bne.n	8010a04 <_sungetc_r+0x10>
 80109fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010a00:	4628      	mov	r0, r5
 8010a02:	bd38      	pop	{r3, r4, r5, pc}
 8010a04:	8993      	ldrh	r3, [r2, #12]
 8010a06:	f023 0320 	bic.w	r3, r3, #32
 8010a0a:	8193      	strh	r3, [r2, #12]
 8010a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a0e:	6852      	ldr	r2, [r2, #4]
 8010a10:	b2cd      	uxtb	r5, r1
 8010a12:	b18b      	cbz	r3, 8010a38 <_sungetc_r+0x44>
 8010a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a16:	4293      	cmp	r3, r2
 8010a18:	dd08      	ble.n	8010a2c <_sungetc_r+0x38>
 8010a1a:	6823      	ldr	r3, [r4, #0]
 8010a1c:	1e5a      	subs	r2, r3, #1
 8010a1e:	6022      	str	r2, [r4, #0]
 8010a20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010a24:	6863      	ldr	r3, [r4, #4]
 8010a26:	3301      	adds	r3, #1
 8010a28:	6063      	str	r3, [r4, #4]
 8010a2a:	e7e9      	b.n	8010a00 <_sungetc_r+0xc>
 8010a2c:	4621      	mov	r1, r4
 8010a2e:	f000 fb54 	bl	80110da <__submore>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d0f1      	beq.n	8010a1a <_sungetc_r+0x26>
 8010a36:	e7e1      	b.n	80109fc <_sungetc_r+0x8>
 8010a38:	6921      	ldr	r1, [r4, #16]
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	b151      	cbz	r1, 8010a54 <_sungetc_r+0x60>
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	d208      	bcs.n	8010a54 <_sungetc_r+0x60>
 8010a42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010a46:	42a9      	cmp	r1, r5
 8010a48:	d104      	bne.n	8010a54 <_sungetc_r+0x60>
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	3201      	adds	r2, #1
 8010a4e:	6023      	str	r3, [r4, #0]
 8010a50:	6062      	str	r2, [r4, #4]
 8010a52:	e7d5      	b.n	8010a00 <_sungetc_r+0xc>
 8010a54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8010a5e:	2303      	movs	r3, #3
 8010a60:	63a3      	str	r3, [r4, #56]	; 0x38
 8010a62:	4623      	mov	r3, r4
 8010a64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010a68:	6023      	str	r3, [r4, #0]
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e7dc      	b.n	8010a28 <_sungetc_r+0x34>

08010a6e <__ssrefill_r>:
 8010a6e:	b510      	push	{r4, lr}
 8010a70:	460c      	mov	r4, r1
 8010a72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010a74:	b169      	cbz	r1, 8010a92 <__ssrefill_r+0x24>
 8010a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a7a:	4299      	cmp	r1, r3
 8010a7c:	d001      	beq.n	8010a82 <__ssrefill_r+0x14>
 8010a7e:	f7ff ff6f 	bl	8010960 <_free_r>
 8010a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a84:	6063      	str	r3, [r4, #4]
 8010a86:	2000      	movs	r0, #0
 8010a88:	6360      	str	r0, [r4, #52]	; 0x34
 8010a8a:	b113      	cbz	r3, 8010a92 <__ssrefill_r+0x24>
 8010a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a8e:	6023      	str	r3, [r4, #0]
 8010a90:	bd10      	pop	{r4, pc}
 8010a92:	6923      	ldr	r3, [r4, #16]
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	2300      	movs	r3, #0
 8010a98:	6063      	str	r3, [r4, #4]
 8010a9a:	89a3      	ldrh	r3, [r4, #12]
 8010a9c:	f043 0320 	orr.w	r3, r3, #32
 8010aa0:	81a3      	strh	r3, [r4, #12]
 8010aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010aa6:	e7f3      	b.n	8010a90 <__ssrefill_r+0x22>

08010aa8 <__ssvfiscanf_r>:
 8010aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010ab8:	49a6      	ldr	r1, [pc, #664]	; (8010d54 <__ssvfiscanf_r+0x2ac>)
 8010aba:	91a0      	str	r1, [sp, #640]	; 0x280
 8010abc:	f10d 0804 	add.w	r8, sp, #4
 8010ac0:	49a5      	ldr	r1, [pc, #660]	; (8010d58 <__ssvfiscanf_r+0x2b0>)
 8010ac2:	4fa6      	ldr	r7, [pc, #664]	; (8010d5c <__ssvfiscanf_r+0x2b4>)
 8010ac4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010d60 <__ssvfiscanf_r+0x2b8>
 8010ac8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010acc:	4606      	mov	r6, r0
 8010ace:	91a1      	str	r1, [sp, #644]	; 0x284
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	7813      	ldrb	r3, [r2, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 815a 	beq.w	8010d8e <__ssvfiscanf_r+0x2e6>
 8010ada:	5cf9      	ldrb	r1, [r7, r3]
 8010adc:	f011 0108 	ands.w	r1, r1, #8
 8010ae0:	f102 0501 	add.w	r5, r2, #1
 8010ae4:	d019      	beq.n	8010b1a <__ssvfiscanf_r+0x72>
 8010ae6:	6863      	ldr	r3, [r4, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	dd0f      	ble.n	8010b0c <__ssvfiscanf_r+0x64>
 8010aec:	6823      	ldr	r3, [r4, #0]
 8010aee:	781a      	ldrb	r2, [r3, #0]
 8010af0:	5cba      	ldrb	r2, [r7, r2]
 8010af2:	0712      	lsls	r2, r2, #28
 8010af4:	d401      	bmi.n	8010afa <__ssvfiscanf_r+0x52>
 8010af6:	462a      	mov	r2, r5
 8010af8:	e7eb      	b.n	8010ad2 <__ssvfiscanf_r+0x2a>
 8010afa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010afc:	3201      	adds	r2, #1
 8010afe:	9245      	str	r2, [sp, #276]	; 0x114
 8010b00:	6862      	ldr	r2, [r4, #4]
 8010b02:	3301      	adds	r3, #1
 8010b04:	3a01      	subs	r2, #1
 8010b06:	6062      	str	r2, [r4, #4]
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	e7ec      	b.n	8010ae6 <__ssvfiscanf_r+0x3e>
 8010b0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010b0e:	4621      	mov	r1, r4
 8010b10:	4630      	mov	r0, r6
 8010b12:	4798      	blx	r3
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d0e9      	beq.n	8010aec <__ssvfiscanf_r+0x44>
 8010b18:	e7ed      	b.n	8010af6 <__ssvfiscanf_r+0x4e>
 8010b1a:	2b25      	cmp	r3, #37	; 0x25
 8010b1c:	d012      	beq.n	8010b44 <__ssvfiscanf_r+0x9c>
 8010b1e:	469a      	mov	sl, r3
 8010b20:	6863      	ldr	r3, [r4, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f340 8091 	ble.w	8010c4a <__ssvfiscanf_r+0x1a2>
 8010b28:	6822      	ldr	r2, [r4, #0]
 8010b2a:	7813      	ldrb	r3, [r2, #0]
 8010b2c:	4553      	cmp	r3, sl
 8010b2e:	f040 812e 	bne.w	8010d8e <__ssvfiscanf_r+0x2e6>
 8010b32:	6863      	ldr	r3, [r4, #4]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	6063      	str	r3, [r4, #4]
 8010b38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010b3a:	3201      	adds	r2, #1
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	6022      	str	r2, [r4, #0]
 8010b40:	9345      	str	r3, [sp, #276]	; 0x114
 8010b42:	e7d8      	b.n	8010af6 <__ssvfiscanf_r+0x4e>
 8010b44:	9141      	str	r1, [sp, #260]	; 0x104
 8010b46:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b48:	7853      	ldrb	r3, [r2, #1]
 8010b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b4c:	bf02      	ittt	eq
 8010b4e:	2310      	moveq	r3, #16
 8010b50:	1c95      	addeq	r5, r2, #2
 8010b52:	9341      	streq	r3, [sp, #260]	; 0x104
 8010b54:	220a      	movs	r2, #10
 8010b56:	46aa      	mov	sl, r5
 8010b58:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010b5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010b60:	2b09      	cmp	r3, #9
 8010b62:	d91c      	bls.n	8010b9e <__ssvfiscanf_r+0xf6>
 8010b64:	487e      	ldr	r0, [pc, #504]	; (8010d60 <__ssvfiscanf_r+0x2b8>)
 8010b66:	2203      	movs	r2, #3
 8010b68:	f7ef fb0a 	bl	8000180 <memchr>
 8010b6c:	b138      	cbz	r0, 8010b7e <__ssvfiscanf_r+0xd6>
 8010b6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010b70:	eba0 0009 	sub.w	r0, r0, r9
 8010b74:	2301      	movs	r3, #1
 8010b76:	4083      	lsls	r3, r0
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	9341      	str	r3, [sp, #260]	; 0x104
 8010b7c:	4655      	mov	r5, sl
 8010b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b82:	2b78      	cmp	r3, #120	; 0x78
 8010b84:	d806      	bhi.n	8010b94 <__ssvfiscanf_r+0xec>
 8010b86:	2b57      	cmp	r3, #87	; 0x57
 8010b88:	d810      	bhi.n	8010bac <__ssvfiscanf_r+0x104>
 8010b8a:	2b25      	cmp	r3, #37	; 0x25
 8010b8c:	d0c7      	beq.n	8010b1e <__ssvfiscanf_r+0x76>
 8010b8e:	d857      	bhi.n	8010c40 <__ssvfiscanf_r+0x198>
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d065      	beq.n	8010c60 <__ssvfiscanf_r+0x1b8>
 8010b94:	2303      	movs	r3, #3
 8010b96:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b98:	230a      	movs	r3, #10
 8010b9a:	9342      	str	r3, [sp, #264]	; 0x108
 8010b9c:	e076      	b.n	8010c8c <__ssvfiscanf_r+0x1e4>
 8010b9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010ba0:	fb02 1103 	mla	r1, r2, r3, r1
 8010ba4:	3930      	subs	r1, #48	; 0x30
 8010ba6:	9143      	str	r1, [sp, #268]	; 0x10c
 8010ba8:	4655      	mov	r5, sl
 8010baa:	e7d4      	b.n	8010b56 <__ssvfiscanf_r+0xae>
 8010bac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010bb0:	2a20      	cmp	r2, #32
 8010bb2:	d8ef      	bhi.n	8010b94 <__ssvfiscanf_r+0xec>
 8010bb4:	a101      	add	r1, pc, #4	; (adr r1, 8010bbc <__ssvfiscanf_r+0x114>)
 8010bb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010bba:	bf00      	nop
 8010bbc:	08010c6f 	.word	0x08010c6f
 8010bc0:	08010b95 	.word	0x08010b95
 8010bc4:	08010b95 	.word	0x08010b95
 8010bc8:	08010ccd 	.word	0x08010ccd
 8010bcc:	08010b95 	.word	0x08010b95
 8010bd0:	08010b95 	.word	0x08010b95
 8010bd4:	08010b95 	.word	0x08010b95
 8010bd8:	08010b95 	.word	0x08010b95
 8010bdc:	08010b95 	.word	0x08010b95
 8010be0:	08010b95 	.word	0x08010b95
 8010be4:	08010b95 	.word	0x08010b95
 8010be8:	08010ce3 	.word	0x08010ce3
 8010bec:	08010cc9 	.word	0x08010cc9
 8010bf0:	08010c47 	.word	0x08010c47
 8010bf4:	08010c47 	.word	0x08010c47
 8010bf8:	08010c47 	.word	0x08010c47
 8010bfc:	08010b95 	.word	0x08010b95
 8010c00:	08010c85 	.word	0x08010c85
 8010c04:	08010b95 	.word	0x08010b95
 8010c08:	08010b95 	.word	0x08010b95
 8010c0c:	08010b95 	.word	0x08010b95
 8010c10:	08010b95 	.word	0x08010b95
 8010c14:	08010cf3 	.word	0x08010cf3
 8010c18:	08010cc1 	.word	0x08010cc1
 8010c1c:	08010c67 	.word	0x08010c67
 8010c20:	08010b95 	.word	0x08010b95
 8010c24:	08010b95 	.word	0x08010b95
 8010c28:	08010cef 	.word	0x08010cef
 8010c2c:	08010b95 	.word	0x08010b95
 8010c30:	08010cc9 	.word	0x08010cc9
 8010c34:	08010b95 	.word	0x08010b95
 8010c38:	08010b95 	.word	0x08010b95
 8010c3c:	08010c6f 	.word	0x08010c6f
 8010c40:	3b45      	subs	r3, #69	; 0x45
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	d8a6      	bhi.n	8010b94 <__ssvfiscanf_r+0xec>
 8010c46:	2305      	movs	r3, #5
 8010c48:	e01f      	b.n	8010c8a <__ssvfiscanf_r+0x1e2>
 8010c4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4630      	mov	r0, r6
 8010c50:	4798      	blx	r3
 8010c52:	2800      	cmp	r0, #0
 8010c54:	f43f af68 	beq.w	8010b28 <__ssvfiscanf_r+0x80>
 8010c58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	f040 808d 	bne.w	8010d7a <__ssvfiscanf_r+0x2d2>
 8010c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c64:	e08f      	b.n	8010d86 <__ssvfiscanf_r+0x2de>
 8010c66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c68:	f042 0220 	orr.w	r2, r2, #32
 8010c6c:	9241      	str	r2, [sp, #260]	; 0x104
 8010c6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c74:	9241      	str	r2, [sp, #260]	; 0x104
 8010c76:	2210      	movs	r2, #16
 8010c78:	2b6f      	cmp	r3, #111	; 0x6f
 8010c7a:	9242      	str	r2, [sp, #264]	; 0x108
 8010c7c:	bf34      	ite	cc
 8010c7e:	2303      	movcc	r3, #3
 8010c80:	2304      	movcs	r3, #4
 8010c82:	e002      	b.n	8010c8a <__ssvfiscanf_r+0x1e2>
 8010c84:	2300      	movs	r3, #0
 8010c86:	9342      	str	r3, [sp, #264]	; 0x108
 8010c88:	2303      	movs	r3, #3
 8010c8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8010c8c:	6863      	ldr	r3, [r4, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	dd3d      	ble.n	8010d0e <__ssvfiscanf_r+0x266>
 8010c92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c94:	0659      	lsls	r1, r3, #25
 8010c96:	d404      	bmi.n	8010ca2 <__ssvfiscanf_r+0x1fa>
 8010c98:	6823      	ldr	r3, [r4, #0]
 8010c9a:	781a      	ldrb	r2, [r3, #0]
 8010c9c:	5cba      	ldrb	r2, [r7, r2]
 8010c9e:	0712      	lsls	r2, r2, #28
 8010ca0:	d43c      	bmi.n	8010d1c <__ssvfiscanf_r+0x274>
 8010ca2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010ca4:	2b02      	cmp	r3, #2
 8010ca6:	dc4b      	bgt.n	8010d40 <__ssvfiscanf_r+0x298>
 8010ca8:	466b      	mov	r3, sp
 8010caa:	4622      	mov	r2, r4
 8010cac:	a941      	add	r1, sp, #260	; 0x104
 8010cae:	4630      	mov	r0, r6
 8010cb0:	f000 f884 	bl	8010dbc <_scanf_chars>
 8010cb4:	2801      	cmp	r0, #1
 8010cb6:	d06a      	beq.n	8010d8e <__ssvfiscanf_r+0x2e6>
 8010cb8:	2802      	cmp	r0, #2
 8010cba:	f47f af1c 	bne.w	8010af6 <__ssvfiscanf_r+0x4e>
 8010cbe:	e7cb      	b.n	8010c58 <__ssvfiscanf_r+0x1b0>
 8010cc0:	2308      	movs	r3, #8
 8010cc2:	9342      	str	r3, [sp, #264]	; 0x108
 8010cc4:	2304      	movs	r3, #4
 8010cc6:	e7e0      	b.n	8010c8a <__ssvfiscanf_r+0x1e2>
 8010cc8:	220a      	movs	r2, #10
 8010cca:	e7d5      	b.n	8010c78 <__ssvfiscanf_r+0x1d0>
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4640      	mov	r0, r8
 8010cd0:	f000 f9c2 	bl	8011058 <__sccl>
 8010cd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cda:	9341      	str	r3, [sp, #260]	; 0x104
 8010cdc:	4605      	mov	r5, r0
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e7d3      	b.n	8010c8a <__ssvfiscanf_r+0x1e2>
 8010ce2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce8:	9341      	str	r3, [sp, #260]	; 0x104
 8010cea:	2300      	movs	r3, #0
 8010cec:	e7cd      	b.n	8010c8a <__ssvfiscanf_r+0x1e2>
 8010cee:	2302      	movs	r3, #2
 8010cf0:	e7cb      	b.n	8010c8a <__ssvfiscanf_r+0x1e2>
 8010cf2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010cf4:	06c3      	lsls	r3, r0, #27
 8010cf6:	f53f aefe 	bmi.w	8010af6 <__ssvfiscanf_r+0x4e>
 8010cfa:	9b00      	ldr	r3, [sp, #0]
 8010cfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010cfe:	1d19      	adds	r1, r3, #4
 8010d00:	9100      	str	r1, [sp, #0]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	07c0      	lsls	r0, r0, #31
 8010d06:	bf4c      	ite	mi
 8010d08:	801a      	strhmi	r2, [r3, #0]
 8010d0a:	601a      	strpl	r2, [r3, #0]
 8010d0c:	e6f3      	b.n	8010af6 <__ssvfiscanf_r+0x4e>
 8010d0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010d10:	4621      	mov	r1, r4
 8010d12:	4630      	mov	r0, r6
 8010d14:	4798      	blx	r3
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d0bb      	beq.n	8010c92 <__ssvfiscanf_r+0x1ea>
 8010d1a:	e79d      	b.n	8010c58 <__ssvfiscanf_r+0x1b0>
 8010d1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010d1e:	3201      	adds	r2, #1
 8010d20:	9245      	str	r2, [sp, #276]	; 0x114
 8010d22:	6862      	ldr	r2, [r4, #4]
 8010d24:	3a01      	subs	r2, #1
 8010d26:	2a00      	cmp	r2, #0
 8010d28:	6062      	str	r2, [r4, #4]
 8010d2a:	dd02      	ble.n	8010d32 <__ssvfiscanf_r+0x28a>
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	6023      	str	r3, [r4, #0]
 8010d30:	e7b2      	b.n	8010c98 <__ssvfiscanf_r+0x1f0>
 8010d32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010d34:	4621      	mov	r1, r4
 8010d36:	4630      	mov	r0, r6
 8010d38:	4798      	blx	r3
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d0ac      	beq.n	8010c98 <__ssvfiscanf_r+0x1f0>
 8010d3e:	e78b      	b.n	8010c58 <__ssvfiscanf_r+0x1b0>
 8010d40:	2b04      	cmp	r3, #4
 8010d42:	dc0f      	bgt.n	8010d64 <__ssvfiscanf_r+0x2bc>
 8010d44:	466b      	mov	r3, sp
 8010d46:	4622      	mov	r2, r4
 8010d48:	a941      	add	r1, sp, #260	; 0x104
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f000 f890 	bl	8010e70 <_scanf_i>
 8010d50:	e7b0      	b.n	8010cb4 <__ssvfiscanf_r+0x20c>
 8010d52:	bf00      	nop
 8010d54:	080109f5 	.word	0x080109f5
 8010d58:	08010a6f 	.word	0x08010a6f
 8010d5c:	080117fb 	.word	0x080117fb
 8010d60:	080119b3 	.word	0x080119b3
 8010d64:	4b0b      	ldr	r3, [pc, #44]	; (8010d94 <__ssvfiscanf_r+0x2ec>)
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f43f aec5 	beq.w	8010af6 <__ssvfiscanf_r+0x4e>
 8010d6c:	466b      	mov	r3, sp
 8010d6e:	4622      	mov	r2, r4
 8010d70:	a941      	add	r1, sp, #260	; 0x104
 8010d72:	4630      	mov	r0, r6
 8010d74:	f3af 8000 	nop.w
 8010d78:	e79c      	b.n	8010cb4 <__ssvfiscanf_r+0x20c>
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010d80:	bf18      	it	ne
 8010d82:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010d86:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010d90:	e7f9      	b.n	8010d86 <__ssvfiscanf_r+0x2de>
 8010d92:	bf00      	nop
 8010d94:	00000000 	.word	0x00000000

08010d98 <__ascii_mbtowc>:
 8010d98:	b082      	sub	sp, #8
 8010d9a:	b901      	cbnz	r1, 8010d9e <__ascii_mbtowc+0x6>
 8010d9c:	a901      	add	r1, sp, #4
 8010d9e:	b142      	cbz	r2, 8010db2 <__ascii_mbtowc+0x1a>
 8010da0:	b14b      	cbz	r3, 8010db6 <__ascii_mbtowc+0x1e>
 8010da2:	7813      	ldrb	r3, [r2, #0]
 8010da4:	600b      	str	r3, [r1, #0]
 8010da6:	7812      	ldrb	r2, [r2, #0]
 8010da8:	1e10      	subs	r0, r2, #0
 8010daa:	bf18      	it	ne
 8010dac:	2001      	movne	r0, #1
 8010dae:	b002      	add	sp, #8
 8010db0:	4770      	bx	lr
 8010db2:	4610      	mov	r0, r2
 8010db4:	e7fb      	b.n	8010dae <__ascii_mbtowc+0x16>
 8010db6:	f06f 0001 	mvn.w	r0, #1
 8010dba:	e7f8      	b.n	8010dae <__ascii_mbtowc+0x16>

08010dbc <_scanf_chars>:
 8010dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc0:	4615      	mov	r5, r2
 8010dc2:	688a      	ldr	r2, [r1, #8]
 8010dc4:	4680      	mov	r8, r0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	b932      	cbnz	r2, 8010dd8 <_scanf_chars+0x1c>
 8010dca:	698a      	ldr	r2, [r1, #24]
 8010dcc:	2a00      	cmp	r2, #0
 8010dce:	bf0c      	ite	eq
 8010dd0:	2201      	moveq	r2, #1
 8010dd2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8010dd6:	608a      	str	r2, [r1, #8]
 8010dd8:	6822      	ldr	r2, [r4, #0]
 8010dda:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010e6c <_scanf_chars+0xb0>
 8010dde:	06d1      	lsls	r1, r2, #27
 8010de0:	bf5f      	itttt	pl
 8010de2:	681a      	ldrpl	r2, [r3, #0]
 8010de4:	1d11      	addpl	r1, r2, #4
 8010de6:	6019      	strpl	r1, [r3, #0]
 8010de8:	6816      	ldrpl	r6, [r2, #0]
 8010dea:	2700      	movs	r7, #0
 8010dec:	69a0      	ldr	r0, [r4, #24]
 8010dee:	b188      	cbz	r0, 8010e14 <_scanf_chars+0x58>
 8010df0:	2801      	cmp	r0, #1
 8010df2:	d107      	bne.n	8010e04 <_scanf_chars+0x48>
 8010df4:	682b      	ldr	r3, [r5, #0]
 8010df6:	781a      	ldrb	r2, [r3, #0]
 8010df8:	6963      	ldr	r3, [r4, #20]
 8010dfa:	5c9b      	ldrb	r3, [r3, r2]
 8010dfc:	b953      	cbnz	r3, 8010e14 <_scanf_chars+0x58>
 8010dfe:	2f00      	cmp	r7, #0
 8010e00:	d031      	beq.n	8010e66 <_scanf_chars+0xaa>
 8010e02:	e022      	b.n	8010e4a <_scanf_chars+0x8e>
 8010e04:	2802      	cmp	r0, #2
 8010e06:	d120      	bne.n	8010e4a <_scanf_chars+0x8e>
 8010e08:	682b      	ldr	r3, [r5, #0]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e10:	071b      	lsls	r3, r3, #28
 8010e12:	d41a      	bmi.n	8010e4a <_scanf_chars+0x8e>
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	06da      	lsls	r2, r3, #27
 8010e18:	bf5e      	ittt	pl
 8010e1a:	682b      	ldrpl	r3, [r5, #0]
 8010e1c:	781b      	ldrbpl	r3, [r3, #0]
 8010e1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010e22:	682a      	ldr	r2, [r5, #0]
 8010e24:	686b      	ldr	r3, [r5, #4]
 8010e26:	3201      	adds	r2, #1
 8010e28:	602a      	str	r2, [r5, #0]
 8010e2a:	68a2      	ldr	r2, [r4, #8]
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	3a01      	subs	r2, #1
 8010e30:	606b      	str	r3, [r5, #4]
 8010e32:	3701      	adds	r7, #1
 8010e34:	60a2      	str	r2, [r4, #8]
 8010e36:	b142      	cbz	r2, 8010e4a <_scanf_chars+0x8e>
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	dcd7      	bgt.n	8010dec <_scanf_chars+0x30>
 8010e3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e40:	4629      	mov	r1, r5
 8010e42:	4640      	mov	r0, r8
 8010e44:	4798      	blx	r3
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d0d0      	beq.n	8010dec <_scanf_chars+0x30>
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	f013 0310 	ands.w	r3, r3, #16
 8010e50:	d105      	bne.n	8010e5e <_scanf_chars+0xa2>
 8010e52:	68e2      	ldr	r2, [r4, #12]
 8010e54:	3201      	adds	r2, #1
 8010e56:	60e2      	str	r2, [r4, #12]
 8010e58:	69a2      	ldr	r2, [r4, #24]
 8010e5a:	b102      	cbz	r2, 8010e5e <_scanf_chars+0xa2>
 8010e5c:	7033      	strb	r3, [r6, #0]
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	443b      	add	r3, r7
 8010e62:	6123      	str	r3, [r4, #16]
 8010e64:	2000      	movs	r0, #0
 8010e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e6a:	bf00      	nop
 8010e6c:	080117fb 	.word	0x080117fb

08010e70 <_scanf_i>:
 8010e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e74:	4698      	mov	r8, r3
 8010e76:	4b74      	ldr	r3, [pc, #464]	; (8011048 <_scanf_i+0x1d8>)
 8010e78:	460c      	mov	r4, r1
 8010e7a:	4682      	mov	sl, r0
 8010e7c:	4616      	mov	r6, r2
 8010e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e82:	b087      	sub	sp, #28
 8010e84:	ab03      	add	r3, sp, #12
 8010e86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010e8a:	4b70      	ldr	r3, [pc, #448]	; (801104c <_scanf_i+0x1dc>)
 8010e8c:	69a1      	ldr	r1, [r4, #24]
 8010e8e:	4a70      	ldr	r2, [pc, #448]	; (8011050 <_scanf_i+0x1e0>)
 8010e90:	2903      	cmp	r1, #3
 8010e92:	bf18      	it	ne
 8010e94:	461a      	movne	r2, r3
 8010e96:	68a3      	ldr	r3, [r4, #8]
 8010e98:	9201      	str	r2, [sp, #4]
 8010e9a:	1e5a      	subs	r2, r3, #1
 8010e9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010ea0:	bf88      	it	hi
 8010ea2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010ea6:	4627      	mov	r7, r4
 8010ea8:	bf82      	ittt	hi
 8010eaa:	eb03 0905 	addhi.w	r9, r3, r5
 8010eae:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010eb2:	60a3      	strhi	r3, [r4, #8]
 8010eb4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010eb8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010ebc:	bf98      	it	ls
 8010ebe:	f04f 0900 	movls.w	r9, #0
 8010ec2:	6023      	str	r3, [r4, #0]
 8010ec4:	463d      	mov	r5, r7
 8010ec6:	f04f 0b00 	mov.w	fp, #0
 8010eca:	6831      	ldr	r1, [r6, #0]
 8010ecc:	ab03      	add	r3, sp, #12
 8010ece:	7809      	ldrb	r1, [r1, #0]
 8010ed0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010ed4:	2202      	movs	r2, #2
 8010ed6:	f7ef f953 	bl	8000180 <memchr>
 8010eda:	b328      	cbz	r0, 8010f28 <_scanf_i+0xb8>
 8010edc:	f1bb 0f01 	cmp.w	fp, #1
 8010ee0:	d159      	bne.n	8010f96 <_scanf_i+0x126>
 8010ee2:	6862      	ldr	r2, [r4, #4]
 8010ee4:	b92a      	cbnz	r2, 8010ef2 <_scanf_i+0x82>
 8010ee6:	6822      	ldr	r2, [r4, #0]
 8010ee8:	2308      	movs	r3, #8
 8010eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010eee:	6063      	str	r3, [r4, #4]
 8010ef0:	6022      	str	r2, [r4, #0]
 8010ef2:	6822      	ldr	r2, [r4, #0]
 8010ef4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010ef8:	6022      	str	r2, [r4, #0]
 8010efa:	68a2      	ldr	r2, [r4, #8]
 8010efc:	1e51      	subs	r1, r2, #1
 8010efe:	60a1      	str	r1, [r4, #8]
 8010f00:	b192      	cbz	r2, 8010f28 <_scanf_i+0xb8>
 8010f02:	6832      	ldr	r2, [r6, #0]
 8010f04:	1c51      	adds	r1, r2, #1
 8010f06:	6031      	str	r1, [r6, #0]
 8010f08:	7812      	ldrb	r2, [r2, #0]
 8010f0a:	f805 2b01 	strb.w	r2, [r5], #1
 8010f0e:	6872      	ldr	r2, [r6, #4]
 8010f10:	3a01      	subs	r2, #1
 8010f12:	2a00      	cmp	r2, #0
 8010f14:	6072      	str	r2, [r6, #4]
 8010f16:	dc07      	bgt.n	8010f28 <_scanf_i+0xb8>
 8010f18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010f1c:	4631      	mov	r1, r6
 8010f1e:	4650      	mov	r0, sl
 8010f20:	4790      	blx	r2
 8010f22:	2800      	cmp	r0, #0
 8010f24:	f040 8085 	bne.w	8011032 <_scanf_i+0x1c2>
 8010f28:	f10b 0b01 	add.w	fp, fp, #1
 8010f2c:	f1bb 0f03 	cmp.w	fp, #3
 8010f30:	d1cb      	bne.n	8010eca <_scanf_i+0x5a>
 8010f32:	6863      	ldr	r3, [r4, #4]
 8010f34:	b90b      	cbnz	r3, 8010f3a <_scanf_i+0xca>
 8010f36:	230a      	movs	r3, #10
 8010f38:	6063      	str	r3, [r4, #4]
 8010f3a:	6863      	ldr	r3, [r4, #4]
 8010f3c:	4945      	ldr	r1, [pc, #276]	; (8011054 <_scanf_i+0x1e4>)
 8010f3e:	6960      	ldr	r0, [r4, #20]
 8010f40:	1ac9      	subs	r1, r1, r3
 8010f42:	f000 f889 	bl	8011058 <__sccl>
 8010f46:	f04f 0b00 	mov.w	fp, #0
 8010f4a:	68a3      	ldr	r3, [r4, #8]
 8010f4c:	6822      	ldr	r2, [r4, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d03d      	beq.n	8010fce <_scanf_i+0x15e>
 8010f52:	6831      	ldr	r1, [r6, #0]
 8010f54:	6960      	ldr	r0, [r4, #20]
 8010f56:	f891 c000 	ldrb.w	ip, [r1]
 8010f5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d035      	beq.n	8010fce <_scanf_i+0x15e>
 8010f62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010f66:	d124      	bne.n	8010fb2 <_scanf_i+0x142>
 8010f68:	0510      	lsls	r0, r2, #20
 8010f6a:	d522      	bpl.n	8010fb2 <_scanf_i+0x142>
 8010f6c:	f10b 0b01 	add.w	fp, fp, #1
 8010f70:	f1b9 0f00 	cmp.w	r9, #0
 8010f74:	d003      	beq.n	8010f7e <_scanf_i+0x10e>
 8010f76:	3301      	adds	r3, #1
 8010f78:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8010f7c:	60a3      	str	r3, [r4, #8]
 8010f7e:	6873      	ldr	r3, [r6, #4]
 8010f80:	3b01      	subs	r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	6073      	str	r3, [r6, #4]
 8010f86:	dd1b      	ble.n	8010fc0 <_scanf_i+0x150>
 8010f88:	6833      	ldr	r3, [r6, #0]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	6033      	str	r3, [r6, #0]
 8010f8e:	68a3      	ldr	r3, [r4, #8]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	60a3      	str	r3, [r4, #8]
 8010f94:	e7d9      	b.n	8010f4a <_scanf_i+0xda>
 8010f96:	f1bb 0f02 	cmp.w	fp, #2
 8010f9a:	d1ae      	bne.n	8010efa <_scanf_i+0x8a>
 8010f9c:	6822      	ldr	r2, [r4, #0]
 8010f9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010fa2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010fa6:	d1bf      	bne.n	8010f28 <_scanf_i+0xb8>
 8010fa8:	2310      	movs	r3, #16
 8010faa:	6063      	str	r3, [r4, #4]
 8010fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010fb0:	e7a2      	b.n	8010ef8 <_scanf_i+0x88>
 8010fb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010fb6:	6022      	str	r2, [r4, #0]
 8010fb8:	780b      	ldrb	r3, [r1, #0]
 8010fba:	f805 3b01 	strb.w	r3, [r5], #1
 8010fbe:	e7de      	b.n	8010f7e <_scanf_i+0x10e>
 8010fc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010fc4:	4631      	mov	r1, r6
 8010fc6:	4650      	mov	r0, sl
 8010fc8:	4798      	blx	r3
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d0df      	beq.n	8010f8e <_scanf_i+0x11e>
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	05d9      	lsls	r1, r3, #23
 8010fd2:	d50d      	bpl.n	8010ff0 <_scanf_i+0x180>
 8010fd4:	42bd      	cmp	r5, r7
 8010fd6:	d909      	bls.n	8010fec <_scanf_i+0x17c>
 8010fd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fe0:	4632      	mov	r2, r6
 8010fe2:	4650      	mov	r0, sl
 8010fe4:	4798      	blx	r3
 8010fe6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8010fea:	464d      	mov	r5, r9
 8010fec:	42bd      	cmp	r5, r7
 8010fee:	d028      	beq.n	8011042 <_scanf_i+0x1d2>
 8010ff0:	6822      	ldr	r2, [r4, #0]
 8010ff2:	f012 0210 	ands.w	r2, r2, #16
 8010ff6:	d113      	bne.n	8011020 <_scanf_i+0x1b0>
 8010ff8:	702a      	strb	r2, [r5, #0]
 8010ffa:	6863      	ldr	r3, [r4, #4]
 8010ffc:	9e01      	ldr	r6, [sp, #4]
 8010ffe:	4639      	mov	r1, r7
 8011000:	4650      	mov	r0, sl
 8011002:	47b0      	blx	r6
 8011004:	f8d8 3000 	ldr.w	r3, [r8]
 8011008:	6821      	ldr	r1, [r4, #0]
 801100a:	1d1a      	adds	r2, r3, #4
 801100c:	f8c8 2000 	str.w	r2, [r8]
 8011010:	f011 0f20 	tst.w	r1, #32
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	d00f      	beq.n	8011038 <_scanf_i+0x1c8>
 8011018:	6018      	str	r0, [r3, #0]
 801101a:	68e3      	ldr	r3, [r4, #12]
 801101c:	3301      	adds	r3, #1
 801101e:	60e3      	str	r3, [r4, #12]
 8011020:	6923      	ldr	r3, [r4, #16]
 8011022:	1bed      	subs	r5, r5, r7
 8011024:	445d      	add	r5, fp
 8011026:	442b      	add	r3, r5
 8011028:	6123      	str	r3, [r4, #16]
 801102a:	2000      	movs	r0, #0
 801102c:	b007      	add	sp, #28
 801102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011032:	f04f 0b00 	mov.w	fp, #0
 8011036:	e7ca      	b.n	8010fce <_scanf_i+0x15e>
 8011038:	07ca      	lsls	r2, r1, #31
 801103a:	bf4c      	ite	mi
 801103c:	8018      	strhmi	r0, [r3, #0]
 801103e:	6018      	strpl	r0, [r3, #0]
 8011040:	e7eb      	b.n	801101a <_scanf_i+0x1aa>
 8011042:	2001      	movs	r0, #1
 8011044:	e7f2      	b.n	801102c <_scanf_i+0x1bc>
 8011046:	bf00      	nop
 8011048:	080114f4 	.word	0x080114f4
 801104c:	0800d7e9 	.word	0x0800d7e9
 8011050:	0801124d 	.word	0x0801124d
 8011054:	08011b2e 	.word	0x08011b2e

08011058 <__sccl>:
 8011058:	b570      	push	{r4, r5, r6, lr}
 801105a:	780b      	ldrb	r3, [r1, #0]
 801105c:	4604      	mov	r4, r0
 801105e:	2b5e      	cmp	r3, #94	; 0x5e
 8011060:	bf0b      	itete	eq
 8011062:	784b      	ldrbeq	r3, [r1, #1]
 8011064:	1c4a      	addne	r2, r1, #1
 8011066:	1c8a      	addeq	r2, r1, #2
 8011068:	2100      	movne	r1, #0
 801106a:	bf08      	it	eq
 801106c:	2101      	moveq	r1, #1
 801106e:	3801      	subs	r0, #1
 8011070:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011074:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011078:	42a8      	cmp	r0, r5
 801107a:	d1fb      	bne.n	8011074 <__sccl+0x1c>
 801107c:	b90b      	cbnz	r3, 8011082 <__sccl+0x2a>
 801107e:	1e50      	subs	r0, r2, #1
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	f081 0101 	eor.w	r1, r1, #1
 8011086:	54e1      	strb	r1, [r4, r3]
 8011088:	4610      	mov	r0, r2
 801108a:	4602      	mov	r2, r0
 801108c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011090:	2d2d      	cmp	r5, #45	; 0x2d
 8011092:	d005      	beq.n	80110a0 <__sccl+0x48>
 8011094:	2d5d      	cmp	r5, #93	; 0x5d
 8011096:	d016      	beq.n	80110c6 <__sccl+0x6e>
 8011098:	2d00      	cmp	r5, #0
 801109a:	d0f1      	beq.n	8011080 <__sccl+0x28>
 801109c:	462b      	mov	r3, r5
 801109e:	e7f2      	b.n	8011086 <__sccl+0x2e>
 80110a0:	7846      	ldrb	r6, [r0, #1]
 80110a2:	2e5d      	cmp	r6, #93	; 0x5d
 80110a4:	d0fa      	beq.n	801109c <__sccl+0x44>
 80110a6:	42b3      	cmp	r3, r6
 80110a8:	dcf8      	bgt.n	801109c <__sccl+0x44>
 80110aa:	3002      	adds	r0, #2
 80110ac:	461a      	mov	r2, r3
 80110ae:	3201      	adds	r2, #1
 80110b0:	4296      	cmp	r6, r2
 80110b2:	54a1      	strb	r1, [r4, r2]
 80110b4:	dcfb      	bgt.n	80110ae <__sccl+0x56>
 80110b6:	1af2      	subs	r2, r6, r3
 80110b8:	3a01      	subs	r2, #1
 80110ba:	1c5d      	adds	r5, r3, #1
 80110bc:	42b3      	cmp	r3, r6
 80110be:	bfa8      	it	ge
 80110c0:	2200      	movge	r2, #0
 80110c2:	18ab      	adds	r3, r5, r2
 80110c4:	e7e1      	b.n	801108a <__sccl+0x32>
 80110c6:	4610      	mov	r0, r2
 80110c8:	e7da      	b.n	8011080 <__sccl+0x28>

080110ca <_malloc_usable_size_r>:
 80110ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110ce:	1f18      	subs	r0, r3, #4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	bfbc      	itt	lt
 80110d4:	580b      	ldrlt	r3, [r1, r0]
 80110d6:	18c0      	addlt	r0, r0, r3
 80110d8:	4770      	bx	lr

080110da <__submore>:
 80110da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110de:	460c      	mov	r4, r1
 80110e0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80110e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110e6:	4299      	cmp	r1, r3
 80110e8:	d11d      	bne.n	8011126 <__submore+0x4c>
 80110ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80110ee:	f7fe fc71 	bl	800f9d4 <_malloc_r>
 80110f2:	b918      	cbnz	r0, 80110fc <__submore+0x22>
 80110f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011100:	63a3      	str	r3, [r4, #56]	; 0x38
 8011102:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011106:	6360      	str	r0, [r4, #52]	; 0x34
 8011108:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801110c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011110:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011114:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011118:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801111c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011120:	6020      	str	r0, [r4, #0]
 8011122:	2000      	movs	r0, #0
 8011124:	e7e8      	b.n	80110f8 <__submore+0x1e>
 8011126:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011128:	0077      	lsls	r7, r6, #1
 801112a:	463a      	mov	r2, r7
 801112c:	f7ff f980 	bl	8010430 <_realloc_r>
 8011130:	4605      	mov	r5, r0
 8011132:	2800      	cmp	r0, #0
 8011134:	d0de      	beq.n	80110f4 <__submore+0x1a>
 8011136:	eb00 0806 	add.w	r8, r0, r6
 801113a:	4601      	mov	r1, r0
 801113c:	4632      	mov	r2, r6
 801113e:	4640      	mov	r0, r8
 8011140:	f7fd fa89 	bl	800e656 <memcpy>
 8011144:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011148:	f8c4 8000 	str.w	r8, [r4]
 801114c:	e7e9      	b.n	8011122 <__submore+0x48>
	...

08011150 <_strtol_l.constprop.0>:
 8011150:	2b01      	cmp	r3, #1
 8011152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011156:	4686      	mov	lr, r0
 8011158:	4690      	mov	r8, r2
 801115a:	d001      	beq.n	8011160 <_strtol_l.constprop.0+0x10>
 801115c:	2b24      	cmp	r3, #36	; 0x24
 801115e:	d906      	bls.n	801116e <_strtol_l.constprop.0+0x1e>
 8011160:	f7fd fa4a 	bl	800e5f8 <__errno>
 8011164:	2316      	movs	r3, #22
 8011166:	6003      	str	r3, [r0, #0]
 8011168:	2000      	movs	r0, #0
 801116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801116e:	4836      	ldr	r0, [pc, #216]	; (8011248 <_strtol_l.constprop.0+0xf8>)
 8011170:	460d      	mov	r5, r1
 8011172:	462a      	mov	r2, r5
 8011174:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011178:	5d06      	ldrb	r6, [r0, r4]
 801117a:	f016 0608 	ands.w	r6, r6, #8
 801117e:	d1f8      	bne.n	8011172 <_strtol_l.constprop.0+0x22>
 8011180:	2c2d      	cmp	r4, #45	; 0x2d
 8011182:	d12e      	bne.n	80111e2 <_strtol_l.constprop.0+0x92>
 8011184:	782c      	ldrb	r4, [r5, #0]
 8011186:	2601      	movs	r6, #1
 8011188:	1c95      	adds	r5, r2, #2
 801118a:	2b00      	cmp	r3, #0
 801118c:	d057      	beq.n	801123e <_strtol_l.constprop.0+0xee>
 801118e:	2b10      	cmp	r3, #16
 8011190:	d109      	bne.n	80111a6 <_strtol_l.constprop.0+0x56>
 8011192:	2c30      	cmp	r4, #48	; 0x30
 8011194:	d107      	bne.n	80111a6 <_strtol_l.constprop.0+0x56>
 8011196:	782a      	ldrb	r2, [r5, #0]
 8011198:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801119c:	2a58      	cmp	r2, #88	; 0x58
 801119e:	d149      	bne.n	8011234 <_strtol_l.constprop.0+0xe4>
 80111a0:	786c      	ldrb	r4, [r5, #1]
 80111a2:	2310      	movs	r3, #16
 80111a4:	3502      	adds	r5, #2
 80111a6:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80111aa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80111ae:	2200      	movs	r2, #0
 80111b0:	fbbc f9f3 	udiv	r9, ip, r3
 80111b4:	4610      	mov	r0, r2
 80111b6:	fb03 ca19 	mls	sl, r3, r9, ip
 80111ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80111be:	2f09      	cmp	r7, #9
 80111c0:	d814      	bhi.n	80111ec <_strtol_l.constprop.0+0x9c>
 80111c2:	463c      	mov	r4, r7
 80111c4:	42a3      	cmp	r3, r4
 80111c6:	dd20      	ble.n	801120a <_strtol_l.constprop.0+0xba>
 80111c8:	1c57      	adds	r7, r2, #1
 80111ca:	d007      	beq.n	80111dc <_strtol_l.constprop.0+0x8c>
 80111cc:	4581      	cmp	r9, r0
 80111ce:	d319      	bcc.n	8011204 <_strtol_l.constprop.0+0xb4>
 80111d0:	d101      	bne.n	80111d6 <_strtol_l.constprop.0+0x86>
 80111d2:	45a2      	cmp	sl, r4
 80111d4:	db16      	blt.n	8011204 <_strtol_l.constprop.0+0xb4>
 80111d6:	fb00 4003 	mla	r0, r0, r3, r4
 80111da:	2201      	movs	r2, #1
 80111dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111e0:	e7eb      	b.n	80111ba <_strtol_l.constprop.0+0x6a>
 80111e2:	2c2b      	cmp	r4, #43	; 0x2b
 80111e4:	bf04      	itt	eq
 80111e6:	782c      	ldrbeq	r4, [r5, #0]
 80111e8:	1c95      	addeq	r5, r2, #2
 80111ea:	e7ce      	b.n	801118a <_strtol_l.constprop.0+0x3a>
 80111ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80111f0:	2f19      	cmp	r7, #25
 80111f2:	d801      	bhi.n	80111f8 <_strtol_l.constprop.0+0xa8>
 80111f4:	3c37      	subs	r4, #55	; 0x37
 80111f6:	e7e5      	b.n	80111c4 <_strtol_l.constprop.0+0x74>
 80111f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80111fc:	2f19      	cmp	r7, #25
 80111fe:	d804      	bhi.n	801120a <_strtol_l.constprop.0+0xba>
 8011200:	3c57      	subs	r4, #87	; 0x57
 8011202:	e7df      	b.n	80111c4 <_strtol_l.constprop.0+0x74>
 8011204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011208:	e7e8      	b.n	80111dc <_strtol_l.constprop.0+0x8c>
 801120a:	1c53      	adds	r3, r2, #1
 801120c:	d108      	bne.n	8011220 <_strtol_l.constprop.0+0xd0>
 801120e:	2322      	movs	r3, #34	; 0x22
 8011210:	f8ce 3000 	str.w	r3, [lr]
 8011214:	4660      	mov	r0, ip
 8011216:	f1b8 0f00 	cmp.w	r8, #0
 801121a:	d0a6      	beq.n	801116a <_strtol_l.constprop.0+0x1a>
 801121c:	1e69      	subs	r1, r5, #1
 801121e:	e006      	b.n	801122e <_strtol_l.constprop.0+0xde>
 8011220:	b106      	cbz	r6, 8011224 <_strtol_l.constprop.0+0xd4>
 8011222:	4240      	negs	r0, r0
 8011224:	f1b8 0f00 	cmp.w	r8, #0
 8011228:	d09f      	beq.n	801116a <_strtol_l.constprop.0+0x1a>
 801122a:	2a00      	cmp	r2, #0
 801122c:	d1f6      	bne.n	801121c <_strtol_l.constprop.0+0xcc>
 801122e:	f8c8 1000 	str.w	r1, [r8]
 8011232:	e79a      	b.n	801116a <_strtol_l.constprop.0+0x1a>
 8011234:	2430      	movs	r4, #48	; 0x30
 8011236:	2b00      	cmp	r3, #0
 8011238:	d1b5      	bne.n	80111a6 <_strtol_l.constprop.0+0x56>
 801123a:	2308      	movs	r3, #8
 801123c:	e7b3      	b.n	80111a6 <_strtol_l.constprop.0+0x56>
 801123e:	2c30      	cmp	r4, #48	; 0x30
 8011240:	d0a9      	beq.n	8011196 <_strtol_l.constprop.0+0x46>
 8011242:	230a      	movs	r3, #10
 8011244:	e7af      	b.n	80111a6 <_strtol_l.constprop.0+0x56>
 8011246:	bf00      	nop
 8011248:	080117fb 	.word	0x080117fb

0801124c <_strtol_r>:
 801124c:	f7ff bf80 	b.w	8011150 <_strtol_l.constprop.0>

08011250 <__ascii_wctomb>:
 8011250:	4603      	mov	r3, r0
 8011252:	4608      	mov	r0, r1
 8011254:	b141      	cbz	r1, 8011268 <__ascii_wctomb+0x18>
 8011256:	2aff      	cmp	r2, #255	; 0xff
 8011258:	d904      	bls.n	8011264 <__ascii_wctomb+0x14>
 801125a:	228a      	movs	r2, #138	; 0x8a
 801125c:	601a      	str	r2, [r3, #0]
 801125e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011262:	4770      	bx	lr
 8011264:	700a      	strb	r2, [r1, #0]
 8011266:	2001      	movs	r0, #1
 8011268:	4770      	bx	lr

0801126a <_raise_r>:
 801126a:	291f      	cmp	r1, #31
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	4604      	mov	r4, r0
 8011270:	460d      	mov	r5, r1
 8011272:	d904      	bls.n	801127e <_raise_r+0x14>
 8011274:	2316      	movs	r3, #22
 8011276:	6003      	str	r3, [r0, #0]
 8011278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011280:	b112      	cbz	r2, 8011288 <_raise_r+0x1e>
 8011282:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011286:	b94b      	cbnz	r3, 801129c <_raise_r+0x32>
 8011288:	4620      	mov	r0, r4
 801128a:	f000 f831 	bl	80112f0 <_getpid_r>
 801128e:	462a      	mov	r2, r5
 8011290:	4601      	mov	r1, r0
 8011292:	4620      	mov	r0, r4
 8011294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011298:	f000 b818 	b.w	80112cc <_kill_r>
 801129c:	2b01      	cmp	r3, #1
 801129e:	d00a      	beq.n	80112b6 <_raise_r+0x4c>
 80112a0:	1c59      	adds	r1, r3, #1
 80112a2:	d103      	bne.n	80112ac <_raise_r+0x42>
 80112a4:	2316      	movs	r3, #22
 80112a6:	6003      	str	r3, [r0, #0]
 80112a8:	2001      	movs	r0, #1
 80112aa:	e7e7      	b.n	801127c <_raise_r+0x12>
 80112ac:	2400      	movs	r4, #0
 80112ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112b2:	4628      	mov	r0, r5
 80112b4:	4798      	blx	r3
 80112b6:	2000      	movs	r0, #0
 80112b8:	e7e0      	b.n	801127c <_raise_r+0x12>
	...

080112bc <raise>:
 80112bc:	4b02      	ldr	r3, [pc, #8]	; (80112c8 <raise+0xc>)
 80112be:	4601      	mov	r1, r0
 80112c0:	6818      	ldr	r0, [r3, #0]
 80112c2:	f7ff bfd2 	b.w	801126a <_raise_r>
 80112c6:	bf00      	nop
 80112c8:	20000088 	.word	0x20000088

080112cc <_kill_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	4d07      	ldr	r5, [pc, #28]	; (80112ec <_kill_r+0x20>)
 80112d0:	2300      	movs	r3, #0
 80112d2:	4604      	mov	r4, r0
 80112d4:	4608      	mov	r0, r1
 80112d6:	4611      	mov	r1, r2
 80112d8:	602b      	str	r3, [r5, #0]
 80112da:	f7f1 fb98 	bl	8002a0e <_kill>
 80112de:	1c43      	adds	r3, r0, #1
 80112e0:	d102      	bne.n	80112e8 <_kill_r+0x1c>
 80112e2:	682b      	ldr	r3, [r5, #0]
 80112e4:	b103      	cbz	r3, 80112e8 <_kill_r+0x1c>
 80112e6:	6023      	str	r3, [r4, #0]
 80112e8:	bd38      	pop	{r3, r4, r5, pc}
 80112ea:	bf00      	nop
 80112ec:	20000628 	.word	0x20000628

080112f0 <_getpid_r>:
 80112f0:	f7f1 bb86 	b.w	8002a00 <_getpid>

080112f4 <_init>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	bf00      	nop
 80112f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112fa:	bc08      	pop	{r3}
 80112fc:	469e      	mov	lr, r3
 80112fe:	4770      	bx	lr

08011300 <_fini>:
 8011300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011302:	bf00      	nop
 8011304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011306:	bc08      	pop	{r3}
 8011308:	469e      	mov	lr, r3
 801130a:	4770      	bx	lr
